<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据库迁移</title>
    <url>/2019/04/13/database/migration/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Oracle-SQL-Developer"><a href="#Oracle-SQL-Developer" class="headerlink" title="Oracle SQL Developer"></a><a href="https://www.oracle.com/technetwork/developer-tools/sql-developer/downloads/sqldev-downloads-42-3802334.html" target="_blank" rel="noopener">Oracle SQL Developer</a></h2><p>Oracle SQL Developer 包含迁移支持，让用户可以将数据库对象和数据从 IBM DB2、MySQL、Microsoft SQL Server、Microsoft Access、Sybase 和 Teradata 迁移到 Oracle。</p>
<h2 id="DataX"><a href="#DataX" class="headerlink" title="DataX"></a><a href="https://github.com/alibaba/DataX/" target="_blank" rel="noopener">DataX</a></h2><p>DataX 是阿里巴巴集团内被广泛使用的离线数据同步工具/平台，实现包括 MySQL、Oracle、SqlServer、Postgre、HDFS、Hive、ADS、HBase、TableStore(OTS)、MaxCompute(ODPS)、DRDS 等各种异构数据源之间高效的数据同步功能。</p>
<p>DataX本身作为数据同步框架，将不同数据源的同步抽象为从源头数据源读取数据的Reader插件，以及向目标端写入数据的Writer插件，理论上DataX框架可以支持任意数据源类型的数据同步工作。同时DataX插件体系作为一套生态系统, 每接入一套新数据源该新加入的数据源即可实现和现有的数据源互通。</p>
<h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>DataX 需要 Python 运行环境的支持，官方推荐安装 <a href="https://www.python.org/ftp/python/" target="_blank" rel="noopener">Python2.6.X</a> 版本。</p>
<h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><ol>
<li><p><a href="http://datax-opensource.oss-cn-hangzhou.aliyuncs.com/datax.tar.gz" target="_blank" rel="noopener">下载DataX</a></p>
</li>
<li><p>启动DataX</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &#123;DATAX_HOME&#125;</span><br><span class="line">$ python ./bin/datax.py ./job/job.json</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><ol>
<li><p>下载DataX源码</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ git clone git@github.com:alibaba/DataX.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过maven打包</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &#123;DATAX_HOME&#125;</span><br><span class="line">$ mvn -U clean package assembly:assembly -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动DataX</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &#123;DATAX_HOME&#125;/target/datax/datax</span><br><span class="line">$ python ./bin/datax.py ./job/job.json</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>说明：打包成功后的DataX包位于 {DATAX_HOME}/target/datax/datax/ 目录下</p>
</blockquote>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol>
<li>根据模板创建作业的配置文件(JSON格式)</li>
</ol>
<ul>
<li><a href="https://github.com/alibaba/DataX/blob/master/mysqlreader/doc/mysqlreader.md" target="_blank" rel="noopener">MysqlReader配置样例</a></li>
<li><a href="https://github.com/alibaba/DataX/blob/master/mysqlwriter/doc/mysqlwriter.md" target="_blank" rel="noopener">MysqlWriter配置样例</a></li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"job"</span>: &#123;</span><br><span class="line">        <span class="attr">"setting"</span>: &#123;</span><br><span class="line">            <span class="attr">"speed"</span>: &#123;</span><br><span class="line">                <span class="attr">"channel"</span>: <span class="number">8</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"errorLimit"</span>: &#123;</span><br><span class="line">                <span class="attr">"record"</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">"percentage"</span>: <span class="number">0.02</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"content"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"reader"</span>: &#123;</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"mysqlreader"</span>,</span><br><span class="line">                    <span class="attr">"parameter"</span>: &#123;</span><br><span class="line">                        <span class="attr">"username"</span>: <span class="string">"$&#123;jdbc_username_r&#125;"</span>,</span><br><span class="line">                        <span class="attr">"password"</span>: <span class="string">"$&#123;jdbc_password_r&#125;"</span>,</span><br><span class="line">                        <span class="attr">"connection"</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"jdbcUrl"</span>: [<span class="string">"$&#123;jdbc_url_r&#125;"</span>],</span><br><span class="line">                                <span class="attr">"querySql"</span>: [</span><br><span class="line">                                    <span class="string">"SELECT id, username, password, nickname, salt, phone, email, avatar, lang_key, activated, activation_key, reset_key, reset_date, created_by, created_at, updated_by, updated_at FROM sys_user"</span></span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"writer"</span>: &#123;</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"mysqlwriter"</span>,</span><br><span class="line">                    <span class="attr">"parameter"</span>: &#123;</span><br><span class="line">                        <span class="attr">"username"</span>: <span class="string">"$&#123;jdbc_username_w&#125;"</span>,</span><br><span class="line">                        <span class="attr">"password"</span>: <span class="string">"$&#123;jdbc_password_w&#125;"</span>,</span><br><span class="line">                        <span class="attr">"column"</span>: [</span><br><span class="line">                            <span class="string">"id"</span>, <span class="string">"username"</span>, <span class="string">"password"</span>, <span class="string">"nickname"</span>, <span class="string">"salt"</span>, <span class="string">"phone"</span>, <span class="string">"email"</span>, <span class="string">"avatar"</span>, <span class="string">"lang_key"</span>, <span class="string">"activated"</span>, <span class="string">"activation_key"</span>, <span class="string">"reset_key"</span>, <span class="string">"reset_date"</span>, <span class="string">"created_by"</span>, <span class="string">"created_at"</span>, <span class="string">"updated_by"</span>, <span class="string">"updated_at"</span></span><br><span class="line">                        ],</span><br><span class="line">                        <span class="attr">"connection"</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"jdbcUrl"</span>: <span class="string">"$&#123;jdbc_url_w&#125;"</span>,</span><br><span class="line">                                <span class="attr">"table"</span>: [<span class="string">"sys_user"</span>]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        <span class="attr">"preSql"</span>: [</span><br><span class="line">                            <span class="string">"TRUNCATE TABLE @table"</span></span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>(1)可通过命令查看配置模板：<code>python ./bin/datax.py -r mysqlreader -w mysqlwriter</code><br>(2)<code>job.setting.speed.byte</code>配置全局的byte限速，<code>core.transport.channel.speed.byte</code>配置单个channel的byte限速（channel个数 = 全局的byte限速 / 单个channel的byte限速）</p>
</blockquote>
<ol start="2">
<li>启动DataX<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &#123;DATAX_HOME&#125;</span><br><span class="line">$ python ./bin/datax.py ./job/mysql2mysql.json -p"-Djdbc_username_r=root -Djdbc_password_r=root -Djdbc_url_r=jdbc:mysql://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">3306</span>/cloud -Djdbc_username_w=root -Djdbc_password_w=root -Djdbc_url_w=jdbc:mysql://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">3306</span>/test"</span><br></pre></td></tr></table></figure>
</li>
</ol>
<!-- 
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="comment">REM for /r ./job %i in (*.json) do @echo %i</span></span><br><span class="line">$ <span class="built_in">cd</span> &#123;DATAX_HOME&#125;</span><br><span class="line">$ <span class="keyword">for</span> /r ./job %i <span class="keyword">in</span> (*.json) <span class="keyword">do</span> python ./bin/datax.py %i -p"-Djdbc_username_r=root -Djdbc_password_r=root -Djdbc_url_r=jdbc:mysql://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">3306</span>/cloud -Djdbc_username_w=root -Djdbc_password_w=root -Djdbc_url_w=jdbc:mysql://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">3306</span>/test"</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &#123;DATAX_HOME&#125;</span><br><span class="line">$ find ./job -name <span class="string">"*.json"</span> -<span class="built_in">exec</span> python ./bin/datax.py &#123;&#125; -p<span class="string">"-Djdbc_username_r=root -Djdbc_password_r=root -Djdbc_url_r=jdbc:mysql://127.0.0.1:3306/cloud -Djdbc_username_w=root -Djdbc_password_w=root -Djdbc_url_w=jdbc:mysql://127.0.0.1:3306/test"</span></span><br></pre></td></tr></table></figure>
<p>–&gt;</p>
<blockquote>
<p>解决Windows平台下Python控制台中文乱码：在命令行窗口下输入<code>CHCP 65001</code>命令将代码页设置为UTF-8并将命令行窗口字体设为<code>Lucida Console</code>，若设置当前代码页为GBK则使用<code>CHCP 936</code></p>
</blockquote>
-->]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Engineering - Docker</title>
    <url>/2019/07/14/engineering/docker/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">Docker安装</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Download packages</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-cli-18.09.7-3.el7.x86_64.rpm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-18.09.0-3.el7.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Install required packages</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install container-selinux libseccomp</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh containerd.io-1.2.6-3.3.el7.x86_64.rpm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh docker-ce-cli-18.09.7-3.el7.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Install docker</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh docker-ce-18.09.0-3.el7.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Uninstall docker</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># $ yum remove docker-ce</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Start docker</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl start docker</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Verify docker</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run hello-world</span></span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># List images</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br></pre></td></tr></table></figure>
<h2 id="Docker配置"><a href="#Docker配置" class="headerlink" title="Docker配置"></a><a href="https://docs.docker.com/engine/reference/commandline/dockerd/" target="_blank" rel="noopener">Docker配置</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 开启远程访问Docker</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 方式一</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /usr/lib/systemd/system/docker.service</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">ExecStart=/usr/bin/dockerd -H unix://</span></span><br><span class="line">ExecStart=/usr/bin/dockerd</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/docker/daemon.json</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    "hosts": ["unix:///var/run/docker.sock", "tcp://0.0.0.0:2375"]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 方式二</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /usr/lib/systemd/system/docker.service</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">ExecStart=/usr/bin/dockerd -H unix://</span></span><br><span class="line">ExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2375</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 方式三</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 重新加载配置</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl daemon-reload</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 重启docker</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart docker</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 测试</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl 127.0.0.1:2375/info</span></span><br></pre></td></tr></table></figure>
<h2 id="Docker部署服务"><a href="#Docker部署服务" class="headerlink" title="Docker部署服务"></a><a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">Docker部署服务</a></h2><h3 id="构建Docker镜像"><a href="#构建Docker镜像" class="headerlink" title="构建Docker镜像"></a>构建Docker镜像</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://192.168.8.129:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/docker<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Package as an executable jar --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">## src/main/docker/Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> *.jar app.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<h3 id="启动容器实例"><a href="#启动容器实例" class="headerlink" title="启动容器实例"></a>启动容器实例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 将本机7070端口映射到容器的8080端口</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 7070:8080 reliablemq</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># -d|--detach: Run container in background and print container ID</span></span></span><br><span class="line">79fbc1e40a2aa3e5ef16823102a41218</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看容器日志</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker logs 79fbc1e40a2aa3e5ef16823102a41218</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 列出本地容器</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 列出本地镜像</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 关闭容器</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker stop facf8533780a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 删除容器</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rm facf8533780a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 删除镜像</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rmi 3d9019901c03</span></span><br></pre></td></tr></table></figure>
<h2 id="Docker可视化"><a href="#Docker可视化" class="headerlink" title="Docker可视化"></a><a href="https://www.portainer.io/" target="_blank" rel="noopener">Docker可视化</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 从DockerHub查找Portainer镜像</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker search portainer</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 下载Portainer镜像</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker pull portainer/portainer</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 单机运行Portainer</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 9000:9000 portainer/portainer</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 测试</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl http://127.0.0.1:9000</span></span><br></pre></td></tr></table></figure>
<h2 id="Docker私服"><a href="#Docker私服" class="headerlink" title="Docker私服"></a><a href="https://goharbor.io/" target="_blank" rel="noopener">Docker私服</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Install Docker Compose</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mv docker-compose-Linux-x86_64 /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Test the installation</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker-compose --version</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Download the harbor installer</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://storage.googleapis.com/harbor-releases/release-1.8.0/harbor-offline-installer-v1.8.1.tgz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf harbor-offline-installer-v1.8.1.tgz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> harbor</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Configure harbor.yml</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi harbor.yml</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Configuration file of Harbor</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The IP address or hostname to access admin UI and registry service.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">hostname: reg.mydomain.com</span></span><br><span class="line">hostname: 192.168.8.129</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> http related config</span></span><br><span class="line">http:</span><br><span class="line">  port: 80</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The initial password of Harbor admin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> It only works <span class="keyword">in</span> first time to install harbor</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Remember Change the admin password from UI after launching Harbor.</span></span><br><span class="line">harbor_admin_password: Harbor12345</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Harbor DB configuration</span></span><br><span class="line">database:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> The password <span class="keyword">for</span> the root user of Harbor DB. Change this before any production use.</span></span><br><span class="line">  password: root123</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The default data volume</span></span><br><span class="line">data_volume: /data</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Install and start Harbor</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./install.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Test the installation</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl http://192.168.8.129</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Deploy a plain HTTP registry</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/docker/daemon.json</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    "insecure-registries": ["192.168.8.129"]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Restart Docker for the changes to take effect</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl daemon-reload &amp;&amp; systemctl restart docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker-compose -f /opt/harbor/docker-compose.yml up -d</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker info</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Login to a self-hosted registry</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker login -u admin -p Harbor12345 http://192.168.8.129</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker tag hello-world:latest 192.168.8.129/library/hello-world:latest</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># To push an image to a private registry, Docker requires that the image tag being pushed is prefixed with the hostname and port of the registry.</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker push 192.168.8.129/library/hello-world:latest</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- The credentials for the registry is set in the settings.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">serverId</span>&gt;</span>docker-hub<span class="tag">&lt;/<span class="name">serverId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pushImage</span>&gt;</span>true<span class="tag">&lt;/<span class="name">pushImage</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">imageName</span>&gt;</span></span><br><span class="line">            192.168.8.129/library/$&#123;project.artifactId&#125;:$&#123;project.version&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;imageName&gt;$&#123;project.artifactId&#125;:$&#123;project.version&#125;&lt;/imageName&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://192.168.8.129:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/docker<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- $&#123;MAVEN_HOME&#125;/conf/settings.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>docker-hub<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>Harbor12345<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>lugavin@outlook.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>engineering</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Engineering - Jenkins</title>
    <url>/2019/07/10/engineering/jenkins/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a><a href="http://mirrors.jenkins-ci.org/war-stable/" target="_blank" rel="noopener">下载安装</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget http://mirrors.jenkins-ci.org/war-stable/latest/jenkins.war</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> java -jar jenkins.war --httpPort=8090 --prefix=/jenkins</span></span><br></pre></td></tr></table></figure>
<p>启动后如果遇到以下错误：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: </span><br><span class="line">sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>则可以通过修改<code>${JENKINS_HOME}/hudson.model.UpdateCenter.xml</code>文件来解决：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.1' encoding='UTF-8'?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sites</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">site</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>default<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;url&gt;https://updates.jenkins.io/update-center.json&lt;/url&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://updates.jenkins.io/update-center.json<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">site</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sites</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget http://mirrors.jenkins-ci.org/plugins/publish-over-ssh/latest/publish-over-ssh.hpi</span></span><br></pre></td></tr></table></figure>
<h2 id="配置-SSH-Server"><a href="#配置-SSH-Server" class="headerlink" title="配置 SSH Server"></a>配置 SSH Server</h2><p><em>Manage Jenkins &gt; Configure System &gt; Publish over SSH &gt; SSH Servers &gt; Add SSH Server</em></p>
<p><img src="/images/engineering/jenkins-add-ssh-server.png" alt="jenkins-add-ssh-server"></p>
<h2 id="创建-Freestyle-Job"><a href="#创建-Freestyle-Job" class="headerlink" title="创建 Freestyle Job"></a>创建 Freestyle Job</h2><p><img src="/images/engineering/jenkins-git-repo.png" alt="jenkins-git-repo"></p>
<p><img src="/images/engineering/jenkins-build-env.png" alt="jenkins-build-env"></p>
<p><img src="/images/engineering/jenkins-mvn-build.png" alt="jenkins-mvn-build"></p>
<blockquote>
<p><em>SSH Publishers</em> 中的 <em>Remote directory</em> 是相对于 <em>SSH Servers</em> 中设置的 <em>Remote Directory</em> 的；建议将 <em>SSH Servers</em> 中的 <em>Remote Directory</em> 设置为根目录，若不设置，那么打包后的文件可能无法上传到 <em>SSH Publishers</em> 中设置的 <em>Remote directory</em> 目录。</p>
</blockquote>
]]></content>
      <categories>
        <category>engineering</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Awesome</title>
    <url>/2017/05/27/javaee/awesome/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p><em>项目管理及自动构建工具。</em></p>
<ul>
<li><a href="http://maven.apache.org/" target="_blank" rel="noopener">Apache Maven</a>：Maven使用声明进行构建并进行依赖管理，偏向于使用约定而不是配置进行构建。在大型项目开发中，使用Maven来管理是必不可少的。如果你使用Maven，你可以从Maven中央仓库下载所需要的构件，但这通常不是一个好的做法，你应该在本地架设一个Maven仓库服务器，在代理远程仓库的同时维护本地仓库，以节省带宽和时间，<a href="http://www.sonatype.org/nexus/archived/" target="_blank" rel="noopener">Nexus</a> 就可以满足这样的需要。</li>
<li><a href="http://www.gradle.org/" target="_blank" rel="noopener">Gradle</a>：Gradle采用增量构建，Gradle通过Groovy编程而不是传统的XML声明进行配置，其可以很好地配合Maven进行依赖管理，并且把Ant脚本当作头等公民。</li>
</ul>
<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p><em>软件质量评估工具。</em></p>
<ul>
<li><a href="https://github.com/checkstyle/checkstyle" target="_blank" rel="noopener">Checkstyle</a>：一个可帮助程序员编写符合规范代码的开发工具。</li>
<li><a href="https://www.sonarqube.org/" target="_blank" rel="noopener">SonarQube</a>：一个开源的代码质量管理系统，它可以通过使用插件机制与 <a href="https://eclipse.org/" target="_blank" rel="noopener">Eclipse</a> 和 <a href="https://www.atlassian.com/software/jira" target="_blank" rel="noopener">JIRA</a> 等其他外部工具集成，从而实现了对代码的质量的全面自动化分析和管理。</li>
<li><a href="http://findbugs.sourceforge.net/" target="_blank" rel="noopener">FindBugs</a>：通过静态分析来识别Java程序中潜在Bug。</li>
<li><a href="https://pmd.github.io/" target="_blank" rel="noopener">PMD</a>：源代码分析器。</li>
</ul>
<h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h2><p><em>支持持续集成、测试和应用发布的工具。</em></p>
<ul>
<li><a href="https://jenkins.io/" target="_blank" rel="noopener">Jenkins</a>：提供了基于服务器部署持续集成服务，其前身是 <a href="http://hudson-ci.org/" target="_blank" rel="noopener">Hudson</a> 项目。</li>
<li><a href="http://www.jetbrains.com/teamcity/" target="_blank" rel="noopener">TeamCity</a>：JetBrains持续集成方案。</li>
<li><a href="https://travis-ci.org" target="_blank" rel="noopener">Travis</a>：提供托管服务，常用于开源项目。</li>
<li><a href="https://www.atlassian.com/software/bamboo" target="_blank" rel="noopener">Bamboo</a>：Atlassian的持续集成解决方案，包含很多其它产品。</li>
<li><a href="https://www.thoughtworks.com/go/" target="_blank" rel="noopener">Go</a>：ThoughtWorks开源持续集成解决方案。</li>
<li><a href="https://circleci.com/" target="_blank" rel="noopener">CircleCI</a>：提供托管服务，可免费试用。</li>
<li><a href="https://codeship.com/" target="_blank" rel="noopener">Codeship</a>：提供托管服务，提供有限免费计划。</li>
</ul>
<h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><p><em>集成开发环境。</em></p>
<ul>
<li><a href="http://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA</a>：IntelliJ IDEA被认为是当前Java开发效率最快的IDE工具，它集成了开发过程中实用的众多功能，几乎可以不用鼠标便能完成你要做的任何事情，最大程度的加快开发的速度。</li>
<li><a href="http://www.eclipse.org/" target="_blank" rel="noopener">Eclipse</a>：著名的跨平台开源集成开发环境，以其丰富插件著称。</li>
<li><a href="https://netbeans.org/" target="_blank" rel="noopener">NetBeans</a>：集成了很多Java SE和Java EE特性，包括数据库访问、服务器、HTML5以及AngularJS。</li>
</ul>
<h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><p><em>提供具体统计算法的工具，其算法可从数据中学习。</em></p>
<ul>
<li><a href="http://hadoop.apache.org/" target="_blank" rel="noopener">Apache Hadoop</a>：商用硬件集群上大规模数据存储和处理的开源软件框架。Hadoop是根据谷歌公司发表的MapReduce和Google文件系统的论文自行实现而成。Hadoop实现了名为MapReduce的编程范式：应用程序被分区成许多小部分，而每个部分都能在集群中的任意节点上运行或重新运行。此外，Hadoop还提供了分布式文件系统，用以存储所有计算节点的数据，这为整个集群带来了非常高的带宽。MapReduce(并行计算框架)和HDFS(分布式文件系统)的设计，使得整个框架能够自动处理节点故障。</li>
<li><a href="http://spark.apache.org/" target="_blank" rel="noopener">Apache Spark</a>：大数据内存计算框架。相对于Hadoop的MapReduce会在运行完工作后将中介数据存放到磁盘中，Spark使用了内存内运算技术，能在数据尚未写入硬盘时即在内存内分析运算。Spark在内存内运行程序的运算速度能做到比Hadoop MapReduce的运算速度快上100倍，即便是运行程序于硬盘时，Spark也能快上10倍速度。Spark允许用户将数据加载至簇内存，并多次对其进行查询，非常适合用于机器学习算法。</li>
<li><a href="https://mahout.apache.org/" target="_blank" rel="noopener">Apache Mahout</a>：机器学习算法软件包。</li>
<li><a href="https://www.h2o.ai/" target="_blank" rel="noopener">H2O</a>：用作大数据统计的分析引擎。</li>
<li><a href="http://www.cs.waikato.ac.nz/ml/weka/" target="_blank" rel="noopener">Weka</a>：用作数据挖掘的算法集合，包括从预处理到可视化的各个层次。</li>
</ul>
<h2 id="分布式应用"><a href="#分布式应用" class="headerlink" title="分布式应用"></a>分布式应用</h2><p><em>用来开发分布式、具有容错性应用程序的函数库和框架。</em></p>
<ul>
<li><a href="http://zookeeper.apache.org/" target="_blank" rel="noopener">Apache ZooKeeper</a>：使用分布式配置、同步和命名注册为大型分布式系统提供协调服务。</li>
<li><a href="http://storm.apache.org/" target="_blank" rel="noopener">Apache Storm</a>：分布式实时计算系统。提供与MapReduce作业类似的功能。</li>
<li><a href="http://akka.io/" target="_blank" rel="noopener">Akka</a>：构建高并发和分布式 JVM 应用程序的工具包。</li>
<li><a href="http://atomix.io/atomix/" target="_blank" rel="noopener">Atomix</a>：基于事件驱动的容错分布式协调框架。</li>
<li><a href="https://hazelcast.org/" target="_blank" rel="noopener">Hazelcast</a>：分布式、高可扩展性内存数据网格。</li>
<li><a href="https://github.com/Netflix/Hystrix" target="_blank" rel="noopener">Hystrix</a>：为分布式系统提供延迟和容错处理。</li>
<li><a href="http://www.jgroups.org/" target="_blank" rel="noopener">JGroups</a>：一组提供可靠消息传输的工具包，可用来创建集群，集群中的节点可互相发送消息。</li>
<li><a href="http://www.paralleluniverse.co/quasar/" target="_blank" rel="noopener">Quasar</a>：为JVM提供轻量级线程和Actor。</li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><em>简化数据库交互的工具。</em></p>
<ul>
<li><a href="https://hbase.apache.org/" target="_blank" rel="noopener">Apache HBase</a>：分布式NoSQL列数据库，类似谷歌公司BigTable。它是Apache软件基金会的Hadoop项目的一部分，运行于HDFS文件系统之上，为 Hadoop 提供类似于BigTable规模的服务。</li>
<li><a href="https://hive.apache.org/" target="_blank" rel="noopener">Apache Hive</a>：构建于hadoop之上的数据仓库，通过一种类SQL语言HiveQL为用户提供数据的归纳、查询和分析等功能。</li>
<li><a href="https://prestodb.io/" target="_blank" rel="noopener">Presto</a>：针对大数据的分布式SQL查询引擎。</li>
<li><a href="http://h2database.com/" target="_blank" rel="noopener">H2</a>：小型SQL数据库，以内存操作著称。</li>
<li><a href="https://flywaydb.org/" target="_blank" rel="noopener">Flyway</a>：使用Java API轻松完成数据库迁移。</li>
<li><a href="http://jdbi.org/" target="_blank" rel="noopener">JDBI</a>：便捷的JDBC抽象。</li>
<li><a href="http://www.jooq.org/" target="_blank" rel="noopener">jOOQ</a>：基于SQL schema生成类型安全代码。</li>
<li><a href="http://www.querydsl.com/" target="_blank" rel="noopener">Querydsl</a>：针对Java的类型安全统一查询。</li>
</ul>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p><em>用来部署应用程序的服务器。</em></p>
<ul>
<li><a href="http://tomcat.apache.org/" target="_blank" rel="noopener">Apache Tomcat</a>：针对Servlet和JSP的应用服务器，健壮性好且适用性强。</li>
<li><a href="http://tomee.apache.org/" target="_blank" rel="noopener">Apache TomEE</a>：Tomcat加Java EE。</li>
<li><a href="http://www.eclipse.org/jetty/" target="_blank" rel="noopener">Jetty</a>：轻量级、小巧的应用服务器，通常用作嵌入式Web容器。</li>
<li><a href="https://glassfish.java.net/" target="_blank" rel="noopener">GlassFish</a>：Java EE开源参考实现，由Oracle资助开发。</li>
<li><a href="http://www.wildfly.org/" target="_blank" rel="noopener">WildFly</a>：之前被称作JBoss，由Redhat开发，支持很多Java EE功能。</li>
</ul>
<h2 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h2><p><em>在客户端之间进行消息传递，确保协议独立性的工具。</em></p>
<ul>
<li><a href="http://kafka.apache.org/" target="_blank" rel="noopener">Apache Kafka</a>：高吞吐量分布式消息系统。</li>
<li><a href="http://activemq.apache.org/" target="_blank" rel="noopener">Apache ActiveMQ</a>：实现JMS的开源消息代理，可将同步通讯转为异步通讯。</li>
<li><a href="https://github.com/apache/incubator-rocketmq" target="_blank" rel="noopener">Apache RocketMQ</a>：阿里开源的一款高性能、高吞吐量的消息中间件。</li>
<li><a href="http://hornetq.jboss.org/" target="_blank" rel="noopener">JBoss HornetQ</a>：清晰、准确、模块化且方便嵌入的消息工具。</li>
<li><a href="https://github.com/zeromq/jeromq" target="_blank" rel="noopener">JeroMQ</a>：ZeroMQ的纯Java实现。</li>
</ul>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p><em>文档索引引擎，用于搜索和分析。</em></p>
<ul>
<li><a href="https://www.elastic.co/products/elasticsearch" target="_blank" rel="noopener">Elasticsearch</a>：一种分布式、支持REST风格的搜索和分析引擎。</li>
<li><a href="https://lucene.apache.org/" target="_blank" rel="noopener">Apache Lucene</a>：高性能、功能全面的跨平台文本搜索引擎库。</li>
<li><a href="http://lucene.apache.org/solr/" target="_blank" rel="noopener">Apache Solr</a>：采用Lucene搜索库为核心，提供全文索引和搜索开源企业平台。</li>
</ul>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p><em>网络编程函数库。</em></p>
<ul>
<li><a href="https://mina.apache.org/" target="_blank" rel="noopener">Apache MINA</a>：一个开发高性能和高可伸缩性网络应用程序的网络应用框架，提供了一个抽象的事件驱动的异步 API，可以使用 TCP/IP、UDP/IP、串口和虚拟机内部的管道等传输方式。</li>
<li><a href="http://netty.io/" target="_blank" rel="noopener">Netty</a>：构建高性能网络应用程序开发框架。</li>
<li><a href="http://hessian.caucho.com/" target="_blank" rel="noopener">Hessian</a>：一个轻量级的remoting onhttp工具，使用简单的方法提供了RMI的功能，相比WebService，Hessian更简单、快捷。</li>
<li><a href="https://github.com/javaee/grizzly" target="_blank" rel="noopener">Grizzly</a>：用于网络层的Grizzly NIO框架。</li>
<li><a href="http://www.grpc.io/" target="_blank" rel="noopener">gRPC</a>：基于protobuf和HTTP/2的RPC框架。</li>
<li><a href="https://square.github.io/okhttp/" target="_blank" rel="noopener">OkHttp</a>：一个Android和Java应用的HTTP+SPDY客户端。</li>
</ul>
<h2 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h2><p><em>用于分析网站内容的函数库。</em></p>
<ul>
<li><a href="http://nutch.apache.org/" target="_blank" rel="noopener">Apache Nutch</a>：可用于生产环境的高度可扩展、可伸缩的网络爬虫。</li>
<li><a href="https://github.com/yasserg/crawler4j" target="_blank" rel="noopener">Crawler4j</a>：简单的轻量级爬虫。</li>
<li><a href="https://jsoup.org/" target="_blank" rel="noopener">JSoup</a>：刮取、解析、操作和清理HTML。</li>
</ul>
<h2 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h2><p><em>与高性能计算有关的资源，包括集合以及很多具体功能的函数库。</em></p>
<ul>
<li><a href="https://lmax-exchange.github.io/disruptor/" target="_blank" rel="noopener">Disruptor</a>：线程间消息函数库。</li>
<li><a href="http://fastutil.di.unimi.it/" target="_blank" rel="noopener">fastutil</a>：快速紧凑的Java类型安全集合。</li>
<li><a href="https://github.com/eclipse/eclipse-collections" target="_blank" rel="noopener">Eclipse Collections</a>：受Smalltalk启发的集合框架。</li>
<li><a href="https://github.com/leventov/Koloboke" target="_blank" rel="noopener">Koloboke</a>：HashSet和HashMap。</li>
<li><a href="https://github.com/carrotsearch/hppc" target="_blank" rel="noopener">HPPC</a>：基本类型集合。</li>
<li><a href="http://javolution.org/" target="_blank" rel="noopener">Javolution</a>：针对实时嵌入式系统的函数库。</li>
<li><a href="http://trove.starlight-systems.com/" target="_blank" rel="noopener">Trove</a>：基本类型集合。</li>
</ul>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p><em>用于处理安全、认证、授权或会话管理的函数库。</em></p>
<ul>
<li><a href="http://shiro.apache.org/" target="_blank" rel="noopener">Apache Shiro</a>：执行认证、授权、加密和会话管理。</li>
<li><a href="http://projects.spring.io/spring-security/" target="_blank" rel="noopener">Spring Security</a>：专注认证、授权和多维度攻击防护框架。</li>
<li><a href="https://cryptomator.org/" target="_blank" rel="noopener">Cryptomator</a>：在云上进行客户端跨平台透明加密。</li>
<li><a href="http://www.keycloak.org/" target="_blank" rel="noopener">Keycloak</a>：为浏览器应用和RESTful Web Service提供SSO和IDM集成。</li>
<li><a href="http://picketlink.org/" target="_blank" rel="noopener">PicketLink</a>：一个针对Java应用进行安全和身份认证管理的大型项目，简化了安全和认证管理流程。</li>
</ul>
<h2 id="Web框架"><a href="#Web框架" class="headerlink" title="Web框架"></a>Web框架</h2><p><em>用于处理Web应用程序不同层次间通讯的框架。</em></p>
<ul>
<li><a href="http://projects.spring.io/spring-framework/" target="_blank" rel="noopener">Spring</a>：旨在简化Java EE的开发过程，提供依赖注入相关组件并支持面向切面编程。</li>
<li><a href="http://projects.spring.io/spring-boot/" target="_blank" rel="noopener">Spring Boot</a>：微框架，简化了Spring新程序的开发过程。</li>
<li><a href="https://github.com/gwtproject/gwt" target="_blank" rel="noopener">GWT</a>：GWT(Google Web Toolkit)，一组Web开发工具集，包含在客户端将Java代码转为JavaScript的编译器、XML解析器、RCP API、JUnit集成、国际化支持和GUI控件。</li>
<li><a href="https://www.primefaces.org/" target="_blank" rel="noopener">PrimeFaces</a>：JSF框架，提供免费版和带技术支持的商业版。</li>
<li><a href="http://tapestry.apache.org/" target="_blank" rel="noopener">Apache Tapestry</a>：基于组件的框架，使用Java创建动态的、健壮的、高度可扩展的Web应用程序。</li>
<li><a href="http://wicket.apache.org/" target="_blank" rel="noopener">Apache Wicket</a>：基于组件的Web应用框架，与Tapestry类似带有状态显示GUI。</li>
<li><a href="https://grails.org/" target="_blank" rel="noopener">Grails</a>：Groovy框架，旨在提供一个高效开发环境，使用约定而非配置，没有XML并支持混入(mixin)。</li>
<li><a href="https://playframework.com/" target="_blank" rel="noopener">Play</a>：基于 Akka 的一个轻量级、无状态、Web友好的架构。</li>
<li><a href="https://vaadin.com/home" target="_blank" rel="noopener">Vaadin</a>：基于GWT构建的事件驱动框架，使用服务端架构，客户端使用Ajax。</li>
<li><a href="http://www.ninjaframework.org/" target="_blank" rel="noopener">Ninja</a>：Java全栈Web开发框架，非常稳固、快速和高效。</li>
<li><a href="https://ratpack.io/" target="_blank" rel="noopener">Ratpack</a>：一组Java开发函数库，用于构建快速、高效、可扩展且测试完备的HTTP应用程序。</li>
</ul>
<h2 id="REST框架"><a href="#REST框架" class="headerlink" title="REST框架"></a>REST框架</h2><p><em>用来创建RESTful服务的框架。</em></p>
<ul>
<li><a href="https://jersey.java.net/" target="_blank" rel="noopener">Jersey</a>：JAX-RS参考实现。</li>
<li><a href="http://resteasy.jboss.org/" target="_blank" rel="noopener">RESTEasy</a>：经过JAX-RS规范完全认证的可移植实现。</li>
<li><a href="http://www.dropwizard.io/" target="_blank" rel="noopener">Dropwizard</a>：偏向于自己使用的Web框架，用来构建Web应用程序，使用了Jetty、Jackson、Jersey和Metrics。</li>
<li><a href="http://swagger.io/" target="_blank" rel="noopener">Swagger</a>：Swagger是一个规范且完整的框架，提供描述、生产、消费和可视化RESTful Web Service。</li>
<li><a href="https://square.github.io/retrofit/" target="_blank" rel="noopener">Retrofit</a>：一个Java类型安全的REST客户端。</li>
<li><a href="http://sparkjava.com/" target="_blank" rel="noopener">Spark</a>：受到Sinatra启发的Java REST框架。</li>
</ul>
<h2 id="ORM框架"><a href="#ORM框架" class="headerlink" title="ORM框架"></a>ORM框架</h2><p><em>处理对象持久化的API。</em></p>
<ul>
<li><a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">MyBatis</a>：支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。</li>
<li><a href="https://cayenne.apache.org/" target="_blank" rel="noopener">Apache Cayenne</a>：为数据访问提供简单、静态的API，还包括用于处理数据库映射、DB逆向工程的GUI映射工具。</li>
<li><a href="https://ebean-orm.github.io/" target="_blank" rel="noopener">Ebean</a>：支持快速数据访问和编码的ORM框架。</li>
<li><a href="https://www.eclipse.org/eclipselink/" target="_blank" rel="noopener">EclipseLink</a>：支持许多持久化标准，JPA、JAXB、JCA和SDO。</li>
<li><a href="http://hibernate.org/orm/" target="_blank" rel="noopener">Hibernate</a>：广泛使用的持久化框架，其技术社区非常活跃。</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><em>测试内容从对象到接口，涵盖性能测试和基准测试工具。</em></p>
<ul>
<li><a href="https://visualvm.github.io/" target="_blank" rel="noopener">VisualVM</a>：提供可视化方式查看运行中的应用程序信息。</li>
<li><a href="http://junit.org/" target="_blank" rel="noopener">JUnit</a>：通用测试框架。</li>
<li><a href="http://jmeter.apache.org/" target="_blank" rel="noopener">Apache JMeter</a>：功能性测试和性能评测。</li>
<li><a href="http://arquillian.org/" target="_blank" rel="noopener">Arquillian</a>：集成测试和功能行测试平台，集成Java EE容器。</li>
<li><a href="https://joel-costigliola.github.io/assertj/" target="_blank" rel="noopener">AssertJ</a>：支持流式断言提高测试的可读性。</li>
<li><a href="http://openjdk.java.net/projects/code-tools/jmh/" target="_blank" rel="noopener">JMH</a>：JVM微基准测试工具。</li>
<li><a href="https://github.com/mockito/mockito" target="_blank" rel="noopener">Mockito</a>：在自动化单元测试中创建测试对象，为TDD或BDD提供支持。</li>
<li><a href="https://github.com/SeleniumHQ/selenium" target="_blank" rel="noopener">Selenium</a>：为Web应用程序提供可移植软件测试框架。</li>
<li><a href="http://selenide.org/" target="_blank" rel="noopener">Selenide</a>：为Selenium提供精准的周边API，用来编写稳定且可读的UI测试。</li>
<li><a href="http://testng.org/doc/" target="_blank" rel="noopener">TestNG</a>：测试框架。</li>
</ul>
<h2 id="模版引擎"><a href="#模版引擎" class="headerlink" title="模版引擎"></a>模版引擎</h2><p><em>对模板中表达式进行替换的工具。</em></p>
<ul>
<li><a href="http://www.thymeleaf.org/" target="_blank" rel="noopener">Thymeleaf</a>：新一代模板引擎，支持XML，可完全取代JSP。</li>
<li><a href="http://velocity.apache.org/" target="_blank" rel="noopener">Apache Velocity</a>：提供HTML页面模板、Email模板和通用开源代码生成器模板。</li>
<li><a href="http://freemarker.org/" target="_blank" rel="noopener">FreeMarker</a>：通用模板引擎，不需要任何重量级或自己使用的依赖关系。</li>
<li><a href="http://jtwig.org/" target="_blank" rel="noopener">Jtwig</a>：模块化、可配置和经过充分测试的模板引擎。</li>
<li><a href="https://jknack.github.io/handlebars.java/" target="_blank" rel="noopener">Handlebars.java</a>：使用Java编写的模板引擎，逻辑简单，支持语义扩展（semantic Mustache）。</li>
</ul>
<h2 id="开发库"><a href="#开发库" class="headerlink" title="开发库"></a>开发库</h2><p><em>从基础层次上改进开发流程。</em></p>
<ul>
<li><a href="https://zeroturnaround.com/software/jrebel/" target="_blank" rel="noopener">JRebel</a>：商用软件，无需重新部署可即时重新加载代码及配置。</li>
<li><a href="https://eclipse.org/aspectj/" target="_blank" rel="noopener">AspectJ</a>：面向切面编程扩展，与程序无缝连接。</li>
<li><a href="https://github.com/google/auto" target="_blank" rel="noopener">Auto</a>：源代码生成器集合。</li>
<li><a href="https://projectlombok.org/" target="_blank" rel="noopener">Lombok</a>：代码生成器，旨在减少Java冗余代码。</li>
<li><a href="http://ssw.jku.at/dcevm/" target="_blank" rel="noopener">DCEVM</a>：通过修改JVM在运行时可无限次重定义已加载的类。</li>
<li><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">RxJava</a>：使用JVM中可观察序列，创建异步、基于事件应用程序的函数库。</li>
<li><a href="http://vertx.io/" target="_blank" rel="noopener">vert.x</a>：JVM多语言事件驱动应用框架。</li>
<li><a href="https://github.com/spring-projects/spring-loaded" target="_blank" rel="noopener">Spring Loaded</a>：另一个JVM类重载代理。</li>
</ul>
<h2 id="JVM和JDK"><a href="#JVM和JDK" class="headerlink" title="JVM和JDK"></a>JVM和JDK</h2><p><em>目前的JVM、JDK实现。</em></p>
<ul>
<li><a href="http://openjdk.java.net/" target="_blank" rel="noopener">OpenJDK</a>：JDK的开源版本。</li>
<li><a href="https://github.com/ReadyTalk/avian" target="_blank" rel="noopener">Avian</a>：一个轻量级虚拟机和类库。</li>
<li><a href="https://github.com/codenameone/CodenameOne/tree/master/vm" target="_blank" rel="noopener">ParparVM</a>：在Java中构建本机iOS应用程序的安全、简单、易用的方法。</li>
<li><a href="http://www.azul.com/downloads/zulu/" target="_blank" rel="noopener">Zulu OpenJDK</a>：经过认证的与Java SE标准完全兼容JDK开源版本。</li>
</ul>
<h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><p><em>创建分析器、解释器和编译器的框架。</em></p>
<ul>
<li><a href="http://www.antlr.org/" target="_blank" rel="noopener">ANTLR</a>：一个基于Java 开发的功能强大的语言识别工具，Antlr 以其简介的语法和高速的运行效率在这类工具中出类拔萃。</li>
<li><a href="http://jflex.de/" target="_blank" rel="noopener">JFlex</a>：Java编写的Java词法分析器。</li>
</ul>
<h2 id="字节码操作"><a href="#字节码操作" class="headerlink" title="字节码操作"></a>字节码操作</h2><p><em>操作Java字节码的函数库。</em></p>
<ul>
<li><a href="http://asm.ow2.org/" target="_blank" rel="noopener">ASM</a>：一个通用的Java字节码操作和分析框架。</li>
<li><a href="https://jboss-javassist.github.io/javassist/" target="_blank" rel="noopener">Javassist</a>：用于在Java中编辑字节码的类库。</li>
<li><a href="https://github.com/cglib/cglib" target="_blank" rel="noopener">CGlib</a>：一个强大的、高性能和高质量的代码生成库，用于在运行时扩展JAVA类并实现接口。</li>
<li><a href="http://bytebuddy.net/" target="_blank" rel="noopener">Byte Buddy</a>：一个代码生成和操作库，用于在Java应用程序运行时创建和修改Java类而无需编译器的帮助。</li>
</ul>
<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p><em>实现控制反转的函数库。</em></p>
<ul>
<li><a href="https://hk2.java.net" target="_blank" rel="noopener">HK2</a>：轻量级动态依赖注入框架。</li>
<li><a href="https://github.com/google/dagger" target="_blank" rel="noopener">Dagger2</a>：编译期的注入框架，没有使用反射，主要用于Android开发。</li>
<li><a href="https://github.com/google/guice" target="_blank" rel="noopener">Guice</a>：轻量级注入框架，功能强大可与Dagger媲美。</li>
</ul>
<h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><p><em>通用工具类函数库。</em></p>
<ul>
<li><a href="https://github.com/google/guava" target="_blank" rel="noopener">Guava</a>：集合、缓存、支持基本类型、并发函数库、通用注解、字符串处理、I/O等。</li>
<li><a href="http://commons.apache.org/" target="_blank" rel="noopener">Apache Commons</a>：提供各种用途的函数，比如配置、验证、集合、文件上传或XML处理等。</li>
<li><a href="http://www.javatuples.org/" target="_blank" rel="noopener">javatuples</a>：正如名字表示的那样，提供tuple支持，尽管目前tuple的概念还有留有争议。</li>
</ul>
<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p><em>记录应用程序的日志函数库。</em></p>
<ul>
<li><a href="https://logback.qos.ch/" target="_blank" rel="noopener">Logback</a>：Log4j原班人马作品，被证明是一个强健的日志函数库，通过Groovy提供了很多有意思的配置选项。</li>
<li><a href="https://www.slf4j.org/" target="_blank" rel="noopener">SLF4J</a>：日志抽象层，需要与某个具体日志框架配合使用。</li>
<li><a href="https://logging.apache.org/log4j/2.x/" target="_blank" rel="noopener">Apache Log4j 2</a>：Log4j的升级版，相比Log4j 1.x 版本有了很大的性能提升，在提供了Logback所能提供的功能的同时还解决了Logback的架构下的固有问题。</li>
<li><a href="https://www.elastic.co/products/kibana" target="_blank" rel="noopener">Kibana</a>：一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索引中的数据。</li>
<li><a href="https://www.elastic.co/products/logstash" target="_blank" rel="noopener">Logstash</a>：日志文件管理工具。</li>
</ul>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p><em>简化JSON处理的函数库。</em></p>
<ul>
<li><a href="https://github.com/google/gson" target="_blank" rel="noopener">Gson</a>：将Java对象序列化为JSON及反向操作，使用时提供了很好的性能。</li>
<li><a href="https://github.com/FasterXML/jackson" target="_blank" rel="noopener">Jackson</a>：与GSON类似，但如果需要频繁初始化Jackson库会带来性能问题。</li>
</ul>
<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p><em>用来高效处理序列化的函数库。</em></p>
<ul>
<li><a href="https://github.com/msgpack/msgpack-java" target="_blank" rel="noopener">MessagePack</a>：一种高效的二进制序列化格式。</li>
<li><a href="https://github.com/google/flatbuffers" target="_blank" rel="noopener">FlatBuffers</a>：序列化函数库，高效利用内存，无需解包和解析即可高效访问序列化数据。</li>
<li><a href="https://github.com/EsotericSoftware/kryo" target="_blank" rel="noopener">Kryo</a>：快速和高效的对象图形序列化框架。</li>
</ul>
<h2 id="文档处理"><a href="#文档处理" class="headerlink" title="文档处理"></a>文档处理</h2><p><em>用来处理Office格式文档的函数库。</em></p>
<ul>
<li><a href="http://poi.apache.org/" target="_blank" rel="noopener">Apache POI</a>：支持OOXML(XLSX、DOCX、PPTX)以及 OLE2(XLS, DOC or PPT)格式的文档。</li>
<li><a href="https://github.com/documents4j/documents4j" target="_blank" rel="noopener">documents4j</a>：使用第三方转换器进行文档格式转换的API。</li>
<li><a href="https://www.docx4java.org/trac/docx4j" target="_blank" rel="noopener">docx4j</a>：创建和操作Microsoft Open XML(Word docx，Powerpoint pptx和Excel xlsx)文件的Java库。</li>
</ul>
<h2 id="PDF处理"><a href="#PDF处理" class="headerlink" title="PDF处理"></a>PDF处理</h2><p><em>用来帮助创建PDF文件的资源。</em></p>
<ul>
<li><a href="http://itextpdf.com/" target="_blank" rel="noopener">iText</a>：一个易于使用的PDF函数库，用来编程创建PDF文件，注意，用于商业用途时需要许可证。</li>
<li><a href="http://community.jaspersoft.com/project/jasperreports-library" target="_blank" rel="noopener">JasperReports</a>：一个复杂的报表引擎。</li>
<li><a href="http://dynamicreports.org/" target="_blank" rel="noopener">DynamicReports</a>：JasperReports的精简版。</li>
<li><a href="https://xmlgraphics.apache.org/fop/" target="_blank" rel="noopener">Apache FOP</a>：从XSL-FO创建PDF。</li>
<li><a href="https://pdfbox.apache.org/" target="_blank" rel="noopener">Apache PDFBox</a>：用来创建和操作PDF的工具集。</li>
</ul>
<h2 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h2><p><em>用来帮助创建、评估或操作图形的函数库。</em></p>
<ul>
<li><a href="https://github.com/square/picasso" target="_blank" rel="noopener">Picasso</a>：Android下载图像和图像缓存函数库。</li>
<li><a href="https://github.com/zxing/zxing" target="_blank" rel="noopener">ZXing</a>：多种格式的一维、二维条形码处理函数库。</li>
</ul>
<h2 id="游戏开发"><a href="#游戏开发" class="headerlink" title="游戏开发"></a>游戏开发</h2><p><em>游戏开发框架。</em></p>
<ul>
<li><a href="http://jmonkeyengine.org/" target="_blank" rel="noopener">jMonkeyEngine</a>：支持现代3D开发的游戏引擎。</li>
<li><a href="https://libgdx.badlogicgames.com/" target="_blank" rel="noopener">libGDX</a>：全面的跨平台高级开发框架。</li>
<li><a href="https://www.lwjgl.org/" target="_blank" rel="noopener">LWJGL</a>：抽象了OpenGL、CL、AL等函数库的健壮框架。</li>
</ul>
<h2 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h2><p><em>用来创建现代图形用户界面的函数库。</em></p>
<ul>
<li><a href="http://www.eclipse.org/swt/" target="_blank" rel="noopener">SWT</a>：Java开源小部件工具包。</li>
<li><a href="http://www.oracle.com/technetwork/java/javase/overview/javafx-overview-2158620.html" target="_blank" rel="noopener">JavaFX</a>：Swing的继承者。</li>
<li><a href="http://gluonhq.com/products/scene-builder/" target="_blank" rel="noopener">Scene Builder</a>：JavaFX虚拟布局工具。</li>
</ul>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p><em>使用本机格式分发Java应用程序的工具。</em></p>
<ul>
<li><a href="http://launch4j.sourceforge.net/" target="_blank" rel="noopener">Launch4j</a>：将JAR包装为小巧的Windows可执行文件。</li>
<li><a href="https://github.com/libgdx/packr/" target="_blank" rel="noopener">packr</a>：将程序JAR、资源和JVM打包成Windows、Linux和Mac OS X的本机文件。</li>
<li><a href="https://bintray.com/" target="_blank" rel="noopener">Bintray</a>：对二进制发布进行版本控制，可与Maven或Gradle配合使用。</li>
<li><a href="http://izpack.org/" target="_blank" rel="noopener">IzPack</a>：为跨平台部署建立授权工具。</li>
</ul>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p><em>其它资源。</em></p>
<ul>
<li><a href="https://github.com/iluwatar/java-design-patterns" target="_blank" rel="noopener">Design Patterns</a>：实现并解释了最常见的设计模式。</li>
<li><a href="https://github.com/google/jimfs" target="_blank" rel="noopener">Jimfs</a>：内存文件系统。</li>
<li><a href="http://lightadmin.org/" target="_blank" rel="noopener">LightAdmin</a>：可插入式CRUD UI函数库，可用于快速应用开发。</li>
<li><a href="http://openrefine.org/" target="_blank" rel="noopener">OpenRefine</a>：用来处理混乱数据的工具，包括清理、转换、使用Web Service进行扩展并将其关联到数据库。</li>
<li><a href="https://robovm.com/" target="_blank" rel="noopener">RoboVM</a>：Java编写原生iOS应用。</li>
</ul>
<h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><p><em>值得关注的网站。</em></p>
<ul>
<li><a href="https://www.tutorialspoint.com/index.htm" target="_blank" rel="noopener">TutorialsPoint</a></li>
<li><a href="http://tutorials.jenkov.com/" target="_blank" rel="noopener">Jenkov.com</a></li>
<li><a href="http://java.net/" target="_blank" rel="noopener">Java.net</a></li>
<li><a href="https://www.infoq.com/" target="_blank" rel="noopener">InfoQ</a></li>
<li><a href="http://algs4.cs.princeton.edu/code/" target="_blank" rel="noopener">Java Algorithms and Clients</a></li>
<li><a href="https://dzone.com/java-jdk-development-tutorials-tools-news" target="_blank" rel="noopener">Javalobby</a></li>
<li><a href="http://www.javaworld.com/" target="_blank" rel="noopener">JavaWorld</a></li>
<li><a href="https://zeroturnaround.com/rebellabs/" target="_blank" rel="noopener">RebelLabs</a></li>
<li><a href="http://www.theserverside.com/" target="_blank" rel="noopener">TheServerSide.com</a></li>
<li><a href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="noopener">TIOBE</a></li>
</ul>
<blockquote>
<p>文章翻译自 <a href="https://github.com/akullpp/awesome-java" target="_blank" rel="noopener">akullpp Github</a></p>
</blockquote>
]]></content>
      <categories>
        <category>javaee</category>
      </categories>
      <tags>
        <tag>awesome</tag>
      </tags>
  </entry>
  <entry>
    <title>Hessian</title>
    <url>/2017/07/23/javaee/hessian/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="http://hessian.caucho.com/" target="_blank" rel="noopener">Hessian</a>是一个由Caucho公司开发的轻量级二进制RPC协议，使用简单的方法提供了RMI的功能。相比WebService，Hessian更简单、快捷。Hessian采用的是二进制RPC协议，所以它很适合于发送二进制数据。</p>
<p>Hessian可通过Servlet提供远程服务，需要将url请求映射到Hessian服务，也可与SpringMVC框架整合，通过它的 DispatcherServlet可将匹配的url请求转发到Hessian服务。Hessian的RPC功能完全使用动态代理来实现的，建议采用面向接口编程，通过接口暴露Hessian服务。类似的框架有<a href="http://dubbo.io/" target="_blank" rel="noopener">DUBBO</a>、<a href="https://www.sofastack.tech/" target="_blank" rel="noopener">SOFA</a>。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol>
<li>控制台警告<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">警告: Hessian/Burlap: &apos;java.lang.Enum&apos; is an unknown class...</span><br><span class="line">java.lang.RuntimeException: Class java.lang.Enum is not an enum.</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>解决办法：把两个项目与Hessian相关类的包名保持一致</p>
</blockquote>
<ol start="2">
<li><p>Hessian上传</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UploadService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意：使用Hessian时需要把inputStream参数放在最后</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">upload</span><span class="params">(String path, InputStream inputStream)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Hessian下载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DownloadService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">InputStream <span class="title">download</span><span class="params">(String filename)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>下载时如果遇到以下问题，则可能是由Hessian的一个<a href="http://bugs.caucho.com/view.php?id=3655" target="_blank" rel="noopener">Bug</a>导致的<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.io.IOException: stream is closed</span><br><span class="line">	at sun.net.www.http.ChunkedInputStream.ensureOpen(ChunkedInputStream.java:174)</span><br><span class="line">	at sun.net.www.http.ChunkedInputStream.read(ChunkedInputStream.java:673)</span><br><span class="line">	at java.io.FilterInputStream.read(FilterInputStream.java:133)</span><br><span class="line">	at sun.net.www.protocol.http.HttpURLConnection$HttpInputStream.read(HttpURLConnection.java:3066)</span><br><span class="line">	at com.caucho.hessian.io.Hessian2Input.readBuffer(Hessian2Input.java:2783)</span><br><span class="line">	at com.caucho.hessian.io.Hessian2Input.read(Hessian2Input.java:2729)</span><br><span class="line">	at com.caucho.hessian.io.Hessian2Input$ReadInputStream.read(Hessian2Input.java:2917)</span><br><span class="line">	at java.io.InputStream.read(InputStream.java:101)</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>解决办法：覆盖Hessian包中的HessianProxy类(不建议直接修改源代码后重新打包)，添加如下代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object value = in.readReply(method.getReturnType());</span><br><span class="line"><span class="comment">// 以下是需要添加的Patch Code</span></span><br><span class="line"><span class="keyword">if</span> (value <span class="keyword">instanceof</span> InputStream) &#123;</span><br><span class="line">    value = <span class="keyword">new</span> ResultInputStream(conn, is, in, (InputStream) value);</span><br><span class="line">    is = <span class="keyword">null</span>;</span><br><span class="line">    conn = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>此外，还需要在项目的pom.xml中添加如下配置：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>unpack<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>unpack<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactItems</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactItem</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hessian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hessian.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">overWrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overWrite</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/classes<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span>**/HessianProxy.class<span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">artifactItem</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">artifactItems</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">packagingExcludes</span>&gt;</span>WEB-INF/lib/hessian-$&#123;hessian.version&#125;.jar<span class="tag">&lt;/<span class="name">packagingExcludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
      <categories>
        <category>javaee</category>
      </categories>
      <tags>
        <tag>hessian</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/2017/05/29/javaee/mybatis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="持久层技术"><a href="#持久层技术" class="headerlink" title="持久层技术"></a>持久层技术</h2><ul>
<li>Jdbc: 手动封装结果集，SQL语句硬编码在Java代码中</li>
<li>Jdbi: 对Jdbc更高层次的抽象，使得数据库操作更便捷、高效，和 MyBatis 非常类似</li>
<li>MyBatis: 自动封装结果集，SQL语句写在XML配置文件中(适用于对性能要求高而对数据库可移植性无特定要求)</li>
<li>JPA: 不用编写SQL语句，可实现跨数据库(适用于对性能要求不高而对数据库可移植性有一定要求) </li>
</ul>
<h2 id="Jdbc"><a href="#Jdbc" class="headerlink" title="Jdbc"></a>Jdbc</h2><h3 id="Jdbc编程"><a href="#Jdbc编程" class="headerlink" title="Jdbc编程"></a>Jdbc编程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java SPI(Service Provider Interface)</span></span><br><span class="line"><span class="comment"> * SPI是JDK内置的一种服务提供发现机制.</span></span><br><span class="line"><span class="comment"> * 当服务的提供者提供了一种接口的实现之后, 需要在classpath下的META-INF/services/目录里创建一个以服务接口命名的文件, 这个文件里的内容就是这个接口的具体的实现类.</span></span><br><span class="line"><span class="comment"> * 当其他的程序需要这个服务的时候, 就可以通过查找这个jar包(一般都是以jar包做依赖)的META-INF/services/中的配置文件, 配置文件中有接口的具体实现类名,</span></span><br><span class="line"><span class="comment"> * 可以根据这个类名进行加载实例化, 然后就可以使用该服务了, JDK中查找服务实现的工具类是: &#123;<span class="doctag">@link</span> java.util.ServiceLoader&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 双亲委派机制: Java类通过Classloader加载, Classloader之间有继承关系, AppClassLoader继承ExtClassloader, ExtClassloader继承BootstrapClassloader.</span></span><br><span class="line"><span class="comment"> * 在类加载时, 子加载器会调用父加载器来加载类, 如果父加载器加载失败, 才会交给子加载器来加载; 如果子加载器也加载失败, 那么就报异常.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 那么SPI是如何双亲委派机制?</span></span><br><span class="line"><span class="comment"> * 以Jdbc加载驱动为例: SPI实现方式为, 通过ServiceLoader.load(Driver.class)方法, 去各自实现Driver接口的lib下的META-INF/services/java.sql.Driver文件里找到实现类的名字,</span></span><br><span class="line"><span class="comment"> * 通过Thread.currentThread().getContextClassLoader()类加载器加载实现类并返回实例.</span></span><br><span class="line"><span class="comment"> * 如果不用Thread.currentThread().getContextClassLoader()加载器加载, 整个流程会怎么样?</span></span><br><span class="line"><span class="comment"> * (1) 从META-INF/services/java.sql.Driver文件得到实现类名字com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"> * (2) Class.forName("com.mysql.jdbc.Driver")来加载实现类</span></span><br><span class="line"><span class="comment"> * (3) Class.forName(className)默认使用当前类的ClassLoader, JDBC是在DriverManager类里调用Driver的, 当前类也就是DriverManager, 它的加载器是BootstrapClassLoader.</span></span><br><span class="line"><span class="comment"> * (4) 用BootstrapClassLoader去加载非rt.jar包里的类com.mysql.jdbc.Driver就会找不到</span></span><br><span class="line"><span class="comment"> * (5) 要加载com.mysql.jdbc.Driver需要用到AppClassLoader或其他自定义ClassLoader</span></span><br><span class="line"><span class="comment"> * (6) 最终矛盾出现在: 要在BootstrapClassLoader加载的类里调用AppClassLoader去加载实现类</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 如何在父加载器加载的类中去调用子加载器去加载类?</span></span><br><span class="line"><span class="comment"> * JDK提供了两种方式: Thread.currentThread().getContextClassLoader()和ClassLoader.getSystemClassLoader(), 一般都指向AppClassLoader, 它们能加载classpath中的类.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">            InputStream in = classLoader.getResourceAsStream(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">            Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">            prop.load(in);</span><br><span class="line">            url = prop.getProperty(<span class="string">"jdbc.url"</span>);</span><br><span class="line">            username = prop.getProperty(<span class="string">"jdbc.username"</span>);</span><br><span class="line">            password = prop.getProperty(<span class="string">"jdbc.password"</span>);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * classLoader.loadClass(className): 仅加载类不执行类初始化</span></span><br><span class="line"><span class="comment">             * class.forName(className): 加载指定类并执行类初始化(类初始化其实就是给static变量赋予用户指定的值以及执行静态代码块)</span></span><br><span class="line"><span class="comment">             * &lt;code&gt;</span></span><br><span class="line"><span class="comment">             * static &#123;</span></span><br><span class="line"><span class="comment">             *   try &#123;</span></span><br><span class="line"><span class="comment">             *     java.sql.DriverManager.registerDriver(new com.mysql.jdbc.Driver());</span></span><br><span class="line"><span class="comment">             *   &#125; catch (SQLException E) &#123;</span></span><br><span class="line"><span class="comment">             *     throw new RuntimeException("Can't register driver!");</span></span><br><span class="line"><span class="comment">             *   &#125;</span></span><br><span class="line"><span class="comment">             * &#125;</span></span><br><span class="line"><span class="comment">             * &lt;/code&gt;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Class.forName(prop.getProperty(<span class="string">"jdbc.driver"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="comment">// 此处不能往为抛(要确保后面的资源也能一并释放掉)</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"SELECT id, code, name, pass FROM sys_user WHERE id = ?"</span>;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            pstmt = conn.prepareStatement(sql);</span><br><span class="line">            pstmt.setLong(<span class="number">1</span>, <span class="number">101L</span>);</span><br><span class="line">            rs = pstmt.executeQuery();</span><br><span class="line">            List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                User user = <span class="keyword">new</span> User();</span><br><span class="line">                user.setId(rs.getLong(<span class="string">"id"</span>));</span><br><span class="line">                user.setCode(rs.getString(<span class="string">"code"</span>));</span><br><span class="line">                user.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">                user.setPass(rs.getString(<span class="string">"pass"</span>));</span><br><span class="line">                list.add(user);</span><br><span class="line">            &#125;</span><br><span class="line">            Assert.assertTrue(list.size() == <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(rs);</span><br><span class="line">            JdbcUtils.close(pstmt);</span><br><span class="line">            JdbcUtils.close(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"DELETE FROM sys_user WHERE id = ?"</span>;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            conn.setAutoCommit(Boolean.FALSE);</span><br><span class="line">            pstmt = conn.prepareStatement(sql);</span><br><span class="line">            pstmt.setLong(<span class="number">1</span>, <span class="number">105L</span>);</span><br><span class="line">            <span class="keyword">int</span> row = pstmt.executeUpdate();</span><br><span class="line">            Assert.assertTrue(row == <span class="number">1</span>);</span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.rollback();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(pstmt);</span><br><span class="line">            JdbcUtils.close(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Jdbc编程的问题"><a href="#Jdbc编程的问题" class="headerlink" title="Jdbc编程的问题"></a>Jdbc编程的问题</h3><ul>
<li>数据库连接：使用时就创建，不使用则立即释放，对数据库进行频繁连接的开启和关闭，造成数据库资源的浪费，影响数据库性能。<br>设想解决方案：使用数据库连接池管理数据库连接。  </li>
<li>SQL语句：SQL语句硬编码在Java代码中，不利于系统的维护。<br>设想解决方案：将SQL语句编写在XML配置文件中。  </li>
<li>输入参数：SQL语句的输入参数硬编码在Java代码中，不利于系统的维护。<br>设想解决方案：将SQL语句的输入参数配置在XML文件中。  </li>
<li>输出结果：遍历查询结果集数据时，存在硬编码，不利于系统的维护。<br>设想解决方案：将查询的结果集自动映射成Java对象。  </li>
</ul>
<h2 id="MyBatis配置文件"><a href="#MyBatis配置文件" class="headerlink" title="MyBatis配置文件"></a>MyBatis配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 全局设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启延迟加载 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启二级缓存 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 别名设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内建的常见类型别名 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="_byte" type="byte"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="_long" type="long"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="_short" type="short"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="_int" type="int"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="_integer" type="int"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="_double" type="double"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="_float" type="float"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="_boolean" type="boolean"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="string" type="String"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="byte" type="Byte"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="long" type="Long"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="short" type="Short"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="int" type="Integer"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="integer" type="Integer"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="double" type="Double"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="float" type="Float"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="boolean" type="Boolean"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="date" type="Date"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="decimal" type="BigDecimal"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="bigdecimal" type="BigDecimal"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="object" type="Object"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="map" type="Map"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="hashmap" type="HashMap"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="list" type="List"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="arraylist" type="ArrayList"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="collection" type="Collection"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="iterator" type="Iterator"/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- MyBatis自动扫描所指定包中的类并自动创建别名(别名就是类名且大小写均可) --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;package name="org.mybatis.api.model"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用JDBC事务管理(由MyBatis管理) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用数据库连接池(由MyBatis管理) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource="org/mybatis/core/mapper/UserMapper.xml"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper代理开发(当映射文件和Mapper接口在同级目录下时，可让MyBatis自动扫描指定包下的映射文件) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"org.mybatis.core.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="DAO开发的两种方式"><a href="#DAO开发的两种方式" class="headerlink" title="DAO开发的两种方式"></a>DAO开发的两种方式</h2><h3 id="原始DAO开发"><a href="#原始DAO开发" class="headerlink" title="原始DAO开发"></a>原始DAO开发</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 由于SqlSession不是线程安全的，所以不可以将SqlSession定义为成员变量</span></span><br><span class="line">        SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">            <span class="keyword">int</span> row = sqlSession.insert(<span class="string">"user.insert"</span>, user);</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            <span class="keyword">return</span> row;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sqlSession.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>原始DAO开发的问题：(1)DAO接口实现类方法中存在大量模板方法：(2)调用sqlSession方法时statement的id存在硬编码。</em></p>
<h3 id="Mapper代理开发"><a href="#Mapper代理开发" class="headerlink" title="Mapper代理开发"></a>Mapper代理开发</h3><p>Mapper接口遵循以下开发规范，MyBatis就可以自动生成Mapper接口实现类的代理对象，开发人员无需自己编写接口实现类：  </p>
<ul>
<li>映射文件Mapper.xml中的namespace为Mapper接口的地址</li>
<li>映射文件Mapper.xml中statement的id与Mapper接口中的方法名一致</li>
<li>映射文件Mapper.xml中statement的parameterType所指定的输入参数类型与Mapper接口中方法参数的类型一致</li>
<li>映射文件Mapper.xml中statement的resultType所指定的输出参数类型与Mapper接口中方法返回值的类型一致</li>
</ul>
<h4 id="mybatis-config-xml配置文件"><a href="#mybatis-config-xml配置文件" class="headerlink" title="mybatis-config.xml配置文件"></a><a href="#MyBatis配置文件">mybatis-config.xml配置文件</a></h4><h4 id="Mapper接口"><a href="#Mapper接口" class="headerlink" title="Mapper接口"></a>Mapper接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mybatis.core.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.api.model.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.api.model.UserExample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(User record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(User record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(User record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">(User record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">selectByPrimaryKey</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectByExample</span><span class="params">(UserExample example)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Mapper映射文件"><a href="#Mapper映射文件" class="headerlink" title="Mapper映射文件"></a>Mapper映射文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.mybatis.core.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"org.mybatis.api.model.User"</span>&gt;</span></span><br><span class="line">        INSERT INTO sys_user (code, name, pass, salt, status)</span><br><span class="line">        VALUES (</span><br><span class="line">            #&#123;code,jdbcType=VARCHAR&#125;,</span><br><span class="line">            #&#123;name,jdbcType=VARCHAR&#125;,</span><br><span class="line">            #&#123;pass,jdbcType=VARCHAR&#125;,</span><br><span class="line">            #&#123;salt,jdbcType=VARCHAR&#125;,</span><br><span class="line">            #&#123;status,jdbcType=CHAR&#125;</span><br><span class="line">        )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="输入映射"><a href="#输入映射" class="headerlink" title="输入映射"></a>输入映射</h2><ul>
<li>${}表示拼接符号，使用字符串拼接，直接参与sql编译，从而不能避免注入攻击。</li>
<li>#{}表示占位符，使用PreparedStatement，sql语句会预编译在数据库系统中，不仅提高了安全性，还提高了执行效率。</li>
<li>如果输入的参数是基本数据类型，那么#{}中用于接收输入参数的变量名称可以任意。</li>
</ul>
<p>问题：为什么使用PreparedStatement就能防止SQL注入？<br>原因：SQL语句在程序运行前已经进行了预编译，在程序运行时第一次操作数据库之前，SQL语句已经被数据库分析、编译和优化，对应的执行计划也会缓存下来并允许数据库以参数化的形式进行查询，当运行时动态地把参数传给PreparedStatement时，即使参数里有敏感字符(如’ OR 1=1’)，数据库也会把它作为参数字段的属性值来处理而不会作为一个SQL指令，这样就有效地防止了SQL注入。</p>
<h2 id="输出映射"><a href="#输出映射" class="headerlink" title="输出映射"></a>输出映射</h2><p><em>使用resultType进行输出映射时，只有查询出来的列名和映射的POJO属性名一致时才能映射成功；而如果查询的列名和映射的POJO属性名不一致，则可通过resultMap来设置列名和属性名之间的对应关系来完成映射。</em></p>
<h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p><em>MyBatis的强大特性之一便是它的动态SQL。如果你有使用JDBC或其他类似框架的经验，你就能体会到根据不同条件拼接SQL语句有多么痛苦。</em></p>
<h2 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h2><ul>
<li>缓存在查询时候生效，一般也需要在新增、修改或删除时更新</li>
<li>Mybatis支持二级缓存机制，对应到不同的executor实现，BaseExecutor(普通的执行器, 包含一级缓存)，CachingExecutor(二级缓存)</li>
</ul>
<blockquote>
<p>默认情况下，SELECT是使用缓存的，而INSERT/UPDATE/DELETE是不使用缓存的。</p>
</blockquote>
<h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><ul>
<li>Mybatis默认是启用一级缓存的，无需对框架进行任何设置。  </li>
<li>SqlSession是线程不安全的，所以在开发中我们一般将其与线程进行绑定或者将其声明在方法内部，目的是让多线程不共享SqlSession。SqlSessionTemplate就是将SqlSession和线程进行绑定，从而保证其线程安全。  </li>
<li>Mybatis的一级缓存生效的范围是SqlSession，是为了在SqlSession没有关闭时，业务需要重复查询相同数据使用的。一旦SqlSession关闭，则由这个SqlSession缓存的数据将会被清空。</li>
<li>如果SqlSession执行了commit(insert、delete、update)操作，则会清空SqlSession中的一级缓存，以保证缓存中保存的是最新信息，避免脏读。  </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrimaryCache1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            log.info(<span class="string">"&#123;&#125;"</span>, userMapper.selectByPrimaryKey(<span class="number">101L</span>)); <span class="comment">// 发出SQL语句</span></span><br><span class="line">            log.info(<span class="string">"&#123;&#125;"</span>, userMapper.selectByPrimaryKey(<span class="number">101L</span>)); <span class="comment">// 不发出SQL语句</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrimaryCache2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            log.info(<span class="string">"&#123;&#125;"</span>, userMapper.selectByPrimaryKey(<span class="number">101L</span>)); <span class="comment">// 发出SQL语句</span></span><br><span class="line">            sqlSession.commit();                                    <span class="comment">// 清空缓存</span></span><br><span class="line">            log.info(<span class="string">"&#123;&#125;"</span>, userMapper.selectByPrimaryKey(<span class="number">101L</span>)); <span class="comment">// 发出SQL语句</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> PerpetualCache localCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ErrorContext.instance().resource(ms.getResource()).activity(<span class="string">"executing an update"</span>).object(ms.getId());</span><br><span class="line">        <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"Executor was closed."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        clearLocalCache();</span><br><span class="line">        <span class="keyword">return</span> doUpdate(ms, parameter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        BoundSql boundSql = ms.getBoundSql(parameter);</span><br><span class="line">        CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);</span><br><span class="line">        <span class="keyword">return</span> query(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">        List&lt;E&gt; list;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryStack++;</span><br><span class="line">            list = resultHandler == <span class="keyword">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 这个主要是处理存储过程用的</span></span><br><span class="line">                handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果查不到的话就从数据库查(在queryFromDatabase中会对localCache进行写入)</span></span><br><span class="line">                list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            queryStack--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">queryFromDatabase</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        List&lt;E&gt; list;</span><br><span class="line">        localCache.putObject(key, EXECUTION_PLACEHOLDER);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            localCache.removeObject(key);</span><br><span class="line">        &#125;</span><br><span class="line">        localCache.putObject(key, list);</span><br><span class="line">        <span class="keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;</span><br><span class="line">            localOutputParameterCache.putObject(key, parameter);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerpetualCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Object, Object&gt; cache = <span class="keyword">new</span> HashMap&lt;Object, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PerpetualCache</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cache.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">        cache.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cache.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">removeObject</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cache.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cache.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReadWriteLock <span class="title">getReadWriteLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><ul>
<li>Mybatis的二级缓存是Mapper级别(按照namespace分)的，当多个SqlSession去操作同一个Mapper的sql语句时，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。</li>
<li>每一个namespace的Mapper有一个二级缓存区域，如果两个Mapper的namespace相同，这两个Mapper执行的SQL查询到的数据将保存在相同的二级缓存区域中；当这个namespace中执行了非SELECT语句时，整个namespace中的缓存会被清空。</li>
<li>由于MyBatis的二级缓存是基于namespace的，多表查询语句所在的namspace无法感应到其他namespace中的语句对多表查询中涉及的表进行的修改，引发脏数据问题，所以Mybatis的二级缓存不适用于多表查询的情况。</li>
<li>Mybatis默认是不开启二级缓存的，需要进行手动配置。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSecondaryCache1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession1 = sqlSessionFactory.openSession();</span><br><span class="line">             SqlSession sqlSession2 = sqlSessionFactory.openSession()) &#123;</span><br><span class="line"></span><br><span class="line">            UserMapper userMapper1 = sqlSession1.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            log.info(<span class="string">"&#123;&#125;"</span>, userMapper1.selectByPrimaryKey(<span class="number">101L</span>)); <span class="comment">// 发出SQL语句</span></span><br><span class="line">            sqlSession1.commit(); <span class="comment">// 执行SELECT的commit操作会将SqlSession中的数据存入二级缓存区域</span></span><br><span class="line"></span><br><span class="line">            UserMapper userMapper2 = sqlSession2.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            log.info(<span class="string">"&#123;&#125;"</span>, userMapper2.selectByPrimaryKey(<span class="number">101L</span>)); <span class="comment">// 不发出SQL语句</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSecondaryCache2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession1 = sqlSessionFactory.openSession();</span><br><span class="line">             SqlSession sqlSession2 = sqlSessionFactory.openSession()) &#123;</span><br><span class="line"></span><br><span class="line">            UserMapper userMapper1 = sqlSession1.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            User user = userMapper1.selectByPrimaryKey(<span class="number">101L</span>); <span class="comment">// 发出SQL语句</span></span><br><span class="line">            log.info(<span class="string">"&#123;&#125;"</span>, user);</span><br><span class="line">            user.setEmail(<span class="string">"admin@gmail.com"</span>);</span><br><span class="line">            userMapper1.updateByPrimaryKey(user);</span><br><span class="line">            sqlSession1.commit(); <span class="comment">// 当执行了非SELECT语句时整个namespace中的缓存会被清空</span></span><br><span class="line"></span><br><span class="line">            UserMapper userMapper2 = sqlSession2.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            log.info(<span class="string">"&#123;&#125;"</span>, userMapper2.selectByPrimaryKey(<span class="number">101L</span>)); <span class="comment">// 发出SQL语句</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachingExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Executor delegate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransactionalCacheManager tcm = <span class="keyword">new</span> TransactionalCacheManager();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(MappedStatement ms, Object parameterObject)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        flushCacheIfRequired(ms);</span><br><span class="line">        <span class="keyword">return</span> delegate.update(ms, parameterObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        BoundSql boundSql = ms.getBoundSql(parameterObject);</span><br><span class="line">        CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);</span><br><span class="line">        <span class="keyword">return</span> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Cache cache = ms.getCache();</span><br><span class="line">        <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">            flushCacheIfRequired(ms);</span><br><span class="line">            <span class="keyword">if</span> (ms.isUseCache() &amp;&amp; resultHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">                ensureNoOutParams(ms, boundSql);</span><br><span class="line">                List&lt;E&gt; list = (List&lt;E&gt;) tcm.getObject(cache, key);</span><br><span class="line">                <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    list = delegate.&lt;E&gt;query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">                    tcm.putObject(cache, key, list); <span class="comment">// issue #578 and #116</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> list;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> delegate.&lt;E&gt;query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheKey <span class="title">createCacheKey</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.createCacheKey(ms, parameterObject, rowBounds, boundSql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearLocalCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        delegate.clearLocalCache();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在默认的设置中SELECT语句不会刷新缓存, INSERT/UPDATE/DELETE会刷新缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">flushCacheIfRequired</span><span class="params">(MappedStatement ms)</span> </span>&#123;</span><br><span class="line">        Cache cache = ms.getCache();</span><br><span class="line">        <span class="keyword">if</span> (cache != <span class="keyword">null</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;</span><br><span class="line">            tcm.clear(cache);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionalCacheManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Cache, TransactionalCache&gt; transactionalCaches = <span class="keyword">new</span> HashMap&lt;Cache, TransactionalCache&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(Cache cache)</span> </span>&#123;</span><br><span class="line">        getTransactionalCache(cache).clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(Cache cache, CacheKey key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getTransactionalCache(cache).getObject(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Cache cache, CacheKey key, Object value)</span> </span>&#123;</span><br><span class="line">        getTransactionalCache(cache).putObject(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (TransactionalCache txCache : transactionalCaches.values()) &#123;</span><br><span class="line">            txCache.commit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (TransactionalCache txCache : transactionalCaches.values()) &#123;</span><br><span class="line">            txCache.rollback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TransactionalCache <span class="title">getTransactionalCache</span><span class="params">(Cache cache)</span> </span>&#123;</span><br><span class="line">        TransactionalCache txCache = transactionalCaches.get(cache);</span><br><span class="line">        <span class="keyword">if</span> (txCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">            txCache = <span class="keyword">new</span> TransactionalCache(cache);</span><br><span class="line">            transactionalCaches.put(cache, txCache);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> txCache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="插件机制"><a href="#插件机制" class="headerlink" title="插件机制"></a>插件机制</h2><p>MyBatis允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p>
<ul>
<li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li>
<li>ParameterHandler (getParameterObject, setParameters)</li>
<li>ResultSetHandler (handleResultSets, handleOutputParameters)</li>
<li>StatementHandler (prepare, parameterize, batch, update, query)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Intercepts</span>(&#123;<span class="meta">@Signature</span>(type = Executor<span class="class">.<span class="keyword">class</span>, <span class="title">method</span> </span>= <span class="string">"query"</span>, args = &#123;</span><br><span class="line">        MappedStatement<span class="class">.<span class="keyword">class</span>, <span class="title">Object</span>.<span class="title">class</span>, <span class="title">RowBounds</span>.<span class="title">class</span>, <span class="title">ResultHandler</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">PageInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(PageInterceptor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPACE = <span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MULTI_SPACE_PATTERN = <span class="string">" +"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NEWLINE_PATTERN = <span class="string">"[\\n\\r\\t]"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAPPED_STATEMENT_INDEX = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PARAMETER_INDEX = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ROW_BOUNDS_INDEX = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESULT_HANDLER_INDEX = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Object[] args = invocation.getArgs();</span><br><span class="line">        <span class="keyword">final</span> Object parameter = args[PARAMETER_INDEX];</span><br><span class="line">        <span class="keyword">if</span> (parameter <span class="keyword">instanceof</span> Pageable) &#123;</span><br><span class="line">            Pageable&lt;?&gt; pageable = (Pageable&lt;?&gt;) parameter;</span><br><span class="line">            <span class="keyword">final</span> MappedStatement ms = (MappedStatement) args[MAPPED_STATEMENT_INDEX];</span><br><span class="line">            <span class="keyword">final</span> BoundSql boundSql = ms.getBoundSql(parameter);</span><br><span class="line">            <span class="keyword">int</span> page = pageable.getPage();</span><br><span class="line">            <span class="keyword">int</span> pageSize = pageable.getPageSize();</span><br><span class="line"></span><br><span class="line">            DialectCountHolder holder = getCount(ms, boundSql);</span><br><span class="line">            DialectHandler dialectHandler = holder.getDialectHandler();</span><br><span class="line">            <span class="keyword">int</span> totalItems = holder.getCount();</span><br><span class="line"></span><br><span class="line">            String limitSql = dialectHandler.getLimitString(boundSql.getSql(), (page - <span class="number">1</span>) * pageSize, pageSize);</span><br><span class="line">            args[ROW_BOUNDS_INDEX] = <span class="keyword">new</span> RowBounds(RowBounds.NO_ROW_OFFSET, RowBounds.NO_ROW_LIMIT);</span><br><span class="line">            args[MAPPED_STATEMENT_INDEX] = newMappedStatement(ms, boundSql, limitSql);</span><br><span class="line">            List&lt;?&gt; items = (List&lt;?&gt;) invocation.proceed();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Collections.singletonList(<span class="keyword">new</span> PageImpl&lt;&gt;(page, pageSize, items, totalItems));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> org.springframework.jdbc.core.JdbcTemplate#execute</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> DataSourceUtils</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> &lt;a href="https://www.ibm.com/developerworks/cn/java/j-lo-spring-ts1/"&gt;Spring Transaction Manager&lt;/a&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DialectCountHolder <span class="title">getCount</span><span class="params">(MappedStatement ms, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        DataSource dataSource = ms.getConfiguration().getEnvironment().getDataSource();</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement stmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 首先尝试从事务上下文中获取连接, 失败后再从数据源获取连接</span></span><br><span class="line">            conn = DataSourceUtils.getConnection(dataSource);</span><br><span class="line">            DialectHandler dialectHandler = getDatabaseDialect(conn);</span><br><span class="line">            String countSql = dialectHandler.getCountString(boundSql.getSql());</span><br><span class="line">            stmt = conn.prepareStatement(countSql);</span><br><span class="line">            LOGGER.debug(<span class="string">"==&gt;  Preparing: &#123;&#125;"</span>, countSql.replaceAll(NEWLINE_PATTERN, SPACE).replaceAll(MULTI_SPACE_PATTERN, SPACE));</span><br><span class="line">            BoundSql countBoundSql = newBoundSql(ms, boundSql, countSql);</span><br><span class="line">            ParameterHandler handler = <span class="keyword">new</span> DefaultParameterHandler(ms, boundSql.getParameterObject(), countBoundSql);</span><br><span class="line">            handler.setParameters(stmt);</span><br><span class="line">            LOGGER.debug(<span class="string">"==&gt; Parameters: &#123;&#125;"</span>, JsonUtils.toJson(boundSql.getParameterObject()));</span><br><span class="line">            rs = stmt.executeQuery();</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                count = rs.getInt(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            LOGGER.debug(<span class="string">"&lt;==      Total: &#123;&#125;"</span>, count);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DialectCountHolder(dialectHandler, count);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.closeResultSet(rs);</span><br><span class="line">            JdbcUtils.closeStatement(stmt);</span><br><span class="line">            <span class="comment">// 释放连接, 放回到连接池中</span></span><br><span class="line">            DataSourceUtils.releaseConnection(conn, dataSource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> MappedStatement <span class="title">newMappedStatement</span><span class="params">(MappedStatement ms, BoundSql boundSql, String sql)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> newMappedStatement(ms, p -&gt; newBoundSql(ms, boundSql, sql));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> BoundSql <span class="title">newBoundSql</span><span class="params">(MappedStatement ms, BoundSql boundSql, String sql)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> BoundSql newBoundSql = <span class="keyword">new</span> BoundSql(ms.getConfiguration(), sql, boundSql.getParameterMappings(), boundSql.getParameterObject());</span><br><span class="line">        <span class="keyword">for</span> (ParameterMapping mapping : boundSql.getParameterMappings()) &#123;</span><br><span class="line">            String prop = mapping.getProperty();</span><br><span class="line">            <span class="keyword">if</span> (boundSql.hasAdditionalParameter(prop)) &#123;</span><br><span class="line">                newBoundSql.setAdditionalParameter(prop, boundSql.getAdditionalParameter(prop));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newBoundSql;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> org.apache.ibatis.builder.MapperBuilderAssistant</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> MappedStatement <span class="title">newMappedStatement</span><span class="params">(MappedStatement ms, SqlSource sqlSource)</span> </span>&#123;</span><br><span class="line">        MappedStatement.Builder builder = <span class="keyword">new</span> MappedStatement.Builder(ms.getConfiguration(), ms.getId(), sqlSource, ms.getSqlCommandType());</span><br><span class="line">        builder.resource(ms.getResource());</span><br><span class="line">        builder.fetchSize(ms.getFetchSize());</span><br><span class="line">        builder.statementType(ms.getStatementType());</span><br><span class="line">        builder.keyGenerator(ms.getKeyGenerator());</span><br><span class="line">        <span class="keyword">if</span> (ms.getKeyProperties() != <span class="keyword">null</span> &amp;&amp; ms.getKeyProperties().length != <span class="number">0</span>) &#123;</span><br><span class="line">            StringBuilder keyProperties = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (String keyProperty : ms.getKeyProperties()) &#123;</span><br><span class="line">                keyProperties.append(keyProperty).append(<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            keyProperties.delete(keyProperties.length() - <span class="number">1</span>, keyProperties.length());</span><br><span class="line">            builder.keyProperty(keyProperties.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        builder.timeout(ms.getTimeout());</span><br><span class="line">        builder.parameterMap(ms.getParameterMap());</span><br><span class="line">        builder.resultMaps(ms.getResultMaps());</span><br><span class="line">        builder.resultSetType(ms.getResultSetType());</span><br><span class="line">        builder.cache(ms.getCache());</span><br><span class="line">        builder.flushCacheRequired(ms.isFlushCacheRequired());</span><br><span class="line">        builder.useCache(ms.isUseCache());</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> org.apache.ibatis.mapping.VendorDatabaseIdProvider#getDatabaseProductName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DialectHandler <span class="title">getDatabaseDialect</span><span class="params">(Connection conn)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String productName = conn.getMetaData().getDatabaseProductName();</span><br><span class="line">        <span class="keyword">return</span> DialectHandlerFactory.getDialectHandler().stream()</span><br><span class="line">                .filter(h -&gt; h.supportsType(Database.fromType(productName)))</span><br><span class="line">                .findFirst()</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> RuntimeException(<span class="string">"Unsupported database type: "</span> + productName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DialectCountHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> DialectHandler dialectHandler;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">        DialectCountHolder(DialectHandler dialectHandler, <span class="keyword">int</span> count) &#123;</span><br><span class="line">            <span class="keyword">this</span>.dialectHandler = dialectHandler;</span><br><span class="line">            <span class="keyword">this</span>.count = count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">DialectHandler <span class="title">getDialectHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> dialectHandler;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Spring整合MyBatis"><a href="#Spring整合MyBatis" class="headerlink" title="Spring整合MyBatis"></a>Spring整合MyBatis</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:application.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.zaxxer.hikari.HikariDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionTimeout"</span> <span class="attr">value</span>=<span class="string">"$&#123;ds_connectionTimeout:30000&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maximumPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;ds_maxPoolSize:10&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minimumIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;ds_minIdle:5&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleTimeout"</span> <span class="attr">value</span>=<span class="string">"$&#123;ds_idleTimeout:180000&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;ds_driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;ds_url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;ds_username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;ds_password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommit"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"readOnly"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    声明式事务有两种方式:</span></span><br><span class="line"><span class="comment">    (1)基于 @Transactional 注解方式(更灵活)</span></span><br><span class="line"><span class="comment">    (2)基于XML配置文件方式(事务方法命名要遵循指定的规则)</span></span><br><span class="line"><span class="comment">    说明:</span></span><br><span class="line"><span class="comment">    (1)若两种方式同时存在, 为避免执行两次 &#123;@link TransactionInterceptor#invoke&#125; 方法, 被 @Transactional 标注的方法的命名不能与XML方式中的事务方法命名规则相同;</span></span><br><span class="line"><span class="comment">    (2)注解 @Transactional 只应用到public方法和自调用问题, 是由于使用Spring AOP代理造成的, 为解决这两个问题, 使用AspectJ取代Spring AOP代理.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Integration MyBatis --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"$&#123;mybatis.configLocation&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseIdProvider"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.ibatis.mapping.VendorDatabaseIdProvider"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"MySQL"</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"Oracle"</span>&gt;</span>oracle<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置SQL映射文件(默认与Mapper类路径相同) --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="mapperLocations" value="classpath:mapper/*Mapper.xml"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动创建别名(别名就是类名且大小写均可, 注意此处不支持使用通配符) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"$&#123;mybatis.typeAliasesPackage&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注意:只有纳入Spring容器管理的Bean方可进行依赖注入. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plugins"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.gavin.ssm.sys.core.plugin.PageInterceptor"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        PropertyPlaceholderConfigurer作为一个BeanFactoryPostProcessor会在载入所有BeanDefinition后运行,</span></span><br><span class="line"><span class="comment">        然后利用指定的properties文件来替换BeanDefinition中定义的$&#123;&#125;占位符.</span></span><br><span class="line"><span class="comment">        而MapperScannerConfigurer作为一个BeanDefinitionRegistryPostProcessor会在Spring扫描Bean定义时回调,</span></span><br><span class="line"><span class="comment">        远早于BeanFactoryPostProcessor, 所以变量$&#123;mybatis.typeHandlersPackage&#125;没有被替换.</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processPropertyPlaceHolders"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- optional unless there are multiple session factories defined --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="sqlSessionTemplateBeanName" value="batchSqlSessionTemplate"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        You can set more than one package by using a semicolon or comma as a separator.</span></span><br><span class="line"><span class="comment">        &lt;a href="https://github.com/mybatis/spring/issues/144"&gt;Placeholder not resolved for MapperScannerConfigurer&lt;/a&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"$&#123;mybatis.typeHandlersPackage&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    关于MyBatis的BATCH模式:</span></span><br><span class="line"><span class="comment">    (1)Mybatis内置的ExecutorType有三种, 默认的是SIMPLE, 该模式下它为每个语句的执行创建一个新的预处理语句, 单条提交sql; 而BATCH模式重复使用已经预处理的语句, 并且批量执行所有更新语句, 显然BATCH性能将更优;</span></span><br><span class="line"><span class="comment">    (2)BATCH模式也有自己的问题, 比如在insert操作时, 在事务没有提交之前, 是没有办法获取到自增的id; 此外, 对于insert、update、delete无法返回更新条数, 这在某型情形下是不符合业务要求的;</span></span><br><span class="line"><span class="comment">    (3)在同一事务中BATCH模式和SIMPLE模式之间无法转换, 所以碰到需要批量更新时, 需要在单独的事务中进行.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"batchSqlSessionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"BATCH"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javaee</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring WebFlux</title>
    <url>/2019/04/21/javaee/webflux/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Spring 5 是继 Spring 4 之后将近四年内的一个重大的版本升级。Spring 5 中最重要改动是把反应式编程的思想应用到了框架的各个方面，Spring 5 的反应式编程以 Reactor 库为基础。</p>
<p>Spring WebFlux 是 Spring 5 的反应式核心，名称中的 Flux 来源于 Reactor 中的类 Flux。Spring WebFlux 模块中包含了对反应式 HTTP、服务器推送事件和 WebSocket 的客户端和服务器端的支持。WebFlux 需要底层提供运行时的支持，WebFlux 可以运行在支持 Servlet 3.1 非阻塞 IO API 的 Servlet 容器上，或者其他异步运行时环境，如 Netty 和 Undertow。</p>
<h2 id="同步Servlet和异步Servlet"><a href="#同步Servlet和异步Servlet" class="headerlink" title="同步Servlet和异步Servlet"></a>同步Servlet和异步Servlet</h2><p>在 Servlet 3.0 之前，Servlet采用<code>One-Request-Per-Thread</code>的方式处理请求，即每一个Http请求都由某一个线程从头到尾负责处理。如果一个请求需要进行IO操作，比如访问数据库、调用第三方服务接口等，那么其所对应的线程将同步地等待IO操作完成，而IO操作是非常慢的，所以此时的线程并不能及时地释放回线程池以供后续使用，在并发量越来越大的情况下，这将带来严重的性能问题。即便是像SpringMVC、Struts这样的框架也脱离不了这样的桎梏，因为它们都是建立在Servlet之上的。为了解决这样的问题，Servlet 3.0 引入了异步处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/blocking-sync"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingSyncServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        doExecute();</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125;: Execute completed in &#123;&#125; ms"</span>, <span class="keyword">this</span>, endTime - startTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟业务处理耗时操作</span></span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Servlet 3.0 中，我们可以从HttpServletRequest对象中获得一个AsyncContext对象，该对象构成了异步处理的上下文，Request和Response对象都可从中获取。AsyncContext可以从当前线程传给另外的线程，并在新的线程中完成对请求的处理并返回结果给客户端，初始线程便可以还回给容器线程池以处理更多的请求。如此，通过将请求从一个线程传给另一个线程处理的过程便构成了 Servlet 3.0 中的异步处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/blocking-async"</span>, asyncSupported = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingAsyncServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 开启异步模式: Servlet线程不再是一直处于阻塞状态以等待业务逻辑的处理, 而是启动异步线程之后线程本身返回至容器</span></span><br><span class="line">        AsyncContext ctx = request.startAsync();</span><br><span class="line">        <span class="comment">// 请求异步处理</span></span><br><span class="line">        doExecute(ctx);</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125;: Execute completed in &#123;&#125; ms"</span>, <span class="keyword">this</span>, endTime - startTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接调用AsyncContext的start()方法会向Servlet容器另外申请一个新的线程, 这种方式对性能的改进不大,</span></span><br><span class="line"><span class="comment">     * 因为如果新的线程和初始线程共享同一个线程池的话, 相当于闲置下了一个线程, 但同时又占用了另一个线程.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doExecute</span><span class="params">(AsyncContext ctx)</span> </span>&#123;</span><br><span class="line">        CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 模拟业务处理耗时操作</span></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                <span class="comment">// Ignored</span></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 处理完毕后需要调用complete()方法告知Servlet容器</span></span><br><span class="line">                ctx.complete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Servlet 3.0 对请求的处理虽然是异步的，但是对InputStream和OutputStream的IO操作却依然是阻塞的，对于数据量大的请求体或者返回体，阻塞IO也将导致不必要的等待。因此在 Servlet 3.1 中又引入了非阻塞IO来进一步增强异步处理的性能，通过在HttpServletRequest和HttpServletResponse中分别添加ReadListener和WriterListener方式，只有在IO数据满足一定条件时（比如数据准备好时）才进行后续的操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/non-blocking-async"</span>, asyncSupported = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonBlockingAsyncServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        AsyncContext ctx = request.startAsync();</span><br><span class="line">        request.getInputStream()</span><br><span class="line">                .setReadListener(<span class="keyword">new</span> HttpRequestReadListener(ctx));</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125;: Execute completed in &#123;&#125; ms"</span>, <span class="keyword">this</span>, endTime - startTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpRequestReadListener</span> <span class="keyword">implements</span> <span class="title">ReadListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AsyncContext asyncContext;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">HttpRequestReadListener</span><span class="params">(AsyncContext asyncContext)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.asyncContext = asyncContext;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDataAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAllDataRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                    <span class="comment">// Ignored</span></span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    asyncContext.complete();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">            asyncContext.complete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="WebSocket和SSE"><a href="#WebSocket和SSE" class="headerlink" title="WebSocket和SSE"></a>WebSocket和SSE</h2><p>服务器端数据推送技术除了<code>WebSocket</code>外还有<code>Server-sent Events</code>(简称SSE)，WebSocket 规范和 Server-sent Events 都是 HTML5 标准的组成部分，在主流浏览器上都提供了原生的支持，都是推荐使用的。WebSocket适用于需要进行复杂双向数据通讯的场景，对于简单的服务器数据推送的场景，使用服务器推送事件就足够了。</p>
<p>正如名称所表示的一样，WebSocket使用的是套接字连接，基于<code>TCP</code>协议。使用WebSocket之后，实际上是在服务器端和浏览器之间建立一个套接字连接，可以进行双向的数据传输。WebSocket功能强大，使用起来也灵活，可以适用于不同的场景。除了WebSocket之外，其他的实现方式是基于<code>HTTP</code>协议来达到实时推送的效果。</p>
<p>严格地说，HTTP 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。本质上，这种通信就是以流信息的方式，完成一次用时很长的下载。SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 HTTP 协议，目前除了 IE/Edge，其他浏览器都支持。</p>
<p>总体来说，WebSocket 更强大和灵活，可以双向通信；SSE 是单向通信，只能服务器向浏览器发送，因为流信息本质上就是下载。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/sse"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEXT_EVENT_STREAM_VALUE = <span class="string">"text/event-stream"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        doExecute(response);</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(String.format(<span class="string">"%s &gt;&gt; Execute completed in %s ms"</span>, <span class="keyword">this</span>, endTime - startTime));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doExecute</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        response.setContentType(TEXT_EVENT_STREAM_VALUE);</span><br><span class="line">        response.setCharacterEncoding(StandardCharsets.UTF_8.name());</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        out.write(<span class="string">"event: myEvent\n"</span>);</span><br><span class="line">        out.write(<span class="string">"retry: 10000\n"</span>);</span><br><span class="line">        out.write(<span class="string">"data: "</span> + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)) + <span class="string">"\n\n"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sse = <span class="keyword">new</span> EventSource(<span class="string">'sse'</span>);</span><br><span class="line"><span class="comment">// 默认情况下, 服务器发来的数据, 总是触发浏览器EventSource实例的message事件</span></span><br><span class="line">sse.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 可自定义 SSE 事件, 这种情况下, 发送回来的数据不会触发message事件</span></span><br><span class="line">sse.addEventListener(<span class="string">'myEvent'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Reactive-Stream"><a href="#Reactive-Stream" class="headerlink" title="Reactive Stream"></a>Reactive Stream</h2><p>流 Stream 是什么？流是序列，是生产者生产、一个或多个消费者消费的元素序列。这种具体的设计模式称为发布订阅模式。常见的流处理机制是 pull / push 模式。背压是一种常用策略，使得发布者拥有无限制的缓冲区存储元素，用于确保发布者发布元素太快时，不会去压制订阅者。</p>
<p><code>Reactive Streams</code>是提供处理非阻塞背压异步流的一种标准，<code>JDK9</code>提供了 <code>Flow</code> 和 <code>SubmissionPublisher</code> 两个主要的 API 来处理响应流。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReactiveStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReactiveStream</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SubmissionPublisher&lt;Integer&gt; publisher = <span class="keyword">new</span> SubmissionPublisher&lt;&gt;();</span><br><span class="line">        Subscriber&lt;Integer&gt; subscriber = <span class="keyword">new</span> ConsumerSubscriber&lt;&gt;();</span><br><span class="line">        publisher.subscribe(subscriber);</span><br><span class="line">        <span class="comment">// submit是阻塞方法(当发布者发布数据时, 如果订阅者的数据缓冲数组已满, 则submit会被阻塞, 从而实现调节生产者发布数据的速度)</span></span><br><span class="line">        IntStream.rangeClosed(<span class="number">1</span>, <span class="number">1000</span>).forEach(i -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">"====== 生产数据 &#123;&#125; ======"</span>, i);</span><br><span class="line">            publisher.submit(i);</span><br><span class="line">        &#125;);</span><br><span class="line">        publisher.close();</span><br><span class="line">        Thread.currentThread().join(TimeUnit.SECONDS.toMillis(<span class="number">60</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerSubscriber</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Subscription subscription;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription subscription)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.subscription = subscription;</span><br><span class="line">            <span class="keyword">this</span>.subscription.request(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T item)</span> </span>&#123;</span><br><span class="line">            log.debug(<span class="string">"====== 消费数据 &#123;&#125; ======"</span>, item);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 模拟业务处理耗时</span></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.subscription.request(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">            log.error(<span class="string">"出现异常啦"</span>, throwable);</span><br><span class="line">            <span class="keyword">this</span>.subscription.cancel();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            log.info(<span class="string">"数据全部处理完成"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="WebMVC-VS-WebFlux"><a href="#WebMVC-VS-WebFlux" class="headerlink" title="WebMVC VS WebFlux"></a>WebMVC VS WebFlux</h2><p>WebMVC是同步阻塞的IO模型，而WebFlux是异步非阻塞的IO模型。</p>
<blockquote>
<p>Reactor = JDK8 Stream + JDK9 Reactive Stream</p>
</blockquote>
<p><img src="/images/javaee/webflux-reactor.svg" alt="WebMVC VS WebFlux"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReactorResource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"webmvc"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">webmvc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        String currTime = <span class="keyword">this</span>.handle();</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"WebMVC &gt;&gt; Execute completed in &#123;&#125; ms"</span>, endTime - startTime);</span><br><span class="line">        <span class="keyword">return</span> currTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"webflux"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">webflux</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        Mono&lt;String&gt; mono = Mono.fromSupplier(<span class="keyword">this</span>::handle); <span class="comment">// 中间操作, 没有执行最终操作, 不会阻塞</span></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"WebFlux &gt;&gt; Execute completed in &#123;&#125; ms"</span>, endTime - startTime);</span><br><span class="line">        <span class="keyword">return</span> mono;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"stream"</span>, produces = TEXT_EVENT_STREAM_VALUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;Integer&gt; <span class="title">stream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        Flux&lt;Integer&gt; flux = Flux.fromStream(IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10</span>).mapToObj(i -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;));</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"Stream &gt;&gt; Execute completed in &#123;&#125; ms"</span>, endTime - startTime);</span><br><span class="line">        <span class="keyword">return</span> flux;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javaee</category>
      </categories>
      <tags>
        <tag>webflux</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Transaction</title>
    <url>/2018/04/30/javaee/transaction/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Spring 最成功、最吸引人的地方莫过于轻量级的声明式事务管理，Spring 的声明式事务管理是基于接口代理或动态字节码技术通过 AOP 来实现的：  </p>
<ul>
<li>对于基于接口动态代理的 AOP 事务增强来说，由于接口的方法是 public 的，这就要求实现类的实现方法必须是 public 的（不能是 protected、private），同时不能使用 static 的修饰符，所以，可以实施接口动态代理的方法只能是使用 <code>public</code> 或 <code>public final</code> 修饰符的方法，其它方法不可能被动态代理，相应的也就不能实施 AOP 增强，也就不能进行 Spring 事务增强了；</li>
<li>基于 CGLib 字节码动态代理的方案是通过扩展被增强类、动态创建子类的方式进行 AOP 增强植入的，由于使用 final、static、private 修饰符的方法都不能被子类覆盖，相应的，这些方法将不能被实施 AOP 增强，所以，必须特别注意这些修饰符的使用，以免不小心成为事务管理的漏网之鱼。</li>
</ul>
<table>
<thead>
<tr>
<th>动态代理策略</th>
<th>不能被事务增强的方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>基于接口的动态代理</td>
<td>除 public 外的其它所有的方法, 此外 public static 也不能被增强</td>
</tr>
<tr>
<td>基于CGLib的动态代理</td>
<td>private、static、final 修饰的方法</td>
</tr>
</tbody>
</table>
<h2 id="注解事务注意事项"><a href="#注解事务注意事项" class="headerlink" title="注解事务注意事项"></a>注解事务注意事项</h2><ol>
<li>声明式事务有<code>基于@Transactional注解（更灵活）</code>和<code>基于XML配置（事务方法命名要遵循指定的规则）</code>两种方式，若这两种方式同时存在，为避免执行两次AOP切面，被<code>@Transactional</code>注解标注的方法命名不能与XML配置方式中的事务方法命名规则相同。</li>
<li>默认情况下，如果在事务中抛出了运行时异常或者Error，则 Spring 将回滚事务；除此之外，Spring不会回滚事务；如果在事务中抛出其他类型的异常，并期望 Spring 能够回滚事务，可以指定 rollbackFor。</li>
<li>注解<code>@Transactional</code>的事务超时时间 timeout 默认值为-1（表示永不超时）；所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。</li>
<li>注解<code>@Transactional</code>只有应用到<code>public</code>方法，才能进行事务管理。</li>
<li>在Spring的AOP代理下，只有目标方法由外部调用，目标方法才由Spring生成的代理对象来管理，这会造成自调用问题。若同一类中的其他没有<code>@Transactional</code>注解的方法内部调用有<code>@Transactional</code>注解的方法，有<code>@Transactional</code>注解的方法的事务被忽略，不会发生回滚。</li>
<li>注解<code>@Transactional</code>只能应用到<code>public</code>方法和自调用问题，是由于使用Spring AOP代理造成的，为解决这两个问题，使用AspectJ取代Spring AOP代理。</li>
</ol>
<h2 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h2><table>
<thead>
<tr>
<th style="text-align:left">事务传播行为</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">PROPAGATION_REQUIRED</td>
<td style="text-align:left">如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中（默认的事务传播行为）</td>
</tr>
<tr>
<td style="text-align:left">PROPAGATION_REQUIRES_NEW</td>
<td style="text-align:left">新建事务，如果当前存在事务，把当前事务挂起</td>
</tr>
<tr>
<td style="text-align:left">PROPAGATION_NESTED</td>
<td style="text-align:left">如果当前存在事务，则在嵌套事务内执行；如果当前没有事务，则执行与 PROPAGATION_REQUIRED 类似的操作</td>
</tr>
<tr>
<td style="text-align:left">PROPAGATION_SUPPORTS</td>
<td style="text-align:left">支持当前事务，如果当前没有事务，就以非事务方式执行</td>
</tr>
<tr>
<td style="text-align:left">PROPAGATION_NOT_SUPPORTED</td>
<td style="text-align:left">以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</td>
</tr>
<tr>
<td style="text-align:left">PROPAGATION_MANDATORY</td>
<td style="text-align:left">使用当前的事务，如果当前没有事务，就抛出异常</td>
</tr>
<tr>
<td style="text-align:left">PROPAGATION_NEVER</td>
<td style="text-align:left">以非事务方式执行，如果当前存在事务，则抛出异常</td>
</tr>
</tbody>
</table>
<p>其中比较容易混淆的是前三种，下面通过代码对这三种传播行为进行详细解释：</p>
<h3 id="PROPAGATION-REQUIRED"><a href="#PROPAGATION-REQUIRED" class="headerlink" title="PROPAGATION_REQUIRED"></a>PROPAGATION_REQUIRED</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ServiceA<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServiceB serviceB;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceA</span><span class="params">(ServiceB serviceB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serviceB = serviceB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        doSomething();</span><br><span class="line">        serviceB.execute();</span><br><span class="line">        doSomethingElse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"====== Invoke serviceA.doSomething() ======"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomethingElse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"====== Invoke serviceA.doSomethingElse() ======"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ServiceB<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"====== Invoke serviceB.execute() ======"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制台日志：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Creating new transaction with name [ServiceA.execute]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; &apos;&apos;</span><br><span class="line">Acquired Connection for JDBC transaction</span><br><span class="line">Switching JDBC Connection to manual commit</span><br><span class="line">====== Invoke serviceA.doSomething() ======</span><br><span class="line">Participating in existing transaction</span><br><span class="line">====== Invoke serviceB.execute() ======</span><br><span class="line">====== Invoke serviceA.doSomethingElse() ======</span><br><span class="line">Initiating transaction commit</span><br><span class="line">Committing JDBC transaction</span><br><span class="line">Releasing JDBC Connection after transaction</span><br><span class="line">Returning JDBC Connection to DataSource</span><br></pre></td></tr></table></figure></p>
<p>模拟伪代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection conn = DataSourceUtils.getConnection(dataSource);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    serviceA.execute();</span><br><span class="line">    conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">    conn.rollback();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    DataSourceUtils.releaseConnection(conn, dataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="PROPAGATION-REQUIRES-NEW"><a href="#PROPAGATION-REQUIRES-NEW" class="headerlink" title="PROPAGATION_REQUIRES_NEW"></a>PROPAGATION_REQUIRES_NEW</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ServiceA<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServiceB serviceB;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceA</span><span class="params">(ServiceB serviceB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serviceB = serviceB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        doSomething();</span><br><span class="line">        serviceB.execute();</span><br><span class="line">        doSomethingElse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"====== Invoke serviceA.doSomething() ======"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomethingElse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"====== Invoke serviceA.doSomethingElse() ======"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ServiceB<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"====== Invoke serviceB.execute() ======"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制台日志：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Creating new transaction with name [ServiceA.execute]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; &apos;&apos;</span><br><span class="line">Acquired Connection  JDBC transaction</span><br><span class="line">Switching JDBC Connection to manual commit</span><br><span class="line">====== Invoke serviceA.doSomething() ======</span><br><span class="line">Suspending current transaction, creating new transaction with name [ServiceB.execute]</span><br><span class="line">Acquired Connection for JDBC transaction</span><br><span class="line">Switching JDBC Connection to manual commit</span><br><span class="line">====== Invoke serviceB.execute() ======</span><br><span class="line">Initiating transaction commit</span><br><span class="line">Committing JDBC transaction</span><br><span class="line">Releasing JDBC Connection after transaction</span><br><span class="line">Returning JDBC Connection to DataSource</span><br><span class="line">Resuming suspended transaction after completion of inner transaction</span><br><span class="line">====== Invoke serviceA.doSomethingElse() ======</span><br><span class="line">Initiating transaction commit</span><br><span class="line">Committing JDBC transaction</span><br><span class="line">Releasing JDBC Connection after transaction</span><br><span class="line">Returning JDBC Connection to DataSource</span><br></pre></td></tr></table></figure></p>
<p>模拟伪代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TransactionalManager tm = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    tm = getTransactionalManager();</span><br><span class="line">    tm.begin(); <span class="comment">// 开启第一个新事务</span></span><br><span class="line">    Transactional ts1 = getTransactional();</span><br><span class="line">    serviceA.doSomething();</span><br><span class="line">    tm.suspend(); <span class="comment">// 挂起当前事务</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        tm.begin(); <span class="comment">// 开启第二个新事务</span></span><br><span class="line">        Transactional ts2 = getTransactional();</span><br><span class="line">        serviceB.execute();</span><br><span class="line">        ts2.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">        ts2.rollback(); <span class="comment">// 回滚第二个事务</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line">    tm.resume(ts1); <span class="comment">// 恢复第一个事务</span></span><br><span class="line">    serviceA.doSomethingElse();</span><br><span class="line">    ts1.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">    ts1.rollback(); <span class="comment">// 回滚第一个事务</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="PROPAGATION-NESTED"><a href="#PROPAGATION-NESTED" class="headerlink" title="PROPAGATION_NESTED"></a>PROPAGATION_NESTED</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ServiceA<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServiceB serviceB;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceA</span><span class="params">(ServiceB serviceB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serviceB = serviceB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        doSomething();</span><br><span class="line">        serviceB.execute();</span><br><span class="line">        doSomethingElse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"====== Invoke serviceA.doSomething() ======"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomethingElse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"====== Invoke serviceA.doSomethingElse() ======"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ServiceB<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.NESTED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"====== Invoke serviceB.execute() ======"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制台日志：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Creating new transaction with name [ServiceA.execute]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; &apos;&apos;</span><br><span class="line">Acquired Connection for JDBC transaction</span><br><span class="line">Switching JDBC Connection to manual commit</span><br><span class="line">====== Invoke serviceA.doSomething() ======</span><br><span class="line">Creating nested transaction with name [ServiceB.execute]</span><br><span class="line">====== Invoke serviceB.execute() ======</span><br><span class="line">Releasing transaction savepoint</span><br><span class="line">====== Invoke serviceA.doSomethingElse() ======</span><br><span class="line">Initiating transaction commit</span><br><span class="line">Committing JDBC transaction</span><br><span class="line">Releasing JDBC Connection after transaction</span><br><span class="line">Returning JDBC Connection to DataSource</span><br></pre></td></tr></table></figure></p>
<p>模拟伪代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    conn = getConnection();</span><br><span class="line">    conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">    serviceA.doSomething();</span><br><span class="line">    Savepoint savepoint = conn.setSavepoint();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        serviceB.execute();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">        conn.rollback(savepoint);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line">    serviceA.doSomethingElse();</span><br><span class="line">    conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">    conn.rollback();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><p>在事务的ACID（原子性、一致性、隔离性、持久性）特性中，隔离性指的是不同事务先后提交并执行后，最终呈现出来的效果是串行的，也就是说，对于事务来说，它在执行过程中，感知到的数据变化应该只有自己操作引起的，不存在其他事务引发的数据变化。隔离性最简单的实现方式就是各个事务都串行执行，即如果前面的事务还没有执行完毕，后面的事务就都等待，但是这样的实现方式很明显并发效率不高，并不适合在实际环境中使用。为了解决这问题，SQL的标准制定者提出了不同的隔离级别：未提交读（READ-UNCOMMITTED）、已提交读（READ-COMMITTED）、可重复读（REPEATABLE-READ）、串行化读（SERIALIZABLE）。</p>
<h3 id="四种事务隔离级别"><a href="#四种事务隔离级别" class="headerlink" title="四种事务隔离级别"></a>四种事务隔离级别</h3><ul>
<li>未提交读（READ-UNCOMMITTED）：在 READ-UNCOMMITTED 隔离级别下，一个事务可以读取另一个并发事务未提交的数据，这被称为脏读 (Dirty Read)。此级别的隔离性最低，可能会导致数据不一致的情况。</li>
<li>已提交读（READ-COMMITTED）：在 READ-COMMITTED 隔离级别下，一个事务只能读取另一个已经提交的事务所做的修改，这样可以避免脏读。但是，可能会出现不可重复读 (Non-Repeatable Read) 的情况，即同一个事务在不同时间读取同一行数据时，数据的值不同（Oracle等多数数据库默认都是该级别）。</li>
<li>可重复读（REPEATABLE-READ）：在 REPEATABLE-READ 隔离级别下，一个事务在执行期间多次读取同一行数据时，数据的值保持不变。此级别的隔离性较高，可以避免不可重复读的情况，但是可能会出现幻读 (Phantom Read) 的情况，即同一个事务在不同时间读取同一范围的数据时，数据的行数不同（MySQL默认级别）。</li>
<li>串行化读（SERIALIZABLE）：在 SERIALIZABLE 隔离级别下，所有的并发事务按顺序执行，就像是串行执行一样。此级别的隔离性最高，可以避免脏读、不可重复读和幻读的情况，但是可能会导致性能问题。</li>
</ul>
<h3 id="三种读类型"><a href="#三种读类型" class="headerlink" title="三种读类型"></a>三种读类型</h3><ul>
<li>脏读（DIRTY READ）：脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问同一数据，然后使用了该数据。</li>
</ul>
<p><img src="/images/database/transaction-isolation-ru.png" alt="READ-UNCOMMITTED"></p>
<p><img src="/images/database/transaction-isolation-rc.png" alt="READ-COMMITTED"></p>
<ul>
<li>不可重复读（NON-REPEATABLE READ）：是指在一个事务内，多次读同一数据，在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的，这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。</li>
</ul>
<p><img src="/images/database/transaction-isolation-nrr.png" alt="NON-REPEATABLE-READ"></p>
<p><img src="/images/database/transaction-isolation-rr.png" alt="REPEATABLE-READ"></p>
<ul>
<li>幻读（PHANTOM READ）：第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行，同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。</li>
</ul>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td>未提交读</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>已提交读（解决脏读）</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>可重复读（解决不可重复读）</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>串行化读（解决幻读）</td>
<td>N</td>
<td>N</td>
<td>N</td>
</tr>
</tbody>
</table>
<blockquote>
<p>MySQL的InnoDB引擎在可重复读级别通过间隙锁解决了幻读问题，通过MVCC解决了不可重复读的问题。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT @@global.tx_isolation, @@session.tx_isolation, @@session.autocommit;</span><br><span class="line">SET @@global.tx_isolation = &apos;REPEATABLE-READ&apos;;</span><br><span class="line">SET @@session.tx_isolation = &apos;READ-COMMITTED&apos;;</span><br><span class="line">SET AUTOCOMMIT = 0; -- 禁止自动提交</span><br><span class="line">SET AUTOCOMMIT = 1; -- 开启自动提交</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 <code>COMMIT</code> 操作。因此要显式地开启一个事务务须使用命令 <code>BEGIN</code> 或 <code>START TRANSACTION</code>或者执行命令 <code>SET AUTOCOMMIT = 0</code> 用来禁止使用当前会话的自动提交。</p>
</blockquote>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol>
<li><p>单条DML语句是否要加事务？</p>
<blockquote>
<p>DML语句默认就是一个事务的，是原子操作，所以单条DML语句是不需要显式开启事务的。如果对一张表进行了多次 INSERT/UPDATE/DELETE 操作，那么就需要添加事务。准确地说，应该是一次任务中如果有多次 INSERT/UPDATE/DELETE 操作，并且这些操作彼此是不可分割的，要么全部成功要么全部失败，那么就需要使用事务进行管理。特别地，当这个任务中只有一次 INSERT/UPDATE/DELETE 操作时，可以不用显式地声明事务，毕竟一旦报错，数据肯定是没有入库。</p>
</blockquote>
</li>
<li><p>查询语句是否要加事务？</p>
<blockquote>
<p>如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性；如果你一次执行多条查询语句，例如统计查询、报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。</p>
</blockquote>
</li>
</ol>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-spring-ts1/index.html" target="_blank" rel="noopener">陈雄华. <em>Spring 事务管理高级应用难点剖析</em></a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-master-spring-transactional-use/index.html" target="_blank" rel="noopener">刘万振.<em>透彻的掌握 Spring 中@transactional 的使用</em></a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-ts1.html" target="_blank" rel="noopener">Mark Richards.<em>了解事务陷阱</em></a></li>
</ul>
]]></content>
      <categories>
        <category>javaee</category>
      </categories>
      <tags>
        <tag>transaction</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM原理</title>
    <url>/2019/01/11/javase/jvm/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>为了使Java开发人员无需关心不同架构上内存模型之间的差异，Java提供了自己的内存模型，并且JVM通过在适当的位置上插入内存栅栏来屏蔽在JMM与底层平台内存模型之间的差异。</p>
<p><img src="/images/javase/jvm-architecture.jpg" alt="JVM Memory Structure">  </p>
<ul>
<li>堆：堆是 Java 程序运行时动态分配内存的区域，用于存放对象、数组等数据结构，由垃圾回收器进行管理和回收。</li>
<li>栈：栈则是 Java 程序中<strong>方法的执行环境</strong>，用于存放局部变量、方法参数等信息。</li>
<li>方法区：用于存储类的信息、常量池等数据</li>
<li>本地方法栈：用于存储本地方法的执行环境</li>
<li>程序计数器：用于记录当前线程执行的字节码指令的位置。</li>
</ul>
<h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>JVM的类加载是通过 ClassLoader 及其子类来完成的，站在 Java 虚拟机的角度来讲，只存在两种不同的类加载器：</p>
<ul>
<li>启动类加载器：<em>Bootstrap ClassLoader</em>不继承自ClassLoader抽象类，因为它不是一个普通的Java类，底层由C++编写，是JVM自身的一部分，已嵌入到了JVM内核当中，当JVM启动后，Bootstrap ClassLoader也随着启动，负责加载完核心类库后，并构造<em>Extension ClassLoader</em>和<em>App ClassLoader</em>类加载器。启动类加载器是无法被 Java 程序直接引用的。</li>
<li>其他类加载器：这些类加载器都由 Java 语言实现，独立于虚拟机之外，并且全部继承自ClassLoader抽象类，这些类加载器需要由启动类加载器加载到内存中之后才能去加载其他的类。</li>
</ul>
<p><img src="/images/javase/jvm-classloader.png" alt="类的层次关系和加载顺序"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// BootstrapClassLoader has no parent ClassLoader</span></span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                <span class="comment">// Subclass override</span></span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h3><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、对象实例化、垃圾收集、对象终结、卸载类型。</p>
<p><img src="/images/javase/class-lifecycle.png" alt="类的生命周期"></p>
<p>其中类加载的过程包括了加载、连接、初始化三个阶段：</p>
<ol>
<li>加载：查找并且加载类的二进制数据</li>
<li>连接：<ul>
<li>验证：确保被加载类的正确性（安全性校验）</li>
<li>准备：为类的静态变量分配内存并将其初始化为默认值（默认初始化）</li>
<li>解析：把类中的符号引用转换为直接引用</li>
</ul>
</li>
<li>初始化：为类的静态变量赋予正确的初始值（显式初始化）</li>
</ol>
<h4 id="加载阶段"><a href="#加载阶段" class="headerlink" title="加载阶段"></a>加载阶段</h4><p>类的加载简单来说，就是将class文件中的二进制数据读取到内存中，将其放在方法区中，然后在堆内存中创建一个java.lang.Class对象，用来封装在方法区的数据结构。</p>
<p>加载是类加载过程的第一个阶段，在加载阶段，虚拟机需要完成以下三件事情：</p>
<ul>
<li>通过一个类的全限定名来获取其定义的二进制字节流。</li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>
<li>在 Java 堆中生成一个代表这个类的 java.lang.Class 对象，作为对方法区中这些数据的访问入口。</li>
</ul>
<p>相对于类加载的其他阶段而言，加载阶段是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。</p>
<p>加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在 Java 堆中也创建一个 java.lang.Class 类的对象，这样便可以通过该对象访问方法区中的这些数据。</p>
<h4 id="连接阶段"><a href="#连接阶段" class="headerlink" title="连接阶段"></a>连接阶段</h4><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>Java 是与平台无关的语言，这得益于 Java 源代码编译后生成的存储字节码的文件，即 Class 文件，以及Java虚拟机的实现。不仅使用 Java 编译器可以把 Java 代码编译成存储字节码的 Class 文件，使用 JRuby 等其他语言的编译器也可以把程序代码编译成 Class 文件，虚拟机并不关心 Class 的来源是什么语言，只要它符合一定的结构，就可以在 Java 中运行。Java 语言中的各种变量、关键字和运算符的语义最终都是由多条字节码命令组合而成的，因此字节码命令所能提供的语义描述能力肯定会比 Java 语言本身更强大，这便为其他语言实现一些有别于 Java 的语言特性提供了基础，而且这也正是在类加载时要进行安全验证的原因。</p>
<ol>
<li>文件格式验证<ul>
<li>魔数因子是否正确（0xCAFEBABE）</li>
<li>主从版本号是否符合当前虚拟机</li>
<li>常量池中的常量类型是不是不支持</li>
<li>etc</li>
</ul>
</li>
<li>元数据验证<ul>
<li>是否有父类</li>
<li>父类是不是允许继承</li>
<li>是否覆盖了父类的final字段</li>
<li>其他语义检查</li>
</ul>
</li>
<li>字节码验证</li>
<li>符号引用验证</li>
</ol>
<h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><p>准备阶段就是给类变量分配默认初始值。</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>(byte)0</td>
</tr>
<tr>
<td>char</td>
<td>‘\u0000’</td>
</tr>
<tr>
<td>short</td>
<td>(short)0</td>
</tr>
<tr>
<td>int</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>0L</td>
</tr>
<tr>
<td>float</td>
<td>0.0f</td>
</tr>
<tr>
<td>double</td>
<td>0.0d</td>
</tr>
<tr>
<td>boolean</td>
<td>false</td>
</tr>
<tr>
<td>reference</td>
<td>null</td>
</tr>
</tbody>
</table>
<h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><ul>
<li>类或接口的解析</li>
<li>字段解析 </li>
<li>类方法解析</li>
<li>接口方法解析</li>
</ul>
<h4 id="类初始化阶段"><a href="#类初始化阶段" class="headerlink" title="类初始化阶段"></a>类初始化阶段</h4><p>初始化是类加载过程的最后一步，到了此阶段，才真正开始执行类中定义的 Java 程序代码。在准备阶段，类变量已经被赋过一次系统要求的初始值，而在初始化阶段，则是执行类构造器<code>&lt;clinit&gt;</code>方法的过程。换句话说，其实初始化阶段做的事情就是给static变量赋予用户指定的值以及执行静态代码块。</p>
<ul>
<li><code>&lt;clinit&gt;</code>方法是由编译器自动收集类中的所有<em>类变量</em>的赋值动作和<em>静态语句块</em>中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句中可以赋值，但是不能访问。</li>
<li><code>&lt;clinit&gt;</code>方法与类的构造函数不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的<code>&lt;clinit&gt;</code>方法执行之前，父类的<code>&lt;clinit&gt;</code>方法已经执行完毕。因此，在虚拟机中首先被执行的是Object的<code>&lt;clinit&gt;</code>方法。</li>
<li><code>&lt;clinit&gt;</code>方法对于类或接口来说并不是必须的，如果一个类中没有静态语句块，也没有对类变量的赋值操作，那么编译器可以不为这个类生成<code>&lt;clinit&gt;</code>方法。</li>
<li>接口中不能使用静态语句块，但仍然有类变量初始化的赋值操作，因此接口与类一样会生成<code>&lt;clinit&gt;</code>方法。但是接口与类不同的是：执行接口的<code>&lt;clinit&gt;</code>方法不需要先执行父接口的<code>&lt;clinit&gt;</code>方法，只有当父接口中定义的变量被使用时，父接口才会被初始化。另外，接口的实现类在初始化时也一样不会执行接口的<code>&lt;clinit&gt;</code>方法。</li>
<li>虚拟机会保证一个类的<code>&lt;clinit&gt;</code>方法的线程安全性，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<code>&lt;clinit&gt;</code>方法，其他线程都需要阻塞等待，直到活动线程执行<code>&lt;clinit&gt;</code>方法完毕。如果在一个类的<code>&lt;clinit&gt;</code>方法中有耗时很长的操作，那就可能造成多个线程阻塞，在实际应用中这种阻塞往往是很隐蔽的。</li>
</ul>
<p>Java虚拟机规范为类的初始化时机做了严格定义：在首次主动使用时初始化。这个规则直接影响着类装载、连接和初始化类的机制，因为在类型被初始化之前它必须已经被连接，然而在连接之前又必须保证它已经被装载了。</p>
<p>说了这么多，类的初始化时机就是在首次主动使用时，那么，哪些情形下才符合首次主动使用的要求呢？</p>
<p>首次主动使用的情形：</p>
<ul>
<li>遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类还没有进行过初始化，则需要先触发其初始化。生成这四条指令最常见的 Java 代码场景是：使用 new 关键字实例化对象时、读取或设置一个类的静态字段时（被static修饰又被final修饰的，已在编译期把结果放入常量池的静态字段除外）、以及调用一个类的静态方法时。 </li>
<li>使用 Java.lang.refect 包的方法对类进行反射调用时，如果类还没有进行过初始化，则需要先触发其初始化。 </li>
<li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。 </li>
<li>当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先执行该主类。</li>
</ul>
<p>除了以上几种情形以外，所有其它使用Java类型的方式都是被动使用的，它们不会导致类的初始化。</p>
<p>被动使用的几种情形：</p>
<ul>
<li>对于静态字段，只有直接定义这个字段的类才会被初始化，因此，通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化。</li>
<li>常量在编译阶段会存入调用它的类的常量池中，本质上没有直接引用到定义该常量的类，因此不会触发定义常量的类的初始化。</li>
<li>通过数组定义来引用类，不会触发类的初始化。</li>
</ul>
<p><code>&lt;clinit&gt;</code>和<code>&lt;init&gt;</code>方法的区别：</p>
<ul>
<li><code>&lt;clinit&gt;</code>是类构造器方法。Java编译器把所有的类变量初始化语句和静态语句块中的语句通通收集到 <code>&lt;clinit&gt;</code> 方法内，该方法只能被 JVM 调用，专门承担初始化工作。</li>
<li><code>&lt;init&gt;</code>是对象构造器方法。一旦一个类被装载、连接和初始化，它就随时可以使用了。对象实例化和初始化时就是对象生命的起始阶段的活动，Java编译器在编译每个类时都会为该类至少生成一个实例初始化方法即 <code>&lt;init&gt;</code> 方法。</li>
</ul>
<p><code>final</code>、<code>static</code>、<code>static final</code>修饰的字段赋值的区别： </p>
<ul>
<li><code>static</code>修饰的字段在类加载过程中的准备阶段被初始化为 0 或 null 等默认值，而后在初始化阶段（触发类构造器）才会被赋予代码中设定的值，如果没有设定值，那么它的值就为默认值。</li>
<li><code>final</code>修饰的字段在运行时被初始化（可以直接赋值，也可以在对象构造器中赋值），一旦赋值便不可更改； </li>
<li><code>static final</code>修饰的字段在 Javac 时生成 ConstantValue 属性，在类加载的准备阶段根据ConstantValue的值为该字段赋值，它没有默认值，必须显式地赋值，否则 Javac 时会报错。可以理解为在编译期即把结果放入了常量池中。</li>
</ul>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>方法区是各个线程共享的内存区域，它用于存储已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据，垃圾收集行为在这个区域比较少出现。该区域的内存回收目标主要针是对废弃常量的和无用类的回收。方法区域又被称为“永久代”。</p>
<h2 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h2><p>堆内存用来存放由new创建的对象和数组，在堆中分配的内存，由Java虚拟机的自动垃圾回收器来管理。</p>
<p>在堆中产生了一个数组或对象后，还可以在栈中定义一个特殊的变量，让栈中这个变量的取值等于数组或对象在堆内存中的首地址，栈中的这个变量就成了数组或对象的引用变量。引用变量就相当于是为数组或对象起的一个名称，以后就可以在程序中使用栈中的引用变量来访问堆中的数组或对象。</p>
<p>引用变量是普通的变量，定义时在栈中分配，引用变量在程序运行到其作用域之外后被释放。而数组和对象本身在堆中分配，即使程序运行到使用new产生数组或者对象的语句所在的代码块之外，数组和对象本身占据的内存不会被释放，数组和对象在没有引用变量指向它的时候，才变为垃圾，不能再被使用，但仍然占据内存空间不放，在随后的一个不确定的时间被垃圾回收器收走释放掉，这也是Java比较占内存的原因。</p>
<h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><p>存放基本数据类型的数据和对象的引用，但对象本身不存在栈中，而是存放在堆中，实际上，栈中的引用变量指向堆内存中的数组和对象，这就是Java中的指针。</p>
<p>在函数中定义的一些基本类型的变量数据和对象的引用变量都是在函数的栈内存中分配的，当在一段代码块定义一个变量时，Java就会在栈中为这个变量分配内存空间，当该变量退出该作用域后，Java会自动释放掉为该变量所分配的内存空间，该内存空间可以立即被另作他用。</p>
<h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>本地方法栈与Java虚拟机栈作用非常类似，其区别是：Java虚拟机栈是为虚拟机执行Java方法服务，而本地方法栈是为虚拟机调用的操作系统本地方法服务。</p>
<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>JVM是基于栈的体系结构来执行class字节码的。线程创建后，都会产生程序计数器(PC)和栈(Stack)，程序计数器存放下一条要执行的指令在方法内的偏移量，栈中存放一个个栈帧，每个栈帧对应着每个方法的每次调用。当线程在执行一个 Java 方法时，该计数器记录的是正在执行的虚拟机字节码指令的地址，当线程在执行的是Native方法时，该计数器的值为空。</p>
<h2 id="GC收集器"><a href="#GC收集器" class="headerlink" title="GC收集器"></a>GC收集器</h2><h3 id="垃圾对象的判定"><a href="#垃圾对象的判定" class="headerlink" title="垃圾对象的判定"></a>垃圾对象的判定</h3><p>Java中的垃圾回收一般是在堆中进行，因为堆中存放着几乎所有的对象实例，垃圾收集器对堆中的对象进行回收前，要先确定这些对象是否还有用，判定对象是否为垃圾对象有如下算法：引用计数算法、引用可达性分析算法。</p>
<blockquote>
<p>对象引用：如果 reference 类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用。</p>
</blockquote>
<h4 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h4><p>给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加 1，当引用失效时，计数器值就减1，任何时刻计数器都为 0 的对象就是不可能再被使用的。</p>
<p>引用计数算法的实现简单，判定效率也很高，在大部分情况下它都是一个不错的选择，但 Java 语言并没有选择这种算法来进行垃圾回收，主要原因是它很难解决对象之间的相互循环引用问题。</p>
<h4 id="引用可达性分析算法"><a href="#引用可达性分析算法" class="headerlink" title="引用可达性分析算法"></a>引用可达性分析算法</h4><p>Java是采用引用可达性分析算法来判定对象是否存活的。这种算法的基本思路是通过一系列名为<em>GC Roots</em>的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到<em>GC Roots</em>没有任何引用链相连时，就证明此对象是不可用的。GC会收集那些不是<em>GC Roots</em>且没有被<em>GC Roots</em>引用的对象。</p>
<p>在 Java 语言里，可作为<a href="https://help.eclipse.org/mars/topic/org.eclipse.mat.ui.help/concepts/gcroots.html" target="_blank" rel="noopener"><em>GC Roots</em></a>的对象包括下面几种：</p>
<ul>
<li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li>
<li>方法区中的类静态属性引用的对象</li>
<li>方法区中的常量引用的对象</li>
<li>本地方法栈中 JNI（Native 方法）的引用对象</li>
</ul>
<h3 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3><h4 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h4><p>首先标记出所需回收的对象，在标记完成后统一回收掉所有被标记的对象，它的标记过程其实就是前面的引用可达性分析算法中判定垃圾对象的标记过程。</p>
<ul>
<li>优点：不需要进行对象的移动，并且仅对不存活的对象进行处理，在存活对象比较多的情况下极为高效。</li>
<li>缺点：标记和清除过程的效率都不高，并且标记清除后会产生大量不连续的内存碎片。</li>
</ul>
<h4 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h4><p>该算法标记的过程与标记—清除算法中的标记过程一样，但对标记后出的垃圾对象的处理情况有所不同，它不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p>
<ul>
<li>优点：经过整理之后，新对象的分配只需要通过指针碰撞便能完成，相当简单；使用这种方法空闲区域的位置是始终可知的，也不会再有碎片的问题了。</li>
<li>缺点：GC暂停的时间会增长，因为需要将所有的对象都拷贝到一个新的地方，还得更新它们的引用地址。</li>
</ul>
<h4 id="标记-复制算法"><a href="#标记-复制算法" class="headerlink" title="标记-复制算法"></a>标记-复制算法</h4><p>将可用内存按容量划分为大小相等的两块，每次只是用其中一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</p>
<ul>
<li>优点：内存分配时不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。</li>
<li>缺点：需要一块能容纳下所有存活对象的额外的内存空间，因此，可一次性分配的最大内存缩小了一半。</li>
</ul>
<h4 id="分代收集"><a href="#分代收集" class="headerlink" title="分代收集"></a>分代收集</h4><p>当前商业虚拟机的垃圾收集都采用分代收集，它根据对象的存活周期的不同将内存划分为几块，一般是把 Java 堆分为新生代和老年代。在新生代中，每次垃圾收集时都会发现有大量对象死去，只有少量存活，因此可选用标记-复制算法来完成收集，而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用标记—清除算法或标记—整理算法来进行回收。</p>
<h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><p>垃圾收集器是内存回收算法的具体实现，Java 虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同厂商、不同版本的虚拟机所提供的垃圾收集器都可能会有很大的差别。Sun HotSpot 虚拟机 1.6 版包含了如下收集器：Serial、ParNew、Parallel Scavenge、CMS、Serial Old、Parallel Old。这些收集器以不同的组合形式配合工作来完成不同分代区的垃圾收集工作。</p>
<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。在 Java 中，堆被划分成两个不同的区域：新生代(Young)、老年代(Old)。新生代(Young)又被划分为三个区域：Eden、From Survivor、To Survivor。这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>
<p><img src="/images/javase/jvm-heap-structure.png" alt="JVM Heap Structure">  </p>
<p>默认的，新生代(Young)与老年代(Old)的比例的值为1:2(该值可以通过参数 –XX:NewRatio 来指定)，新生代(Young)三个区域内存大小比例默认为8:1:1(可以通过参数 –XX:SurvivorRatio 来设定)。</p>
<ul>
<li>新生代：大多数情况下，对象在Eden中分配，当Eden没有足够空间时，会触发一次<em>Minor GC</em></li>
<li>老年代：用于存放经过几次<em>Minor GC</em>之后依旧存活的对象，当老年代的空间不足时，会触发<em>Major GC</em>或<em>Full GC</em></li>
</ul>
<p><strong>内存的分配策略</strong></p>
<ul>
<li>对象优先在 Eden 分配</li>
<li>大对象直接进入老年代</li>
<li>长期存活的对象将进入老年代</li>
</ul>
<p><strong>垃圾回收策略</strong></p>
<ul>
<li>新生代GC(Minor GC)：发生在新生代的垃圾收集动作，因为 Java 对象大多都具有朝生夕灭的特性，因此Minor GC 非常频繁，一般回收速度也比较快。</li>
<li>老年代GC(Major GC/Full GC)：发生在老年代的 GC，出现了 Major GC，经常会伴随至少一次 Minor GC。由于老年代中的对象生命周期比较长，因此 Major GC 并不频繁，一般都是等待老年代满了后才进行Full GC，而且其速度一般会比 Minor GC 慢 10 倍以上。另外，如果分配了 Direct Memory，在老年代中进行 Full GC时，会顺便清理掉 Direct Memory 中的废弃对象。</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://tutorials.jenkov.com/java-concurrency/java-memory-model.html" target="_blank" rel="noopener">Java Concurrency</a></li>
</ul>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Goodbye 2018 Hello 2019</title>
    <url>/2018/12/31/life/hello-2019/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="/images/life/best-wishes-2019.gif" alt="Hello 2019"> </p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>币圈交易</title>
    <url>/2025/06/21/life/trading-crypto/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>利润是跌出来的，每一轮回调都代表着我们要开始新一轮的财富暴涨了，所以交易的秘诀很简单：</p>
<ul>
<li>如果你能做到不贪心，你就已经领先了50%的人了；</li>
<li>如果你能判断对趋势和方向顺势而为，你就胜过70%的人了；</li>
<li>如果你能专注在价格回调的时候入场，你就会击败80%的人；</li>
<li>如果你能严格地控制单笔的持仓比例，做好资金管理，你就会跻身顶尖的交易者行列，胜过99%的人了。</li>
</ul>
<p><strong>交易不是拼的天赋，而是拼的纪律和耐心。</strong></p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>交易的反思</title>
    <url>/2022/10/02/life/trading/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ol>
<li><p>关于止损</p>
<p>如果你是按你的思路去买，也按你的计划去卖，在“你的理论是正确的”这个前提下，是不是会出现割完之后上涨的情况？</p>
<p>如果股价上涨，必然是出现了一些你不可预测的因素，最常见的就是“某些大资金引导股价上升”，但这个是你不能掌握的；如果你不割肉，就是“赌”大资金会来抬高股价，那万一没有呢？这样下去只会套得更多！</p>
</li>
</ol>
<ol start="2">
<li><p>关于亏损</p>
<p>每次赚钱后都会有一次大亏！这种现象绝不是偶然的，为什么？</p>
<p>当一个人成功后就会增加自信心，连续成功就会自信心爆棚，对自己的判断百分百认可，绝不会让自己失去任何赚钱机会。看到一个好股就马上买，如果买错小亏，不会让自己的信心减少多少，只有大亏时才会使自已信心大幅下降。之后出手谨慎，不断反思，失望、痛苦、懊悔、不甘……</p>
<p>在一个自由买卖的市场里，亏钱没有谁的错，错只在自己！我一直明白最大的问题是我自己，性格缺陷让我成为股市里的残疾人。我明知哪些钱能賺，却妄想掌控所有，不让任何机会错过；我明知做一件事的风险，却妄想会不会发生奇迹；我明知慢即是快的道理，却从未放慢自己的脚步。</p>
</li>
</ol>
<ol start="3">
<li><p>关于踏空</p>
<p>为什么踏空比亏钱更难受？正常逻辑不应该这样，但实际也普遍存在，踏空是别人赚钱了而你没有！你认为如果你持仓了也必然会赚这么多，所个你把踏空看作是一种亏损。这种亏损与你持仓亏损的区别在于：持仓亏损是我技不如人，买错了，而踏空并不能证明我水平差，只是我没有参与！有这种感觉的人，大部分还是“自我认可度”过高！</p>
</li>
</ol>
<ol start="4">
<li><p>关于如何看待别人赚钱</p>
<p>要学会看别人賺钱。如果一个市场没人赚钱，那必定没人来参与，只是这钟赚钱效应的传播，才使得有人不断加入，所以必定是有一部分人是赚钱的，牛市里这部分人比例高，熊市比例低，因此不要妄想自己赚钱而别人亏钱。</p>
<p>在市场上赚钱有两种：一种是能力，一种是运气。运气赚的钱不要羡慕，能力赚的钱不要眼红。要学习别人的优点，不要去比较谁赚得多、去超越别人，把不确定性的操作，从主现上认可，那就是赌！</p>
</li>
</ol>
<ol start="5">
<li><p>关于一致性</p>
<p>忘掉每一次交易的盈亏，你的交易应该是按系统来，而不是随着情绪买入或卖出。</p>
<p>空仓等待最佳买点到来，最佳买点应该是确定性最大的买入点，如此下去才是复利。</p>
</li>
</ol>
<ol start="6">
<li><p>关于满仓</p>
<p>为什么很多人喜欢满仓一个股？想一次爆赚，这是贪婪，想靠赌来快速增值，这是急功近利。这类人是由人类最原始的欲望赌性驱动，只想获得当下的利益，称之为低级赌徒；而高级赌徒则目光长远，他们追求的是长期利益。</p>
</li>
</ol>
<ol start="7">
<li><p>关于知行合一</p>
<p>为什么很难知行合一？这主要是对行为所带来的结果没有深刻认识，不断试错，不断体会痛苦，才能知行合一，忘掉痛苦，就会随心所欲。</p>
</li>
</ol>
<ol start="8">
<li><p>关于无我</p>
<p>当你还在为错失机会痛苦时，证明你内心还没有达到“无我”的境界，“无我”就是屏蔽自己的主观意识，达到“实事求是”的一种状态。</p>
<p>正确的操作并不一定会赚钱，但它是风险最小的一种做法。如果因为哪一次没有赚到钱就改变自己的做法，就会成为亏损的开始。</p>
</li>
</ol>
<ol start="9">
<li><p>关于认知与财富</p>
<p>你永远赚不到超出你认知范围外的钱，除非你靠运气，但是靠运气赚到的钱，最后往往又会靠实力亏掉，这是一种必然。你所赚的每一分钱，都是你对这个世界认知的变现，而你所亏的每一分钱，都是因为对这个世界认知有缺陷。这个世界最大的公平在于：当一个人的财富大于自己认知的时候，这个社会有一百种方法收割你直到你的认知和财富相匹配为止。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux - CentOS</title>
    <url>/2018/11/27/linux/centos/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改IP为静态IP</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/sysconfig/network-scripts/ifcfg-eno16777736</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#网卡自动启动</span></span></span><br><span class="line">ONBOOT=yes</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#DHCP改成静态</span></span></span><br><span class="line">BOOTPROTO=static</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#静态IP</span></span></span><br><span class="line">IPADDR=192.168.8.128</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#网关</span></span></span><br><span class="line">GATEWAY=192.168.8.1</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#子网掩码</span></span></span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置DNS</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/NetworkManager/NetworkManager.conf</span></span><br><span class="line"></span><br><span class="line">[main]</span><br><span class="line">plugins=ifcfg-rh</span><br><span class="line">dns=none</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/resolv.conf</span></span><br><span class="line"></span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改主机名</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hostnamectl <span class="built_in">set</span>-hostname linux128</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/hostname</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改主机名到IP的映射(相当于配置了一个本地的DNS)</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/hosts</span></span><br><span class="line"></span><br><span class="line">127.0.0.1       localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1             localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line">192.168.8.128   linux128</span><br><span class="line">192.168.8.129   linux129</span><br><span class="line">192.168.8.130   linux130</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重启网卡</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart network</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#防火墙启用、停用、开机启动、禁止开机启动、查看状态</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl &#123;start|stop|<span class="built_in">enable</span>|<span class="built_in">disable</span>|status&#125; firewalld.service</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看当前模式</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl get-default</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置默认启动图形界面</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">set</span>-default graphical.target</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置默认启动命令行</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">set</span>-default multi-user.target</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重启、关机、待机、休眠</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl &#123;reboot|poweroff|<span class="built_in">suspend</span>|hibernate&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看所有已安装的软件包</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum list installed</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#更新所有已安装的软件包</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum upgrade</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看当前时间</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> date <span class="string">"+%Y-%m-%d %H:%M:%S"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#同步网络时间</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install ntpdate</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ntpdate ntp1.aliyun.com</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装文件传输工具</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install curl wget scp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装Nmap</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install nmap</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#检查开放端口</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nmap 127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装GCC编译器</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum list|grep gcc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install gcc</span></span><br></pre></td></tr></table></figure>
<h2 id="开发软件安装"><a href="#开发软件安装" class="headerlink" title="开发软件安装"></a>开发软件安装</h2><h3 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a><a href="https://www.apache.org/dist/zookeeper/" target="_blank" rel="noopener">Zookeeper</a></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> scp -o port=22 zookeeper-3.3.6.tar.gz root@192.168.8.128:/opt/zookeeper-3.3.6.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf zookeeper-3.3.6.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir /usr/<span class="built_in">local</span>/zookeeper</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mv zookeeper-3.3.6 /usr/<span class="built_in">local</span>/zookeeper</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/zookeeper/zookeeper-3.3.6</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir data logs</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改配置</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp conf/zoo_sample.cfg conf/zoo.cfg</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi conf/zoo.cfg</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#临时数据存放目录</span></span></span><br><span class="line">dataDir=/usr/local/zookeeper/zookeeper-3.3.6/data</span><br><span class="line">dataLogDir=/usr/local/zookeeper/zookeeper-3.3.6/logs</span><br><span class="line">clientPort=2181</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#书写格式：server.服务器编号=服务器地址：通信端口：选举端口</span></span></span><br><span class="line">server.1=192.168.8.128:2888:3888</span><br><span class="line">server.2=192.168.8.129:2888:3888</span><br><span class="line">server.3=192.168.8.130:2888:3888</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#创建myid文件并写入服务器编号</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch data/myid</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#server.1</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> 1 &gt; data/myid</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#server.2</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> 2 &gt; data/myid</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#server.3</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> 3 &gt; data/myid</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启动&amp;检查运行状态</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/zkServer.sh &#123;start|restart|status|stop&#125;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat zookeeper.out</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置开机启动</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/systemd/system/zookeeper.service</span></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=zooKeeper</span><br><span class="line">After=syslog.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">SyslogIdentifier=zookeeper</span><br><span class="line">TimeoutStartSec=10min</span><br><span class="line">Environment="JAVA_HOME=/usr/local/jdk/jdk1.8.0_77"</span><br><span class="line">ExecStart=/usr/local/zookeeper/zookeeper-3.3.6/bin/zkServer.sh start</span><br><span class="line">ExecStop=/usr/local/zookeeper/zookeeper-3.3.6/bin/zkServer.sh stop</span><br><span class="line">ExecReload=/usr/local/zookeeper/zookeeper-3.3.6/bin/zkServer.sh restart</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重新加载配置文件让配置生效</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl daemon-reload</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启用、停用、开机启动、禁止开机启动、查看状态</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl &#123;start|stop|<span class="built_in">enable</span>|<span class="built_in">disable</span>|status&#125; zookeeper.service</span></span><br></pre></td></tr></table></figure>
<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a><a href="http://download.redis.io/releases/" target="_blank" rel="noopener">Redis</a></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wgwt http://download.redis.io/releases/redis-5.0.0.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf redis-5.0.0.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir /usr/<span class="built_in">local</span>/redis</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> redis-5.0.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装依赖库</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install tcl</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#编译安装(若没有指定安装目录默认安装在/usr/local/bin目录下)</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make PREFIX=/usr/<span class="built_in">local</span>/redis/redis-5.0.0 install</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改配置</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp redis.conf /usr/<span class="built_in">local</span>/redis/redis-5.0.0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis/redis-5.0.0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi redis.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#允许远程访问(默认只能本机访问)</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#允许其他主机连接到该Redis</span></span></span><br><span class="line">protected-mode no</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启用后台运行</span></span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启用集群</span></span></span><br><span class="line">cluster-enabled yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启动&amp;测试</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/redis-server redis.conf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/redis-cli -h 127.0.0.1 -p 6379</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装ruby环境</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install ruby</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装ruby-redis-client</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://rubygems.org/downloads/redis-3.2.1.gem</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gem install redis-3.2.1.gem</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#执行redis-trib.rb脚本创建集群</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp /opt/redis-3.2.1/src/redis-trib.rb /usr/<span class="built_in">local</span>/redis/redis-5.0.0</span></span><br><span class="line">./redis-trib.rb create --replicas 0 192.168.8.128:6379 192.168.8.129:6379 192.168.8.130:6379</span><br></pre></td></tr></table></figure>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a><a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noopener">MySQL</a></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#检查是否安装mariadb</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -qa | grep mariadb</span></span><br><span class="line">mariadb-libs-5.5.50-1.el7_2.x86_64</span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -e --nodeps mariadb-libs-5.5.50-1.el7_2.x86_64</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -xvf mysql-8.0.15-linux-glibc2.12-x86_64.tar.xz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mv mysql-8.0.15-linux-glibc2.12-x86_64 /usr/<span class="built_in">local</span>/mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi my.cnf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> This will be passed to all mysql clients</span></span><br><span class="line">[client]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置mysql客户端连接服务端时默认使用的端口</span></span></span><br><span class="line">port=3306</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置mysql客户端默认字符集</span></span></span><br><span class="line">default_character_set=utf8mb4</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The MySQL server</span></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#服务端使用的端口</span></span></span><br><span class="line">port=3306</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#允许的最大连接数</span></span></span><br><span class="line">max_connections=10000</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#允许的连接失败次数</span></span></span><br><span class="line">max_connect_errors=10</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#允许的数据包大小</span></span></span><br><span class="line">max_allowed_packet=64M</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#服务端使用的字符集默认为utf8</span></span></span><br><span class="line">character_set_server=utf8mb4</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#创建新表时默认的存储引擎</span></span></span><br><span class="line">default_storage_engine=INNODB</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置mysql事务隔离级别</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">transaction_isolation=REPEATABLE-READ</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置默认的密码加密方式</span></span></span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置mysql的安装目录</span></span></span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置mysql数据库数据的存放目录</span></span></span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#添加用户组</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> groupadd mysql</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#添加用户(-s /bin/false 参数指定mysql用户仅拥有所有权而无登录权限)</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> useradd -r -g mysql -s /bin/<span class="literal">false</span> mysql</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改目录拥有者</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chown -R mysql:mysql ./</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#数据库初始化</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/mysqld --initialize --console</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#随机生成的临时密码(后面登录使用)</span></span></span><br><span class="line">[Server] A temporary password is generated for root@localhost: J&amp;el*7Q37h?Z</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置文件拥有者(u)、组用户(g)、其他用户(o)的目录权限：读(r=4)、写(w=2)、执行(x=1)</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod -R 777 /usr/<span class="built_in">local</span>/mysql/data</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启动mysql服务</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./support-files/mysql.server &#123;start|stop|restart|reload|force-reload|status&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/mysql -uroot -p</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改root用户密码</span></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'root'</span>;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置允许远程登录</span></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use mysql;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> UPDATE user SET host = <span class="string">'%'</span> WHERE user = <span class="string">'root'</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重启mysql服务</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./support-files/mysql.server restart</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置开机启动</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/systemd/system/mysql.service</span></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=mysql</span><br><span class="line">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=mysql</span><br><span class="line">Group=mysql</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/mysql/support-files/mysql.server start</span><br><span class="line">ExecStop=/usr/local/mysql/support-files/mysql.server stop</span><br><span class="line">ExecReload=/usr/local/mysql/support-files/mysql.server reload</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重新加载配置文件让配置生效</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl daemon-reload</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启用、停用、开机启动、禁止开机启动、查看状态</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl &#123;start|stop|<span class="built_in">enable</span>|<span class="built_in">disable</span>|status&#125; mysql.service</span></span><br></pre></td></tr></table></figure>
<h4 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a><a href="https://dev.mysql.com/doc/refman/8.0/en/replication-howto.html" target="_blank" rel="noopener">主从复制</a></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi my.cnf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#Master(192.168.8.129)配置</span></span></span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">server_id=1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重启服务</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./support-files/mysql.server restart</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/mysql -uroot -p</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#创建用于同步的账号并授权</span></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CREATE USER <span class="string">'repl'</span>@<span class="string">'192.168.8.130'</span> IDENTIFIED BY <span class="string">'repl'</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT REPLICATION SLAVE ON *.* TO <span class="string">'repl'</span>@<span class="string">'192.168.8.130'</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show master status;</span></span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000001 |     1679 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SHOW VARIABLES LIKE <span class="string">'server_id'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#Slave(192.168.8.130)配置</span></span></span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">server_id=2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重启服务</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./support-files/mysql.server restart</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/mysql -uroot -p</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#执行同步语句</span></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CHANGE MASTER TO master_host=<span class="string">'192.168.8.129'</span>, master_port=3306, master_user=<span class="string">'repl'</span>, master_password=<span class="string">'repl'</span>, master_log_file=<span class="string">'mysql-bin.000001'</span>, master_log_pos=1679;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启动slave同步进程</span></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> start slave;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看slave状态</span></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show slave status\G</span></span><br></pre></td></tr></table></figure>
<h4 id="主主复制"><a href="#主主复制" class="headerlink" title="主主复制"></a>主主复制</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi my.cnf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#Master1(192.168.8.129)配置</span></span></span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">server_id=1</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启用全局事务ID</span></span></span><br><span class="line">gtid_mode=ON</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#强制事务一致</span></span></span><br><span class="line">enforce_gtid_consistency=true</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#需要同步的数据库</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">binlog_do_db=<span class="built_in">test</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#不需要同步的数据库</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">binlog_ignore_db=mysql</span></span><br><span class="line">replicate_wild_ignore_table=mysql.%</span><br><span class="line">replicate_wild_ignore_table=information_schema.%</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#生成奇数的自增(offset: 起始值, increment: 自增幅度)</span></span></span><br><span class="line">auto_increment_offset=1</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#注意：当需要加入新的服务器时，这种方法难以扩展，考虑使用Snowflake算法代替自增ID</span></span></span><br><span class="line">auto_increment_increment=2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重启服务</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./support-files/mysql.server restart</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/mysql -uroot -p</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#创建用于同步的账号并授权</span></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CREATE USER <span class="string">'repl'</span>@<span class="string">'192.168.8.130'</span> IDENTIFIED BY <span class="string">'repl'</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT REPLICATION SLAVE ON *.* TO <span class="string">'repl'</span>@<span class="string">'192.168.8.130'</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#执行同步语句(master_auto_position=&#123;0|1&#125;表示是否基于GTID实现)</span></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CHANGE MASTER TO master_host=<span class="string">'192.168.8.130'</span>, master_port=3306, master_user=<span class="string">'repl'</span>, master_password=<span class="string">'repl'</span>, master_auto_position=1;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启动slave同步进程</span></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> start slave;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看slave状态</span></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show slave status\G</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#Master2(192.168.8.130)配置</span></span></span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">server_id=2</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启用全局事务ID</span></span></span><br><span class="line">gtid_mode=ON</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#强制事务一致</span></span></span><br><span class="line">enforce_gtid_consistency=true</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#需要同步的数据库</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">binlog_do_db=<span class="built_in">test</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#不需要同步的数据库</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">binlog_ignore_db=mysql</span></span><br><span class="line">replicate_wild_ignore_table=mysql.%</span><br><span class="line">replicate_wild_ignore_table=information_schema.%</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#生成偶数的自增(offset: 起始值, increment: 自增幅度)</span></span></span><br><span class="line">auto_increment_offset=2</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#注意：当需要加入新的服务器时，这种方法难以扩展，考虑使用Snowflake算法代替自增ID</span></span></span><br><span class="line">auto_increment_increment=2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重启服务</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./support-files/mysql.server restart</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/mysql -uroot -p</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#创建用于同步的账号并授权</span></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CREATE USER <span class="string">'repl'</span>@<span class="string">'192.168.8.129'</span> IDENTIFIED BY <span class="string">'repl'</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT REPLICATION SLAVE ON *.* TO <span class="string">'repl'</span>@<span class="string">'192.168.8.129'</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#执行同步语句(master_auto_position=&#123;0|1&#125;表示是否基于GTID实现)</span></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CHANGE MASTER TO master_host=<span class="string">'192.168.8.129'</span>, master_port=3306, master_user=<span class="string">'repl'</span>, master_password=<span class="string">'repl'</span>, master_auto_position=1;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启动slave同步进程</span></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> start slave;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看slave状态</span></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show slave status\G</span></span><br></pre></td></tr></table></figure>
<h3 id="Keepalived"><a href="#Keepalived" class="headerlink" title="Keepalived"></a><a href="https://www.keepalived.org/software/" target="_blank" rel="noopener">Keepalived</a></h3><p>Keepalived是一个高性能的服务器高可用或热备解决方案，Keepalived主要用来解决服务器单点故障问题的，通过与Nginx、HAProxy等反向代理的负载均衡服务器配合可实现Web服务端的高可用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://www.keepalived.org/software/keepalived-2.0.17.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf keepalived-2.0.17.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> keepalived-2.0.17</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装依赖库</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install openssl-devel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置安装路径</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/usr/<span class="built_in">local</span>/keepalived</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#编译安装</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/keepalived</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp etc/keepalived/keepalived.conf keepalived.conf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi keepalived.conf</span></span><br><span class="line"></span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    #初始状态为MASTER(当出现其他机器时，最高优先级的会被选为MASTER)</span><br><span class="line">    state MASTER</span><br><span class="line">    #网络接口</span><br><span class="line">    interface eno16777736</span><br><span class="line">    #优先级</span><br><span class="line">    priority 100</span><br><span class="line">    #发VRRP包的时间间隔(即多久进行一次MASTER选举)</span><br><span class="line">    advert_int 1</span><br><span class="line">    #虚拟路由标识(同一集群内需一样)</span><br><span class="line">    virtual_router_id 50</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    #指定VIP地址</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.8.188</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.8.188 3306 &#123;</span><br><span class="line">    #设置运行状态检测时间(单位为秒)</span><br><span class="line">    delay_loop 6</span><br><span class="line">    #设置调度算法</span><br><span class="line">    lb_algo rr</span><br><span class="line">    #设置LVS实现负载均衡的机制</span><br><span class="line">    lb_kind DR</span><br><span class="line">    #会话保持时间(单位为秒)</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    #转发协议类型</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 192.168.8.129 3306 &#123;</span><br><span class="line">        #服务节点的权值</span><br><span class="line">        weight 1</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            #连接超时时间</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            #重连间隔时间</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启动服务(默认使用/etc/keepalived/keepalived.conf配置文件)</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./sbin/keepalived -D -f /usr/<span class="built_in">local</span>/keepalived/keepalived.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看VIP绑定状态验证是否安装成功</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ip addr</span></span><br><span class="line"></span><br><span class="line">inet 192.168.8.129/24 brd 192.168.8.255 scope global eno16777736</span><br><span class="line">inet 192.168.8.188/32 scope global eno16777736</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置开机启动</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/systemd/system/keepalived.service</span></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=keepalived</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/var/run/keepalived.pid</span><br><span class="line">ExecStart=/usr/local/keepalived/sbin/keepalived -D -f /usr/local/keepalived/keepalived.conf</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重新加载配置文件让配置生效</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl daemon-reload</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启用、停用、开机启动、禁止开机启动、查看状态</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl &#123;start|stop|<span class="built_in">enable</span>|<span class="built_in">disable</span>|status&#125; keepalived.service</span></span><br></pre></td></tr></table></figure>
<h4 id="MySQL高可用"><a href="#MySQL高可用" class="headerlink" title="MySQL高可用"></a>MySQL高可用</h4><p>Keepalived实现高可用的基本思路：集群中的MASTER和BACKUP角色能进行切换，是由priority和weight共同决定的。例如，初始状态时，MASTER节点的priority为100，BACKUP节点的priority为90，各个节点通过脚本监控各自的服务是否正常，如果监控到服务发生异常，则priority减少weight，这样，最大priority值的节点就会被选举为MASTER节点。所以，为了保证脚本执行成功或失败后能触发MASTER和BACKUP切换，通常设置weight的值大于MASTER与BACKUP节点的priority值之差。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi keepalived.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#Master(192.168.8.129)配置</span></span></span><br><span class="line"></span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">    script_user mysql</span><br><span class="line">    enable_script_security</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">监控mysql服务的脚本</span></span><br><span class="line">vrrp_script check_mysql &#123;</span><br><span class="line">    #脚本内容或脚本文件</span><br><span class="line">    script /usr/local/keepalived/check_mysql.sh</span><br><span class="line">    #执行脚本间隔时间(默认1秒)</span><br><span class="line">    interval 1</span><br><span class="line">    #按此权重调整优先级(当mysql服务不可用时，该节点权值减少10，这样权值为95的节点就会成为MASTER)</span><br><span class="line">    weight -10</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    #初始状态为MASTER(当出现其他机器时，最高优先级的会被选为MASTER)</span><br><span class="line">    state MASTER</span><br><span class="line">    #网络接口</span><br><span class="line">    interface eno16777736</span><br><span class="line">    #优先级</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    virtual_router_id 50</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.8.188</span><br><span class="line">    &#125;</span><br><span class="line">    #服务运行状态检测脚本</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_mysql</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.8.188 3306 &#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind DR</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 192.168.8.129 3306 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#Backup(192.168.8.130)配置</span></span></span><br><span class="line"></span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">    script_user mysql</span><br><span class="line">    enable_script_security</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">监控mysql服务的脚本</span></span><br><span class="line">vrrp_script check_mysql &#123;</span><br><span class="line">    #脚本内容或脚本文件</span><br><span class="line">    script /usr/local/keepalived/check_mysql.sh</span><br><span class="line">    #执行脚本间隔时间(默认1秒)</span><br><span class="line">    interval 1</span><br><span class="line">    #按此权重调整优先级(当mysql服务不可用时，该节点权值减少10，这样权值为95的节点就会成为MASTER)</span><br><span class="line">    weight -10</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    #初始状态为BACKUP(当出现其他机器时，最高优先级的会被选为MASTER)</span><br><span class="line">    state BACKUP</span><br><span class="line">    #网络接口</span><br><span class="line">    interface ens33</span><br><span class="line">    #优先级</span><br><span class="line">    priority 95</span><br><span class="line">    advert_int 1</span><br><span class="line">    virtual_router_id 50</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.8.188</span><br><span class="line">    &#125;</span><br><span class="line">    #服务运行状态检测脚本</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_mysql</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.8.188 3306 &#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind DR</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 192.168.8.130 3306 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#检测脚本</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi check_mysql.sh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">counter=`ps aux | grep mysql | grep -v grep | wc -l`</span><br><span class="line">if [ $counter == 0 ]</span><br><span class="line">then</span><br><span class="line">    echo "Failure: MySQL is not running."</span><br><span class="line">    exit 1</span><br><span class="line">else</span><br><span class="line">    echo "Success: MySQL is running."</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> chown -R mysql:mysql ./</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod 755 check_mysql.sh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#默认Keepalived日志存放在系统日志</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tail -50f /var/<span class="built_in">log</span>/messages</span></span><br></pre></td></tr></table></figure>
<h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装Erlang运行环境</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://github.com/rabbitmq/erlang-rpm/releases/download/v21.3.8.5/erlang-21.3.8.5-1.el7.x86_64.rpm</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装依赖</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install openssl-devel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看是否可以重定位(是否可加参数--prefix=&lt;dir&gt;安装到指定目录)</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -qpi erlang-21.3.8.5-1.el7.x86_64.rpm | head</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -i erlang-21.3.8.5-1.el7.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装RabbitMQ</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.7.15/rabbitmq-server-generic-unix-3.7.15.tar.xz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -xvf rabbitmq-server-generic-unix-3.7.15.tar.xz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mv rabbitmq_server-3.7.15 /usr/<span class="built_in">local</span>/rabbitmq</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/rabbitmq</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#添加配置文件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi etc/rabbitmq/rabbitmq.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># See https://github.com/rabbitmq/rabbitmq-server/blob/master/docs/rabbitmq.conf.example</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Allow access to the guest user from anywhere on the network.</span></span></span><br><span class="line">loopback_users.guest = false</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi etc/rabbitmq/rabbitmq-env.conf</span></span><br><span class="line"></span><br><span class="line">HOME=/usr/local/rabbitmq</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Specifies new style config file location</span></span><br><span class="line"><span class="meta">#</span><span class="bash">CONFIG_FILE=/usr/<span class="built_in">local</span>/rabbitmq/etc/rabbitmq/rabbitmq.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装插件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./sbin/rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management rabbitmq_web_stomp rabbitmq_stomp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启动服务</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./sbin/rabbitmq-server</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置开机启动</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/systemd/system/rabbitmq-server.service</span></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=rabbitmq-server</span><br><span class="line">Documentation=https://github.com/rabbitmq/rabbitmq-server/blob/master/docs/rabbitmq-server.service.example</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">Environment="HOME=/usr/local/rabbitmq"</span><br><span class="line">ExecStart=/usr/local/rabbitmq/sbin/rabbitmq-server</span><br><span class="line">ExecStop=/usr/local/rabbitmq/sbin/rabbitmqctl stop</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重新加载配置文件让配置生效</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl daemon-reload</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启用、停用、开机启动、禁止开机启动、查看状态</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl &#123;start|stop|<span class="built_in">enable</span>|<span class="built_in">disable</span>|status&#125; rabbitmq-server.service</span></span><br></pre></td></tr></table></figure>
<h4 id="RabbitMQ集群"><a href="#RabbitMQ集群" class="headerlink" title="RabbitMQ集群"></a>RabbitMQ集群</h4><p>在集群默认模式下，集群中的各个节点保存有相同的元数据（队列的结构），而消息实体只存在其中一个节点上，当该节点发生故障后，其他节点就无法获取到还未消费的消息实体。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#RabbitMQ集群依赖Erlang集群，而Erlang集群为保证不同节点可相互通信必须共享相同的Cookie</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#拷贝Master节点的.erlang.cookie文件到各Backup节点</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> scp .erlang.cookie root@192.168.8.129:/usr/<span class="built_in">local</span>/rabbitmq/.erlang.cookie</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> scp .erlang.cookie root@192.168.8.130:/usr/<span class="built_in">local</span>/rabbitmq/.erlang.cookie</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启动集群中的各个节点</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./sbin/rabbitmq-server -detached</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看Master节点集群状态</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./sbin/rabbitmqctl cluster_status</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#将各Backup节点加入到Master节点组成集群</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./sbin/rabbitmqctl stop_app</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./sbin/rabbitmqctl join_cluster rabbit@linux128</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./sbin/rabbitmqctl start_app</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置集群名称</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./sbin/rabbitmqctl set_cluster_name rabbitmq-cluster</span></span><br></pre></td></tr></table></figure>
<h4 id="RabbitMQ镜像队列"><a href="#RabbitMQ镜像队列" class="headerlink" title="RabbitMQ镜像队列"></a>RabbitMQ镜像队列</h4><p>RabbitMQ的镜像队列机制是最简单的队列HA方案，它通过在集群的基础上增加<em>ha-mode</em>、<em>ha-param</em>等policy选项，可以根据需求将集群中的队列镜像到多个节点上，从而实现高可用，消除集群模式中队列内容单点故障带来的风险。该模式和普通模式不同之处在于，消息实体会主动在镜像节点间同步，而不是在客户端取数据时临时拉取。当然，该模式带来的副作用也很明显，除了降低系统性能外，如果镜像队列数量过多，加之大量的消息进入，集群内部的网络带宽将会被这种同步通讯大大消耗掉，所以通常在对可靠性要求较高的场合中适用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#将所有队列设置为镜像队列</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./sbin/rabbitmqctl set_policy ha-all <span class="string">"^"</span> <span class="string">'&#123;"ha-mode":"all"&#125;'</span></span></span><br></pre></td></tr></table></figure>
<h3 id="HAProxy"><a href="#HAProxy" class="headerlink" title="HAProxy"></a><a href="https://www.haproxy.org/download/" target="_blank" rel="noopener">HAProxy</a></h3><p>HAProxy是可靠的、高性能的用于为基于TCP或HTTP的应用程序提供高可用、负载均衡和代理服务的解决方案，和Nginx（只支持HTTP）负载均衡类似。负载均衡是解决<code>高性能</code>、<code>单点故障（高可用）</code>、<code>扩展性（水平伸缩）</code>的终极解决方案。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://www.haproxy.org/download/2.0/src/haproxy-2.0.1.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf haproxy-2.0.1.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> haproxy-2.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看linux内核版本</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> uname -r</span></span><br><span class="line"></span><br><span class="line">3.10.0-327.36.1.el7.x86_64</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#编译(参数TARGET=linux310指定内核版本)</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make TARGET=linux310 ARCH=x86_64</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make PREFIX=/usr/<span class="built_in">local</span>/haproxy install</span></span><br></pre></td></tr></table></figure>
<h4 id="RabbitMQ负载均衡"><a href="#RabbitMQ负载均衡" class="headerlink" title="RabbitMQ负载均衡"></a>RabbitMQ负载均衡</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /usr/<span class="built_in">local</span>/haproxy/haproxy.cfg</span></span><br><span class="line"></span><br><span class="line">global</span><br><span class="line">    daemon</span><br><span class="line">    log 127.0.0.1 local0</span><br><span class="line">    log 127.0.0.1 local1 notice</span><br><span class="line">    maxconn 4096</span><br><span class="line">    chroot  /usr/local/haproxy</span><br><span class="line">    pidfile /usr/local/haproxy/haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">    log               global</span><br><span class="line">    retries           3</span><br><span class="line">    maxconn           2000</span><br><span class="line">    timeout connect   5s</span><br><span class="line">    timeout client    50s</span><br><span class="line">    timeout server    50s</span><br><span class="line"></span><br><span class="line">listen rabbitmq_cluster</span><br><span class="line">    bind 127.0.0.1:5671</span><br><span class="line">    mode tcp</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server linux128 192.168.8.128:5672 check inter 5000 rise 2 fall 2</span><br><span class="line">    server linux129 192.168.8.129:5672 check inter 5000 rise 2 fall 2</span><br><span class="line">    server linux130 192.168.8.130:5672 check inter 5000 rise 2 fall 2</span><br><span class="line"></span><br><span class="line">listen monitor</span><br><span class="line">    bind 192.168.8.131:8100</span><br><span class="line">    mode http</span><br><span class="line">    stats enable</span><br><span class="line">    stats uri /rabbitmq</span><br><span class="line">    stats refresh 5s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#检查文件是否书写正确</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./sbin/haproxy -f haproxy.cfg -c</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启动服务</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./sbin/haproxy -f haproxy.cfg</span></span><br></pre></td></tr></table></figure>
<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a><a href="https://nginx.org/download/" target="_blank" rel="noopener">Nginx</a></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget http://nginx.org/download/nginx-1.18.0.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf nginx-1.18.0.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir /usr/<span class="built_in">local</span>/nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> nginx-1.18.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#安装依赖库</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install pcre pcre-devel</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install zlib zlib-devel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置安装路径</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/usr/<span class="built_in">local</span>/nginx/nginx-1.18.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#编译安装</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启动&amp;测试</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/nginx-1.18.0/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./sbin/nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl http://127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置开机启动</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/systemd/system/nginx.service</span></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/nginx-1.18.0/sbin/nginx</span><br><span class="line">ExecStop=/usr/local/nginx/nginx-1.18.0/sbin/nginx -s stop</span><br><span class="line">ExecReload=/usr/local/nginx/nginx-1.18.0/sbin/nginx -s reload</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重新加载配置文件让配置生效</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl daemon-reload</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启用、停用、开机启动、禁止开机启动、查看状态</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl &#123;start|stop|<span class="built_in">enable</span>|<span class="built_in">disable</span>|status&#125; nginx.service</span></span><br></pre></td></tr></table></figure>
<h4 id="Nginx高可用"><a href="#Nginx高可用" class="headerlink" title="Nginx高可用"></a>Nginx高可用</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi keepalived.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#Master(192.168.8.129)配置</span></span></span><br><span class="line"></span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">    script_user nginx</span><br><span class="line">    enable_script_security</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">监控nginx服务的脚本</span></span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">    #脚本内容或脚本文件</span><br><span class="line">    script /usr/local/keepalived/check_nginx.sh</span><br><span class="line">    #执行脚本间隔时间(默认1秒)</span><br><span class="line">    interval 1</span><br><span class="line">    #按此权重调整优先级(当nginx服务不可用时，该节点权值减少10，这样权值为95的节点就会成为MASTER)</span><br><span class="line">    weight -10</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    #初始状态为MASTER(当出现其他机器时，最高优先级的会被选为MASTER)</span><br><span class="line">    state MASTER</span><br><span class="line">    #网络接口</span><br><span class="line">    interface eno16777736</span><br><span class="line">    #优先级(最高优先级的会被选为MASTER)</span><br><span class="line">    priority 100</span><br><span class="line">    #发VRRP包的时间间隔(即多久进行一次MASTER选举)</span><br><span class="line">    advert_int 1</span><br><span class="line">    #虚拟路由标识(同一集群内需一样)</span><br><span class="line">    virtual_router_id 50</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    #指定VIP地址</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.8.188</span><br><span class="line">    &#125;</span><br><span class="line">    #服务运行状态检测脚本</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#Backup(192.168.8.130)配置</span></span></span><br><span class="line"></span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">    script_user nginx</span><br><span class="line">    enable_script_security</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">监控nginx服务的脚本</span></span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">    #脚本内容或脚本文件</span><br><span class="line">    script /usr/local/keepalived/check_nginx.sh</span><br><span class="line">    #执行脚本间隔时间(默认1秒)</span><br><span class="line">    interval 1</span><br><span class="line">    #按此权重调整优先级(当nginx服务不可用时，该节点权值减少10，这样权值为95的节点就会成为MASTER)</span><br><span class="line">    weight -10</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    #设为BACKUP将根据优先级决定是MASTER还是SLAVE</span><br><span class="line">    state BACKUP</span><br><span class="line">    #网络接口</span><br><span class="line">    interface ens33</span><br><span class="line">    #优先级(最高优先级的会被选为MASTER)</span><br><span class="line">    priority 95</span><br><span class="line">    #发VRRP包的时间间隔(即多久进行一次MASTER选举)</span><br><span class="line">    advert_int 1</span><br><span class="line">    #虚拟路由标识(同一集群内需一样)</span><br><span class="line">    virtual_router_id 50</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    #指定VIP地址</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.8.188</span><br><span class="line">    &#125;</span><br><span class="line">    #服务运行状态检测脚本</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#检测脚本</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi check_nginx.sh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">counter=`ps -C nginx --no-heading|wc -l`</span><br><span class="line">if [ $counter == 0 ]</span><br><span class="line">then</span><br><span class="line">    echo "Failure: Nginx is not running..."</span><br><span class="line">    exit 2</span><br><span class="line">else</span><br><span class="line">    echo "Success: Nginx is running..."</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<h4 id="Nginx负载均衡"><a href="#Nginx负载均衡" class="headerlink" title="Nginx负载均衡"></a>Nginx负载均衡</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi nginx.conf</span></span><br><span class="line"></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    upstream tomcat_cluster &#123;</span><br><span class="line">        #weight: 设置权重(值越大被访问到的几率越大)</span><br><span class="line">        #max_fails: 与服务器通信失败后进行几次重试(默认为1)</span><br><span class="line">        #fail_timeout: 超过失败重试次数后在多长时间内不可用(默认为10秒)</span><br><span class="line">        server 192.168.8.129:8080 weight=5 max_fails=1 fail_timeout=10;</span><br><span class="line">        server 192.168.8.130:8080 weight=1 max_fails=1 fail_timeout=10;</span><br><span class="line">        #备份服务器(当所有主服务器全都不可用时才会起作用)</span><br><span class="line">        server 192.168.8.128:8080 backup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ \.xhtml$ &#123;</span><br><span class="line">            proxy_pass            http://tomcat_cluster;</span><br><span class="line">            proxy_redirect        off;</span><br><span class="line">            proxy_set_header      Host $http_host;</span><br><span class="line">            proxy_set_header      X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_connect_timeout 60s;</span><br><span class="line">            proxy_send_timeout    60s;</span><br><span class="line">            proxy_read_timeout    60s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl reload nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl http://192.168.8.188/examples/websocket/index.xhtml</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux - VMware</title>
    <url>/2018/11/26/linux/vmware/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Linux下载"><a href="#Linux下载" class="headerlink" title="Linux下载"></a><a href="https://archive.kernel.org/" target="_blank" rel="noopener">Linux下载</a></h2><ul>
<li><a href="http://releases.ubuntu.com/" target="_blank" rel="noopener">Ubuntu</a><br><a href="http://releases.ubuntu.com/18.04/ubuntu-18.04.2-desktop-amd64.iso" target="_blank" rel="noopener">http://releases.ubuntu.com/18.04/ubuntu-18.04.2-desktop-amd64.iso</a><br><a href="http://releases.ubuntu.com/18.04/ubuntu-18.04.2-live-server-amd64.iso" target="_blank" rel="noopener">http://releases.ubuntu.com/18.04/ubuntu-18.04.2-live-server-amd64.iso</a></li>
<li><a href="https://buildlogs.centos.org/centos/7/isos/x86_64/" target="_blank" rel="noopener">CentOS</a><br><a href="https://buildlogs.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1609-99.iso" target="_blank" rel="noopener">https://buildlogs.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1609-99.iso</a><br><a href="https://archive.kernel.org/centos-vault/7.5.1804/isos/x86_64/CentOS-7-x86_64-DVD-1804.iso" target="_blank" rel="noopener">https://archive.kernel.org/centos-vault/7.5.1804/isos/x86_64/CentOS-7-x86_64-DVD-1804.iso</a></li>
<li><a href="https://kojipkgs.fedoraproject.org/rhel/rc/7/Server/x86_64/iso/" target="_blank" rel="noopener">RHEL</a><br><a href="https://kojipkgs.fedoraproject.org/rhel/rc/7/Server/x86_64/iso/rhel-server-7.0-x86_64-dvd.iso" target="_blank" rel="noopener">https://kojipkgs.fedoraproject.org/rhel/rc/7/Server/x86_64/iso/rhel-server-7.0-x86_64-dvd.iso</a></li>
</ul>
<h2 id="Linux网络配置"><a href="#Linux网络配置" class="headerlink" title="Linux网络配置"></a>Linux网络配置</h2><h3 id="启用虚拟网卡"><a href="#启用虚拟网卡" class="headerlink" title="启用虚拟网卡"></a>启用虚拟网卡</h3><p>在<code>Host-Only</code>模式中，虚拟机只能与虚拟机、主机互相访问，但虚拟机和外部的网络是被隔离开的，也就是不能访问互联网；在<code>NAT</code>模式中，虚拟机借助NAT（网络地址转换）功能，通过宿主机器所在的网络来访问公网，即使用NAT模式可以实现在虚拟系统里访问互联网。</p>
<p><img src="/images/linux/virtual-network-adapter.png" alt="virtual-network-adapter"></p>
<h3 id="虚拟网络配置"><a href="#虚拟网络配置" class="headerlink" title="虚拟网络配置"></a>虚拟网络配置</h3><h4 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h4><p>子网掩码只有一个作用，就是将某个IP地址划分成网络地址和主机地址两部分，即子网掩码连续全1的是网络地址，后面的是主机地址。</p>
<p><img src="/images/linux/virtual-network-netmask.png" alt="virtual-network-netmask"></p>
<h4 id="网关IP"><a href="#网关IP" class="headerlink" title="网关IP"></a>网关IP</h4><p>网关实质上是一个网络通向其他网络的IP地址。比如有网络A和网络B，网络A的IP地址范围为<code>192.168.1.1~192.168.1.254</code>，子网掩码为<code>255.255.255.0</code>；网络B的IP地址范围为<code>192.168.2.1~192.168.2.254</code>，子网掩码为<code>255.255.255.0</code>。在没有路由器的情况下，两个网络之间是不能进行TCP/IP通信的，即使是两个网络连接在同一台交换机上，TCP/IP协议也会根据子网掩码判定两个网络中的主机处在不同的网络里。而要实现这两个网络之间的通信，则必须通过网关。如果网络A中的主机发现数据包的目的主机不在本地网络中，就把数据包转发给它自己的网关，再由网关转发给网络B的网关，网络B的网关再转发给网络B的某个主机。所以说，只有设置好网关的IP地址，TCP/IP协议才能实现不同网络之间的相互通信。那么这个IP地址是哪台机器的IP地址呢？网关的IP地址是具有路由功能设备（路由器）的IP地址。</p>
<p><img src="/images/linux/virtual-network-gateway.png" alt="virtual-network-gateway"></p>
<h4 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h4><p>DHCP（Dynamic Host Configuration Protocol）是一个用于局域网的网络协议，是一种使网络管理员能够集中管理和自动分配IP网络地址的通信协议。</p>
<p><img src="/images/linux/virtual-network-dhcp.png" alt="virtual-network-dhcp"></p>
<h3 id="Windows-IP-配置"><a href="#Windows-IP-配置" class="headerlink" title="Windows IP 配置"></a>Windows IP 配置</h3><p>在<code>Host-Only</code>模式下，物理机和虚拟机将通过<code>VMware Network Adapter VMnet1</code>该虚拟网卡进行通信；在<code>NAT</code>模式下，物理机和虚拟机将通过<code>VMware Network Adapter VMnet8</code>该虚拟网卡进行通信。而物理机要想与虚拟机进行通信，必须保证其IP在同一网段，所以需要配置Windows下虚拟网卡的IP地址。</p>
<p><img src="/images/linux/virtual-network-ip.png" alt="virtual-network-ip"></p>
<h3 id="Linux-IP-配置"><a href="#Linux-IP-配置" class="headerlink" title="Linux IP 配置"></a>Linux IP 配置</h3><h4 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改IP为静态IP</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/sysconfig/network-scripts/ifcfg-eno16777736</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#网卡自动启动</span></span></span><br><span class="line">ONBOOT=yes</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#DHCP改成静态</span></span></span><br><span class="line">BOOTPROTO=static</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#静态IP</span></span></span><br><span class="line">IPADDR=192.168.8.128</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#网关</span></span></span><br><span class="line">GATEWAY=192.168.8.1</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#子网掩码</span></span></span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置DNS</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/NetworkManager/NetworkManager.conf</span></span><br><span class="line"></span><br><span class="line">[main]</span><br><span class="line">plugins=ifcfg-rh</span><br><span class="line">dns=none</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/resolv.conf</span></span><br><span class="line"></span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重启网卡</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart network</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改主机名</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hostnamectl <span class="built_in">set</span>-hostname linux128</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/hostname</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改主机名到IP的映射(相当于配置了一个本地的DNS)</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/hosts</span></span><br><span class="line"></span><br><span class="line">127.0.0.1       localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1             localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line">192.168.8.128   linux128</span><br><span class="line">192.168.8.129   linux129</span><br><span class="line">192.168.8.130   linux130</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#防火墙启用、停用、开机启动、禁止开机启动、查看状态</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl &#123;start|stop|<span class="built_in">enable</span>|<span class="built_in">disable</span>|status&#125; firewalld.service</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看当前模式</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl get-default</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置默认启动图形界面</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">set</span>-default graphical.target</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置默认启动命令行</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">set</span>-default multi-user.target</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重启、关机、待机、休眠</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl &#123;reboot|poweroff|<span class="built_in">suspend</span>|hibernate&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改IP为静态IP</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/netplan/50-cloud-init.yaml</span></span><br><span class="line"></span><br><span class="line">network:</span><br><span class="line">    ethernets:</span><br><span class="line">        ens33:</span><br><span class="line">            addresses: [192.168.8.128/24]</span><br><span class="line">            gateway4: 192.168.8.1</span><br><span class="line">            nameservers:</span><br><span class="line">                    addresses: [114.114.114.114, 8.8.8.8]</span><br><span class="line">    version: 2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#使配置生效</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> netplan apply</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改Cloud-Init初始设置</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/cloud/cloud.cfg</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> preserve_hostname: <span class="literal">false</span></span></span><br><span class="line">preserve_hostname: true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改主机名</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hostnamectl <span class="built_in">set</span>-hostname linux128</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/hostname</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改主机名到ip的映射</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/hosts</span></span><br><span class="line"></span><br><span class="line">127.0.0.1       localhost.localdomain   localhost</span><br><span class="line">::1             localhost6.localdomain6 localhost6</span><br><span class="line"></span><br><span class="line">192.168.8.128   linux128</span><br><span class="line">192.168.8.129   linux129</span><br><span class="line">192.168.8.130   linux130</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#防火墙启用、停用、开机启动、禁止开机启动、查看状态</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl &#123;start|stop|<span class="built_in">enable</span>|<span class="built_in">disable</span>|status&#125; ufw.service</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> reboot</span></span><br></pre></td></tr></table></figure>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol>
<li>Windows无法PING通Linux：关闭Linux防火墙</li>
<li>Linux无法PING通Windows：Windows防火墙-&gt;高级设置-&gt;入站规则-&gt;文件和打印机共享(回显请求 - ICMPv4-In)-&gt;启用-&gt;作用域-&gt;远程 IP 地址-&gt;下列 IP 地址-&gt;本地子网</li>
<li>使用VMware的虚拟机克隆功能后需要重新生成MAC地址：选择虚拟机-&gt;网络适配器-&gt;高级-&gt;MAC地址-&gt;生成，然后进入系统修改IP、主机名以及主机名到IP的映射关系</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>vmware</tag>
      </tags>
  </entry>
  <entry>
    <title>Software - MacOS</title>
    <url>/2020/03/01/software/macos/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h2><ul>
<li><a href="https://cloud.google.com/chrome-enterprise/browser/download/" target="_blank" rel="noopener">Chrome</a><br><a href="https://dl.google.com/dl/chrome/mac/universal/stable/gcea/googlechrome.dmg" target="_blank" rel="noopener">https://dl.google.com/dl/chrome/mac/universal/stable/gcea/googlechrome.dmg</a></li>
<li><a href="https://chrome.google.com/webstore/category/extensions" target="_blank" rel="noopener">Chrome Extensions</a><br><a href="https://chrome.google.com/webstore/detail/bitwarden-free-password/nngceckbapebfimnlniiiahkandclblb" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/bitwarden-free-password/nngceckbapebfimnlniiiahkandclblb</a><br><a href="https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm</a><br><a href="https://chrome.google.com/webstore/detail/ai-translator-and-youtube/mjdbhokoopacimoekfgkcoogikbfgngb" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/ai-translator-and-youtube/mjdbhokoopacimoekfgkcoogikbfgngb</a></li>
</ul>
<h2 id="Downloader"><a href="#Downloader" class="headerlink" title="Downloader"></a>Downloader</h2><ul>
<li><a href="https://github.com/agalwood/Motrix/releases" target="_blank" rel="noopener">Motrix</a><br><a href="https://github.com/agalwood/Motrix/releases/download/v1.6.11/Motrix-1.6.11.dmg" target="_blank" rel="noopener">https://github.com/agalwood/Motrix/releases/download/v1.6.11/Motrix-1.6.11.dmg</a><br><a href="https://github.com/agalwood/Motrix/releases/download/v1.6.11/Motrix-1.6.11-arm64.dmg" target="_blank" rel="noopener">https://github.com/agalwood/Motrix/releases/download/v1.6.11/Motrix-1.6.11-arm64.dmg</a></li>
</ul>
<h2 id="Editor"><a href="#Editor" class="headerlink" title="Editor"></a>Editor</h2><ul>
<li><a href="https://www.sublimetext.com/" target="_blank" rel="noopener">SublimeText</a><br><a href="https://download.sublimetext.com/sublime_text_build_4126_mac.zip" target="_blank" rel="noopener">https://download.sublimetext.com/sublime_text_build_4126_mac.zip</a></li>
<li><a href="https://typora.io/releases/all" target="_blank" rel="noopener">Typora</a><br><a href="https://download.typora.io/mac/Typora-1.4.8.dmg" target="_blank" rel="noopener">https://download.typora.io/mac/Typora-1.4.8.dmg</a></li>
<li><a href="https://download.anytype.io/" target="_blank" rel="noopener">Anytype</a><br><a href="https://github.com/anyproto/anytype-ts/releases/download/v0.42.4/Anytype-0.42.4-mac-x64.dmg" target="_blank" rel="noopener">https://github.com/anyproto/anytype-ts/releases/download/v0.42.4/Anytype-0.42.4-mac-x64.dmg</a><br><a href="https://github.com/anyproto/anytype-ts/releases/download/v0.42.4/Anytype-0.42.4-mac-arm64.dmg" target="_blank" rel="noopener">https://github.com/anyproto/anytype-ts/releases/download/v0.42.4/Anytype-0.42.4-mac-arm64.dmg</a></li>
<li><a href="https://code.visualstudio.com/download" target="_blank" rel="noopener">VSCode</a><br><a href="https://vscode.cdn.azure.cn/stable/5235c6bb189b60b01b1f49062f4ffa42384f8c91/VSCode-darwin-arm64.zip" target="_blank" rel="noopener">https://vscode.cdn.azure.cn/stable/5235c6bb189b60b01b1f49062f4ffa42384f8c91/VSCode-darwin-arm64.zip</a></li>
</ul>
<h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><ul>
<li><a href="https://freemacsoft.net/appcleaner/" target="_blank" rel="noopener">AppCleaner</a><br><a href="https://freemacsoft.net/downloads/AppCleaner_3.6.7.zip" target="_blank" rel="noopener">https://freemacsoft.net/downloads/AppCleaner_3.6.7.zip</a></li>
<li><a href="https://macpaw.com/zh/support/cleanmymac" target="_blank" rel="noopener">CleanMyMac X</a><br><a href="https://dl.devmate.com/com.macpaw.zh.CleanMyMac4/CleanMyMacXChinese.dmg" target="_blank" rel="noopener">https://dl.devmate.com/com.macpaw.zh.CleanMyMac4/CleanMyMacXChinese.dmg</a></li>
<li><a href="https://theunarchiver.com/" target="_blank" rel="noopener">The Unarchiver</a><br><a href="https://dl.devmate.com/com.macpaw.site.theunarchiver/TheUnarchiver.dmg" target="_blank" rel="noopener">https://dl.devmate.com/com.macpaw.site.theunarchiver/TheUnarchiver.dmg</a></li>
<li><a href="https://macitbetter.com/" target="_blank" rel="noopener">BetterZip</a><br><a href="https://macitbetter.com/BetterZip.zip" target="_blank" rel="noopener">https://macitbetter.com/BetterZip.zip</a><br><a href="https://macitbetter.com/dl/BetterZip-4.2.5.zip" target="_blank" rel="noopener">https://macitbetter.com/dl/BetterZip-4.2.5.zip</a></li>
<li><a href="https://www.fatcatsoftware.com/plisteditpro_downloads" target="_blank" rel="noopener">PlistEdit</a><br><a href="https://www.fatcatsoftware.com/plisteditpro/PlistEditPro.zip" target="_blank" rel="noopener">https://www.fatcatsoftware.com/plisteditpro/PlistEditPro.zip</a><br><a href="https://www.fatcatsoftware.com/plisteditpro/PlistEditPro_187.zip" target="_blank" rel="noopener">https://www.fatcatsoftware.com/plisteditpro/PlistEditPro_187.zip</a></li>
<li><a href="https://www.alfredapp.com/" target="_blank" rel="noopener">Alfred</a><br><a href="https://cachefly.alfredapp.com/Alfred_3.8.6_972.dmg" target="_blank" rel="noopener">https://cachefly.alfredapp.com/Alfred_3.8.6_972.dmg</a><br><a href="https://cachefly.alfredapp.com/Alfred_4.0.8_1135.dmg" target="_blank" rel="noopener">https://cachefly.alfredapp.com/Alfred_4.0.8_1135.dmg</a></li>
<li><a href="https://topnotch.app/" target="_blank" rel="noopener">TopNotch</a><br><a href="https://updates.topnotch.app/TopNotch-latest.zip" target="_blank" rel="noopener">https://updates.topnotch.app/TopNotch-latest.zip</a></li>
<li><a href="https://media.codeweavers.com/pub/crossover/cxmac/demo/" target="_blank" rel="noopener">CrossOver</a><br><a href="https://media.codeweavers.com/pub/crossover/cxmac/demo/crossover-18.0.0.zip" target="_blank" rel="noopener">https://media.codeweavers.com/pub/crossover/cxmac/demo/crossover-18.0.0.zip</a><br><a href="https://media.codeweavers.com/pub/crossover/cxmac/demo/crossover-19.0.1.zip" target="_blank" rel="noopener">https://media.codeweavers.com/pub/crossover/cxmac/demo/crossover-19.0.1.zip</a></li>
<li><a href="https://www.mediaatelier.com/CheatSheet/" target="_blank" rel="noopener">CheatSheet</a><br><a href="https://www.mediaatelier.com/CheatSheet/CheatSheet_1.6.4.dmg" target="_blank" rel="noopener">https://www.mediaatelier.com/CheatSheet/CheatSheet_1.6.4.dmg</a></li>
<li><a href="https://kapeli.com/dash" target="_blank" rel="noopener">Dash</a><br><a href="https://london.kapeli.com/downloads/v5/Dash.zip" target="_blank" rel="noopener">https://london.kapeli.com/downloads/v5/Dash.zip</a></li>
</ul>
<h2 id="Media"><a href="#Media" class="headerlink" title="Media"></a>Media</h2><ul>
<li><a href="https://iina.io/" target="_blank" rel="noopener">IINA Player</a><br><a href="https://dl.iina.io/IINA.v1.3.1.dmg" target="_blank" rel="noopener">https://dl.iina.io/IINA.v1.3.1.dmg</a></li>
<li><a href="https://www.foobar2000.org/mac" target="_blank" rel="noopener">foobar2000</a><br><a href="https://www.foobar2000.org/files/foobar2000-v2.5.dmg" target="_blank" rel="noopener">https://www.foobar2000.org/files/foobar2000-v2.5.dmg</a></li>
<li><a href="https://www.everappz.com/" target="_blank" rel="noopener">Flacbox</a><br><a href="https://apps.apple.com/us/app/flacbox-flac-mp3-music-player-audio-streamer/id1097564256" target="_blank" rel="noopener">https://apps.apple.com/us/app/flacbox-flac-mp3-music-player-audio-streamer/id1097564256</a><br><a href="https://apps.apple.com/us/app/evermusic-offline-music-player-cloud-streamer/id885367198" target="_blank" rel="noopener">https://apps.apple.com/us/app/evermusic-offline-music-player-cloud-streamer/id885367198</a></li>
<li><a href="https://vox.rocks/mac-music-player/old-versions/" target="_blank" rel="noopener">VOX Music Player</a><br><a href="https://cloud.coppertino.com/vox/downloads/Vox_2.8.26.zip" target="_blank" rel="noopener">https://cloud.coppertino.com/vox/downloads/Vox_2.8.26.zip</a></li>
</ul>
<h2 id="Translator"><a href="#Translator" class="headerlink" title="Translator"></a>Translator</h2><ul>
<li><a href="https://www.eudic.net/v4/en/app/download" target="_blank" rel="noopener">Eudic</a><br><a href="https://www.eudic.net/download/eudic_win.zip?v=2022-11-10" target="_blank" rel="noopener">https://www.eudic.net/download/eudic_win.zip?v=2022-11-10</a><br><a href="https://static.frdic.com/pkg/eudicmac.dmg?v=2022-11-13" target="_blank" rel="noopener">https://static.frdic.com/pkg/eudicmac.dmg?v=2022-11-13</a></li>
<li><a href="https://fanyi.baidu.com/appdownload/download.html" target="_blank" rel="noopener">BaiduTranslate</a><br><a href="https://fanyiapp.cdn.bcebos.com/fanyi-client/pkg/mac/1.5.4/%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91-1.5.4.pkg" target="_blank" rel="noopener">https://fanyiapp.cdn.bcebos.com/fanyi-client/pkg/mac/1.5.4/%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91-1.5.4.pkg</a><br><a href="https://fanyiapp.cdn.bcebos.com/fanyi-client/pkg/mac/1.5.4/%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91-1.5.4-arm64.pkg" target="_blank" rel="noopener">https://fanyiapp.cdn.bcebos.com/fanyi-client/pkg/mac/1.5.4/%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91-1.5.4-arm64.pkg</a></li>
<li><a href="https://transmart.qq.com/zh-CN/download/" target="_blank" rel="noopener">TranSmart</a><br><a href="https://cdn.transmart.qq.com/installation_pro/TranSmart_Alpha0.8.12(20221214)_windows.exe" target="_blank" rel="noopener">https://cdn.transmart.qq.com/installation_pro/TranSmart_Alpha0.8.12(20221214)_windows.exe</a><br><a href="https://cdn.transmart.qq.com/installation_pro/TranSmart_Alpha0.8.12(20221214)_mac_x86.dmg" target="_blank" rel="noopener">https://cdn.transmart.qq.com/installation_pro/TranSmart_Alpha0.8.12(20221214)_mac_x86.dmg</a><br><a href="https://cdn.transmart.qq.com/installation_pro/TranSmart_Alpha0.8.12(20221214)_mac_arm64.dmg" target="_blank" rel="noopener">https://cdn.transmart.qq.com/installation_pro/TranSmart_Alpha0.8.12(20221214)_mac_arm64.dmg</a></li>
</ul>
<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><ul>
<li><a href="https://apps.apple.com/us/app/karing/id6472431552" target="_blank" rel="noopener">Karing</a></li>
<li><a href="https://apps.apple.com/us/app/shadowrocket/id932747118" target="_blank" rel="noopener">Shadowrocket</a></li>
</ul>
<h2 id="Jetbrains"><a href="#Jetbrains" class="headerlink" title="Jetbrains"></a>Jetbrains</h2><ul>
<li><a href="https://www.jetbrains.com/idea/download/other.html" target="_blank" rel="noopener">IntelliJ IDEA</a><br><a href="https://download.jetbrains.com/idea/ideaIU-2021.1.3.dmg" target="_blank" rel="noopener">https://download.jetbrains.com/idea/ideaIU-2021.1.3.dmg</a><br><a href="https://download.jetbrains.com/idea/ideaIU-2021.1.3-aarch64.dmg" target="_blank" rel="noopener">https://download.jetbrains.com/idea/ideaIU-2021.1.3-aarch64.dmg</a></li>
<li><a href="https://www.jetbrains.com/go/download/other.html" target="_blank" rel="noopener">GoLand</a><br><a href="https://download.jetbrains.com/go/goland-2021.1.3.dmg" target="_blank" rel="noopener">https://download.jetbrains.com/go/goland-2021.1.3.dmg</a><br><a href="https://download.jetbrains.com/go/goland-2021.1.3-aarch64.dmg" target="_blank" rel="noopener">https://download.jetbrains.com/go/goland-2021.1.3-aarch64.dmg</a></li>
<li><a href="https://www.jetbrains.com/pycharm/download/other.html" target="_blank" rel="noopener">PyCharm</a><br><a href="https://download.jetbrains.com/python/pycharm-professional-2021.1.3.dmg" target="_blank" rel="noopener">https://download.jetbrains.com/python/pycharm-professional-2021.1.3.dmg</a><br><a href="https://download.jetbrains.com/python/pycharm-professional-2021.1.3-aarch64.dmg" target="_blank" rel="noopener">https://download.jetbrains.com/python/pycharm-professional-2021.1.3-aarch64.dmg</a></li>
<li><a href="https://www.jetbrains.com/webstorm/download/other.html" target="_blank" rel="noopener">WebStorm</a><br><a href="https://download.jetbrains.com/webstorm/WebStorm-2021.1.3.dmg" target="_blank" rel="noopener">https://download.jetbrains.com/webstorm/WebStorm-2021.1.3.dmg</a><br><a href="https://download.jetbrains.com/webstorm/WebStorm-2021.1.3-aarch64.dmg" target="_blank" rel="noopener">https://download.jetbrains.com/webstorm/WebStorm-2021.1.3-aarch64.dmg</a></li>
</ul>
<h2 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h2><ul>
<li><a href="https://golang.google.cn/dl/" target="_blank" rel="noopener">Go</a><br><a href="https://dl.google.com/go/go1.17.8.darwin-amd64.tar.gz" target="_blank" rel="noopener">https://dl.google.com/go/go1.17.8.darwin-amd64.tar.gz</a><br><a href="https://dl.google.com/go/go1.17.8.darwin-arm64.tar.gz" target="_blank" rel="noopener">https://dl.google.com/go/go1.17.8.darwin-arm64.tar.gz</a></li>
<li><a href="https://nodejs.org/dist/" target="_blank" rel="noopener">Node</a><br><a href="https://nodejs.org/dist/v16.18.0/node-v16.18.0-darwin-x64.tar.gz" target="_blank" rel="noopener">https://nodejs.org/dist/v16.18.0/node-v16.18.0-darwin-x64.tar.gz</a><br><a href="https://nodejs.org/dist/v16.18.0/node-v16.18.0-darwin-arm64.tar.gz" target="_blank" rel="noopener">https://nodejs.org/dist/v16.18.0/node-v16.18.0-darwin-arm64.tar.gz</a></li>
<li><a href="https://jdk.java.net/archive/" target="_blank" rel="noopener">OpenJDK</a><br><a href="https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_windows-x64_bin.zip" target="_blank" rel="noopener">https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_windows-x64_bin.zip</a><br><a href="https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_osx-x64_bin.tar.gz" target="_blank" rel="noopener">https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_osx-x64_bin.tar.gz</a><br><a href="https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_linux-x64_bin.tar.gz" target="_blank" rel="noopener">https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_linux-x64_bin.tar.gz</a></li>
</ul>
<h2 id="SCM"><a href="#SCM" class="headerlink" title="SCM"></a>SCM</h2><ul>
<li><a href="https://www.sourcetreeapp.com/download-archives" target="_blank" rel="noopener">Sourcetree</a><br><a href="https://product-downloads.atlassian.com/software/sourcetree/ga/Sourcetree_4.2.3_252.zip" target="_blank" rel="noopener">https://product-downloads.atlassian.com/software/sourcetree/ga/Sourcetree_4.2.3_252.zip</a></li>
</ul>
<h2 id="Programming"><a href="#Programming" class="headerlink" title="Programming"></a>Programming</h2><ul>
<li><a href="https://tableplus.com/download/" target="_blank" rel="noopener">TablePlus</a><br><a href="https://download.tableplus.com/macos/468/TablePlus.dmg" target="_blank" rel="noopener">https://download.tableplus.com/macos/468/TablePlus.dmg</a></li>
<li><a href="https://github.com/beekeeper-studio/beekeeper-studio/releases" target="_blank" rel="noopener">Beekeeper Studio</a><br><a href="https://github.com/beekeeper-studio/beekeeper-studio/releases/download/v3.7.10/Beekeeper-Studio-3.7.10-mac.zip" target="_blank" rel="noopener">https://github.com/beekeeper-studio/beekeeper-studio/releases/download/v3.7.10/Beekeeper-Studio-3.7.10-mac.zip</a><br><a href="https://github.com/beekeeper-studio/beekeeper-studio/releases/download/v3.7.10/Beekeeper-Studio-3.7.10-arm64-mac.zip" target="_blank" rel="noopener">https://github.com/beekeeper-studio/beekeeper-studio/releases/download/v3.7.10/Beekeeper-Studio-3.7.10-arm64-mac.zip</a></li>
<li><a href="https://www.kafkatool.com/download.html" target="_blank" rel="noopener">Offset Explorer</a><br><a href="https://www.kafkatool.com/download2/offsetexplorer.dmg" target="_blank" rel="noopener">https://www.kafkatool.com/download2/offsetexplorer.dmg</a></li>
<li><a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases/" target="_blank" rel="noopener">Redis Desktop Manager</a><br><a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases/download/v1.5.9/Another-Redis-Desktop-Manager.1.5.9.dmg" target="_blank" rel="noopener">https://github.com/qishibo/AnotherRedisDesktopManager/releases/download/v1.5.9/Another-Redis-Desktop-Manager.1.5.9.dmg</a><br><a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases/download/v1.5.9/Another-Redis-Desktop-Manager-M1-arm64-1.5.9.dmg" target="_blank" rel="noopener">https://github.com/qishibo/AnotherRedisDesktopManager/releases/download/v1.5.9/Another-Redis-Desktop-Manager-M1-arm64-1.5.9.dmg</a></li>
<li><a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">Docker Desktop</a><br><a href="https://desktop.docker.com/mac/main/amd64/Docker.dmg" target="_blank" rel="noopener">https://desktop.docker.com/mac/main/amd64/Docker.dmg</a><br><a href="https://desktop.docker.com/mac/main/arm64/Docker.dmg" target="_blank" rel="noopener">https://desktop.docker.com/mac/main/arm64/Docker.dmg</a></li>
</ul>
]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>Software - Windows</title>
    <url>/2017/05/27/software/windows/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a><a href="https://archive.kernel.org/" target="_blank" rel="noopener">Linux</a></h2><ul>
<li><a href="http://releases.ubuntu.com/" target="_blank" rel="noopener">Ubuntu</a><br><a href="http://releases.ubuntu.com/jammy/ubuntu-22.04.1-desktop-amd64.iso" target="_blank" rel="noopener">http://releases.ubuntu.com/jammy/ubuntu-22.04.1-desktop-amd64.iso</a><br><a href="http://releases.ubuntu.com/jammy/ubuntu-22.04.1-live-server-amd64.iso" target="_blank" rel="noopener">http://releases.ubuntu.com/jammy/ubuntu-22.04.1-live-server-amd64.iso</a></li>
<li><a href="https://manjaro.org/download/" target="_blank" rel="noopener">Manjaro</a><br><a href="https://download.manjaro.org/xfce/21.3.7/manjaro-xfce-21.3.7-220816-linux515.iso" target="_blank" rel="noopener">https://download.manjaro.org/xfce/21.3.7/manjaro-xfce-21.3.7-220816-linux515.iso</a><br><a href="https://download.manjaro.org/kde/21.3.7/manjaro-kde-21.3.7-220816-linux515.iso" target="_blank" rel="noopener">https://download.manjaro.org/kde/21.3.7/manjaro-kde-21.3.7-220816-linux515.iso</a><br><a href="https://download.manjaro.org/gnome/21.3.7/manjaro-gnome-21.3.7-220816-linux515.iso" target="_blank" rel="noopener">https://download.manjaro.org/gnome/21.3.7/manjaro-gnome-21.3.7-220816-linux515.iso</a></li>
</ul>
<h2 id="Microsoft"><a href="#Microsoft" class="headerlink" title="Microsoft"></a>Microsoft</h2><ul>
<li>Office Professional Plus 2007<br><a href="ed2k://|file|cn_office_professional_plus_2007_dvd_X12-38713.iso|694059008|CFAE350F8A9028110D12D61D9AEC1315|/" target="_blank" rel="noopener">http://download.msdn.microsoft.com/pr/cn_office_professional_plus_2007_dvd_X12-38713.iso</a></li>
<li>Windows 7 Professional SP1 VL<br><a href="ed2k://|file|cn_windows_7_professional_with_sp1_vl_build_x86_dvd_u_677939.iso|2502909952|935E5B4B754527BE3C238FA6ABDD9B86|/" target="_blank" rel="noopener">http://download.msdn.microsoft.com/pr/cn_windows_7_professional_with_sp1_vl_build_x86_dvd_u_677939.iso</a><br><a href="ed2k://|file|cn_windows_7_professional_with_sp1_vl_build_x64_dvd_u_677816.iso|3266004992|5A52F4CCEFA71797D58389B397038B2F|/" target="_blank" rel="noopener">http://download.msdn.microsoft.com/pr/cn_windows_7_professional_with_sp1_vl_build_x64_dvd_u_677816.iso</a></li>
<li>Windows 8 Professional VL<br><a href="ed2k://|file|cn_windows_8_pro_vl_x86_dvd_917720.iso|2595137536|E87CEF7B8B4EFB12B0A7397795209301|/" target="_blank" rel="noopener">http://download.msdn.microsoft.com/pr/cn_windows_8_pro_vl_x86_dvd_917720.iso</a><br><a href="ed2k://|file|cn_windows_8_pro_vl_x64_dvd_917773.iso|3558014976|7956620A80428F37D4F2989CB5CF3B5A|/" target="_blank" rel="noopener">http://download.msdn.microsoft.com/pr/cn_windows_8_pro_vl_x64_dvd_917773.iso</a></li>
<li>Windows 8.1 Professional VL<br><a href="ed2k://|file|cn_windows_8_1_pro_vl_x86_dvd_2972620.iso|3049981952|5B396C3A0BA99617647D9AFE8403AFA5|/" target="_blank" rel="noopener">http://download.msdn.microsoft.com/pr/cn_windows_8_1_pro_vl_x86_dvd_2972620.iso</a><br><a href="ed2k://|file|cn_windows_8_1_pro_vl_x64_dvd_2971907.iso|4032598016|1FDA520B3E8880E2FB00B20439E0826E|/" target="_blank" rel="noopener">http://download.msdn.microsoft.com/pr/cn_windows_8_1_pro_vl_x64_dvd_2971907.iso</a></li>
<li>Windows 10 Enterprise<br><a href="ed2k://|file|cn_windows_10_enterprise_ltsc_2019_x86_dvd_1814dbab.iso|3196803072|2D39C54A2E99BAC308191C74A15B3237|/" target="_blank" rel="noopener">http://download.msdn.microsoft.com/pr/cn_windows_10_enterprise_ltsc_2019_x86_dvd_1814dbab.iso</a><br><a href="ed2k://|file|cn_windows_10_enterprise_ltsc_2019_x64_dvd_9c09ff24.iso|4478906368|E7C526499308841A4A6D116C857DB669|/" target="_blank" rel="noopener">http://download.msdn.microsoft.com/pr/cn_windows_10_enterprise_ltsc_2019_x64_dvd_9c09ff24.iso</a></li>
<li><a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB4520062" target="_blank" rel="noopener">Windows 10 Version 1809 Cumulative Update</a><br><a href="http://download.windowsupdate.com/d/msdownload/update/software/updt/2019/10/windows10.0-kb4520062-x86_04995cd1c84f7b454d8ac1163bde69b49d7ed592.msu" target="_blank" rel="noopener">http://download.windowsupdate.com/d/msdownload/update/software/updt/2019/10/windows10.0-kb4520062-x86_04995cd1c84f7b454d8ac1163bde69b49d7ed592.msu</a><br><a href="http://download.windowsupdate.com/d/msdownload/update/software/updt/2019/10/windows10.0-kb4520062-x64_9f2a827f11f945d19bd26de6f113f611a38bb8a1.msu" target="_blank" rel="noopener">http://download.windowsupdate.com/d/msdownload/update/software/updt/2019/10/windows10.0-kb4520062-x64_9f2a827f11f945d19bd26de6f113f611a38bb8a1.msu</a></li>
</ul>
<h2 id="Adobe"><a href="#Adobe" class="headerlink" title="Adobe"></a><a href="ftp://ftp.adobe.com/pub/adobe/" target="_blank" rel="noopener">Adobe</a></h2><ul>
<li><a href="https://helpx.adobe.com/cn/creative-suite/kb/cs4-product-downloads.html" target="_blank" rel="noopener">Adobe Master Collection CS4</a><br><a href="http://trials2.adobe.com/Applications/MastCol/CS4/Win/ADBESTAMCS4_LS1.7z" target="_blank" rel="noopener">http://trials2.adobe.com/Applications/MastCol/CS4/Win/ADBESTAMCS4_LS1.7z</a><br><a href="http://trials2.adobe.com/Applications/MastCol/CS4/Mac/ADBESTAMCS4_LS1.dmg" target="_blank" rel="noopener">http://trials2.adobe.com/Applications/MastCol/CS4/Mac/ADBESTAMCS4_LS1.dmg</a></li>
<li><a href="https://helpx.adobe.com/cn/creative-suite/kb/cs5-product-downloads.html" target="_blank" rel="noopener">Adobe Master Collection CS5</a><br><a href="http://trials2.adobe.com/AdobeProducts/STAM/CS5/win32/MasterCollection_CS5_LS1.7z" target="_blank" rel="noopener">http://trials2.adobe.com/AdobeProducts/STAM/CS5/win32/MasterCollection_CS5_LS1.7z</a><br><a href="http://trials2.adobe.com/AdobeProducts/STAM/CS5/osx10/MasterCollection_CS5_LS1.dmg" target="_blank" rel="noopener">http://trials2.adobe.com/AdobeProducts/STAM/CS5/osx10/MasterCollection_CS5_LS1.dmg</a></li>
<li><a href="https://helpx.adobe.com/cn/creative-suite/kb/cs5-5-product-downloads.html" target="_blank" rel="noopener">Adobe Master Collection CS5.5</a><br><a href="http://trials3.adobe.com/AdobeProducts/STAM/CS5_5/win32/MasterCollection_CS5_5_LS1.7z" target="_blank" rel="noopener">http://trials3.adobe.com/AdobeProducts/STAM/CS5_5/win32/MasterCollection_CS5_5_LS1.7z</a><br><a href="http://trials3.adobe.com/AdobeProducts/STAM/CS5_5/osx10/MasterCollection_CS5_5_LS1.dmg" target="_blank" rel="noopener">http://trials3.adobe.com/AdobeProducts/STAM/CS5_5/osx10/MasterCollection_CS5_5_LS1.dmg</a></li>
<li><a href="https://helpx.adobe.com/cn/download-install/kb/cs5-5-product-downloads.html" target="_blank" rel="noopener">Adobe After Effects</a><br><a href="http://trials.adobe.com/Applications/AfterEffects/CS4/Win/ADBEAFETCS4_LS7.7z" target="_blank" rel="noopener">http://trials.adobe.com/Applications/AfterEffects/CS4/Win/ADBEAFETCS4_LS7.7z</a><br><a href="http://trials.adobe.com/Applications/AfterEffects/CS4/Mac/ADBEAFETCS4_LS7.dmg" target="_blank" rel="noopener">http://trials.adobe.com/Applications/AfterEffects/CS4/Mac/ADBEAFETCS4_LS7.dmg</a><br><a href="http://trials2.adobe.com/AdobeProducts/AEFT/10/win64/AfterEffects_10_LS7.7z" target="_blank" rel="noopener">http://trials2.adobe.com/AdobeProducts/AEFT/10/win64/AfterEffects_10_LS7.7z</a><br><a href="http://trials2.adobe.com/dlm/AdobeProducts/AEFT/10/osx10-64/AfterEffects_10_LS7.dmg" target="_blank" rel="noopener">http://trials2.adobe.com/dlm/AdobeProducts/AEFT/10/osx10-64/AfterEffects_10_LS7.dmg</a><br><a href="http://trials3.adobe.com/AdobeProducts/AEFT/10_5/win64/AfterEffects_10_5_LS7.7z" target="_blank" rel="noopener">http://trials3.adobe.com/AdobeProducts/AEFT/10_5/win64/AfterEffects_10_5_LS7.7z</a><br><a href="http://trials3.adobe.com/AdobeProducts/AEFT/10_5/osx10-64/AfterEffects_10_5_LS7.dmg" target="_blank" rel="noopener">http://trials3.adobe.com/AdobeProducts/AEFT/10_5/osx10-64/AfterEffects_10_5_LS7.dmg</a></li>
<li><a href="https://helpx.adobe.com/cn/download-install/kb/cs5-5-product-downloads.html" target="_blank" rel="noopener">Adobe Premiere Pro</a><br><a href="http://trials.adobe.com/Applications/PremierePro/CS4/Win/ADBEPPROCS4_LS7.7z" target="_blank" rel="noopener">http://trials.adobe.com/Applications/PremierePro/CS4/Win/ADBEPPROCS4_LS7.7z</a><br><a href="http://trials2.adobe.com/AdobeProducts/PPRO/5/win32/PremierePro_5_LS7.7z" target="_blank" rel="noopener">http://trials2.adobe.com/AdobeProducts/PPRO/5/win32/PremierePro_5_LS7.7z</a><br><a href="http://trials2.adobe.com/AdobeProducts/PPRO/5_5/win32/PremierePro_5_5_LS7.7z" target="_blank" rel="noopener">http://trials2.adobe.com/AdobeProducts/PPRO/5_5/win32/PremierePro_5_5_LS7.7z</a><br><a href="http://trials2.adobe.com/dlm/Applications/PremierePro/CS4/Mac/ADBEPPROCS4_LS7.dmg" target="_blank" rel="noopener">http://trials2.adobe.com/dlm/Applications/PremierePro/CS4/Mac/ADBEPPROCS4_LS7.dmg</a><br><a href="http://trials2.adobe.com/dlm/AdobeProducts/PPRO/5/osx10/PremierePro_5_LS7.dmg" target="_blank" rel="noopener">http://trials2.adobe.com/dlm/AdobeProducts/PPRO/5/osx10/PremierePro_5_LS7.dmg</a><br><a href="http://trials3.adobe.com/AdobeProducts/PPRO/5_5/osx10/PremierePro_5_5_LS7.dmg" target="_blank" rel="noopener">http://trials3.adobe.com/AdobeProducts/PPRO/5_5/osx10/PremierePro_5_5_LS7.dmg</a></li>
<li><a href="https://helpx.adobe.com/cn/download-install/kb/cs5-5-product-downloads.html" target="_blank" rel="noopener">Adobe Photoshop</a><br><a href="http://trials.adobe.com/Applications/Photoshop/CS4/Win/ADBEPHSPCS4_LS3.7z" target="_blank" rel="noopener">http://trials.adobe.com/Applications/Photoshop/CS4/Win/ADBEPHSPCS4_LS3.7z</a><br><a href="http://trials2.adobe.com/AdobeProducts/PHSP/12/win32/Photoshop_12_LS3.7z" target="_blank" rel="noopener">http://trials2.adobe.com/AdobeProducts/PHSP/12/win32/Photoshop_12_LS3.7z</a><br><a href="http://trials2.adobe.com/AdobeProducts/PHSP/12_1/win32/Photoshop_12_1_LS3.7z" target="_blank" rel="noopener">http://trials2.adobe.com/AdobeProducts/PHSP/12_1/win32/Photoshop_12_1_LS3.7z</a><br><a href="http://trials2.adobe.com/dlm/Applications/Photoshop/CS4/Mac/ADBEPHSPCS4_LS1.dmg" target="_blank" rel="noopener">http://trials2.adobe.com/dlm/Applications/Photoshop/CS4/Mac/ADBEPHSPCS4_LS1.dmg</a><br><a href="http://trials2.adobe.com/dlm/AdobeProducts/PHSP/12/osx10/Photoshop_12_LS1.dmg" target="_blank" rel="noopener">http://trials2.adobe.com/dlm/AdobeProducts/PHSP/12/osx10/Photoshop_12_LS1.dmg</a><br><a href="http://trials3.adobe.com/AdobeProducts/PHSP/12_1/osx10/Photoshop_12_1_LS1.dmg" target="_blank" rel="noopener">http://trials3.adobe.com/AdobeProducts/PHSP/12_1/osx10/Photoshop_12_1_LS1.dmg</a></li>
<li><a href="https://helpx.adobe.com/cn/download-install/kb/cs5-5-product-downloads.html" target="_blank" rel="noopener">Adobe Flash Professional</a><br><a href="http://trials.adobe.com/Applications/FlashPro/CS4/Win/ADBEFLPRCS4_LS3.7z" target="_blank" rel="noopener">http://trials.adobe.com/Applications/FlashPro/CS4/Win/ADBEFLPRCS4_LS3.7z</a><br><a href="http://trials2.adobe.com/AdobeProducts/FLPR/11/win32/FlashPro_11_LS3.7z" target="_blank" rel="noopener">http://trials2.adobe.com/AdobeProducts/FLPR/11/win32/FlashPro_11_LS3.7z</a><br><a href="http://trials2.adobe.com/AdobeProducts/FLPR/11_5/win32/FlashPro_11_5_LS3.exe" target="_blank" rel="noopener">http://trials2.adobe.com/AdobeProducts/FLPR/11_5/win32/FlashPro_11_5_LS3.exe</a><br><a href="http://trials.adobe.com/Applications/FlashPro/CS4/Mac/ADBEFLPRCS4_LS1.dmg" target="_blank" rel="noopener">http://trials.adobe.com/Applications/FlashPro/CS4/Mac/ADBEFLPRCS4_LS1.dmg</a><br><a href="http://trials2.adobe.com/dlm/AdobeProducts/FLPR/11/osx10/FlashPro_11_LS1.dmg" target="_blank" rel="noopener">http://trials2.adobe.com/dlm/AdobeProducts/FLPR/11/osx10/FlashPro_11_LS1.dmg</a><br><a href="http://trials3.adobe.com/AdobeProducts/FLPR/11_5/osx10/FlashPro_11_5_LS1.dmg" target="_blank" rel="noopener">http://trials3.adobe.com/AdobeProducts/FLPR/11_5/osx10/FlashPro_11_5_LS1.dmg</a></li>
<li><a href="https://helpx.adobe.com/cn/download-install/kb/cs5-5-product-downloads.html" target="_blank" rel="noopener">Adobe Dreamweaver</a><br><a href="http://trials.adobe.com/Applications/Dreamweaver/CS4/Win/ADBEDRWVCS4_LS3.7z" target="_blank" rel="noopener">http://trials.adobe.com/Applications/Dreamweaver/CS4/Win/ADBEDRWVCS4_LS3.7z</a><br><a href="http://trials2.adobe.com/AdobeProducts/DRWV/11/win32/Dreamweaver_11_LS3.exe" target="_blank" rel="noopener">http://trials2.adobe.com/AdobeProducts/DRWV/11/win32/Dreamweaver_11_LS3.exe</a><br><a href="http://trials2.adobe.com/dlm/AdobeProducts/DRWV/11_5/win32/Dreamweaver_11_5_LS3.exe" target="_blank" rel="noopener">http://trials2.adobe.com/dlm/AdobeProducts/DRWV/11_5/win32/Dreamweaver_11_5_LS3.exe</a><br><a href="http://trials2.adobe.com/dlm/Applications/Dreamweaver/CS4/Mac/ADBEDRWVCS4_LS1.dmg" target="_blank" rel="noopener">http://trials2.adobe.com/dlm/Applications/Dreamweaver/CS4/Mac/ADBEDRWVCS4_LS1.dmg</a><br><a href="http://trials2.adobe.com/dlm/AdobeProducts/DRWV/11/osx10/Dreamweaver_11_LS1.dmg" target="_blank" rel="noopener">http://trials2.adobe.com/dlm/AdobeProducts/DRWV/11/osx10/Dreamweaver_11_LS1.dmg</a><br><a href="http://trials3.adobe.com/AdobeProducts/DRWV/11_5/osx10/Dreamweaver_11_5_LS1.dmg" target="_blank" rel="noopener">http://trials3.adobe.com/AdobeProducts/DRWV/11_5/osx10/Dreamweaver_11_5_LS1.dmg</a></li>
<li><a href="https://helpx.adobe.com/cn/download-install/kb/cs5-5-product-downloads.html" target="_blank" rel="noopener">Adobe Fireworks</a><br><a href="http://trials.adobe.com/Applications/Fireworks/CS4/Win/ADBEFWKSCS4_LS3.7z" target="_blank" rel="noopener">http://trials.adobe.com/Applications/Fireworks/CS4/Win/ADBEFWKSCS4_LS3.7z</a><br><a href="http://trials2.adobe.com/AdobeProducts/FWKS/11/win32/Fireworks_11_LS3.exe" target="_blank" rel="noopener">http://trials2.adobe.com/AdobeProducts/FWKS/11/win32/Fireworks_11_LS3.exe</a><br><a href="http://trials2.adobe.com/dlm/AdobeProducts/FWKS/11/win32/Fireworks_11_LS1.exe" target="_blank" rel="noopener">http://trials2.adobe.com/dlm/AdobeProducts/FWKS/11/win32/Fireworks_11_LS1.exe</a><br><a href="http://trials.adobe.com/dlm/Applications/Fireworks/CS4/Mac/ADBEFWKSCS4_LS1.dmg" target="_blank" rel="noopener">http://trials.adobe.com/dlm/Applications/Fireworks/CS4/Mac/ADBEFWKSCS4_LS1.dmg</a><br><a href="http://trials2.adobe.com/dlm/AdobeProducts/FWKS/11/osx10/Fireworks_11_LS1.dmg" target="_blank" rel="noopener">http://trials2.adobe.com/dlm/AdobeProducts/FWKS/11/osx10/Fireworks_11_LS1.dmg</a><br><a href="http://trials2.adobe.com/dlm/AdobeProducts/FWKS/11/osx10/Fireworks_11_LS1.dmg" target="_blank" rel="noopener">http://trials2.adobe.com/dlm/AdobeProducts/FWKS/11/osx10/Fireworks_11_LS1.dmg</a></li>
<li><a href="https://helpx.adobe.com/cn/download-install/kb/cs5-5-product-downloads.html" target="_blank" rel="noopener">Adobe Illustrator</a><br><a href="http://trials.adobe.com/Applications/Illustrator/CS4/Win/ADBEILSTCS4_LS3.7z" target="_blank" rel="noopener">http://trials.adobe.com/Applications/Illustrator/CS4/Win/ADBEILSTCS4_LS3.7z</a><br><a href="http://trials2.adobe.com/AdobeProducts/ILST/15/win32/Illustrator_15_LS3.7z" target="_blank" rel="noopener">http://trials2.adobe.com/AdobeProducts/ILST/15/win32/Illustrator_15_LS3.7z</a><br><a href="http://trials2.adobe.com/AdobeProducts/ILST/15_1/win32/Illustrator_15_1_LS3.7z" target="_blank" rel="noopener">http://trials2.adobe.com/AdobeProducts/ILST/15_1/win32/Illustrator_15_1_LS3.7z</a><br><a href="http://trials2.adobe.com/dlm/Applications/Illustrator/CS4/Mac/ADBEILSTCS4_LS1.dmg" target="_blank" rel="noopener">http://trials2.adobe.com/dlm/Applications/Illustrator/CS4/Mac/ADBEILSTCS4_LS1.dmg</a><br><a href="http://trials2.adobe.com/dlm/AdobeProducts/ILST/15/osx10/Illustrator_15_LS1.dmg" target="_blank" rel="noopener">http://trials2.adobe.com/dlm/AdobeProducts/ILST/15/osx10/Illustrator_15_LS1.dmg</a><br><a href="http://trials3.adobe.com/AdobeProducts/ILST/15_1/osx10/Illustrator_15_1_LS1.dmg" target="_blank" rel="noopener">http://trials3.adobe.com/AdobeProducts/ILST/15_1/osx10/Illustrator_15_1_LS1.dmg</a></li>
<li><a href="https://helpx.adobe.com/cn/download-install/kb/cs5-5-product-downloads.html" target="_blank" rel="noopener">Adobe InDesign</a><br><a href="http://trials.adobe.com/Applications/InDesign/CS4/Win/ADBEIDSNCS4_LS3.7z" target="_blank" rel="noopener">http://trials.adobe.com/Applications/InDesign/CS4/Win/ADBEIDSNCS4_LS3.7z</a><br><a href="http://trials2.adobe.com/AdobeProducts/IDSN/7/win32/InDesign_7_LS3.7z" target="_blank" rel="noopener">http://trials2.adobe.com/AdobeProducts/IDSN/7/win32/InDesign_7_LS3.7z</a><br><a href="http://trials2.adobe.com/AdobeProducts/IDSN/7_5/win32/InDesign_7_5_LS3.7z" target="_blank" rel="noopener">http://trials2.adobe.com/AdobeProducts/IDSN/7_5/win32/InDesign_7_5_LS3.7z</a><br><a href="http://trials.adobe.com/dlm/Applications/InDesign/CS4/Mac/ADBEIDSNCS4_LS1.dmg" target="_blank" rel="noopener">http://trials.adobe.com/dlm/Applications/InDesign/CS4/Mac/ADBEIDSNCS4_LS1.dmg</a><br><a href="http://trials2.adobe.com/AdobeProducts/IDSN/7/osx10/InDesign_7_LS1.dmg" target="_blank" rel="noopener">http://trials2.adobe.com/AdobeProducts/IDSN/7/osx10/InDesign_7_LS1.dmg</a><br><a href="http://trials3.adobe.com/AdobeProducts/IDSN/7_5/osx10/InDesign_7_5_LS1.dmg" target="_blank" rel="noopener">http://trials3.adobe.com/AdobeProducts/IDSN/7_5/osx10/InDesign_7_5_LS1.dmg</a></li>
<li><a href="https://helpx.adobe.com/cn/download-install/kb/cs5-5-product-downloads.html" target="_blank" rel="noopener">Adobe InCopy</a><br><a href="http://trials.adobe.com/Applications/InCopy/CS4/Win/ADBEAICYCS4_LS1.7z" target="_blank" rel="noopener">http://trials.adobe.com/Applications/InCopy/CS4/Win/ADBEAICYCS4_LS1.7z</a><br><a href="http://trials2.adobe.com/AdobeProducts/AICY/7_5/win32/InCopy_7_5_LS3.7z" target="_blank" rel="noopener">http://trials2.adobe.com/AdobeProducts/AICY/7_5/win32/InCopy_7_5_LS3.7z</a><br><a href="http://trials3.adobe.com/AdobeProducts/AICY/7_5/win32/InCopy_7_5_LS1.7z" target="_blank" rel="noopener">http://trials3.adobe.com/AdobeProducts/AICY/7_5/win32/InCopy_7_5_LS1.7z</a><br><a href="http://trials.adobe.com/dlm/Applications/InCopy/CS4/Mac/ADBEAICYCS4_LS1.dmg" target="_blank" rel="noopener">http://trials.adobe.com/dlm/Applications/InCopy/CS4/Mac/ADBEAICYCS4_LS1.dmg</a><br><a href="http://trials2.adobe.com/dlm/AdobeProducts/AICY/7/osx10/InCopy_7_LS1.dmg" target="_blank" rel="noopener">http://trials2.adobe.com/dlm/AdobeProducts/AICY/7/osx10/InCopy_7_LS1.dmg</a><br><a href="http://trials3.adobe.com/AdobeProducts/AICY/7_5/osx10/InCopy_7_5_LS1.dmg" target="_blank" rel="noopener">http://trials3.adobe.com/AdobeProducts/AICY/7_5/osx10/InCopy_7_5_LS1.dmg</a></li>
<li><a href="https://helpx.adobe.com/cn/acrobat/kb/acrobat-downloads.html" target="_blank" rel="noopener">Adobe Acrobat X Pro</a><br><a href="http://trials2.adobe.com/AdobeProducts/APRO/10/win32/AcrobatPro_10_Web_WWEFD.exe" target="_blank" rel="noopener">http://trials2.adobe.com/AdobeProducts/APRO/10/win32/AcrobatPro_10_Web_WWEFD.exe</a><br><a href="http://trials2.adobe.com/AdobeProducts/APRO/10/osx10/AcrobatPro_10_Web_WWEFD.dmg" target="_blank" rel="noopener">http://trials2.adobe.com/AdobeProducts/APRO/10/osx10/AcrobatPro_10_Web_WWEFD.dmg</a></li>
</ul>
<h2 id="Jetbrains"><a href="#Jetbrains" class="headerlink" title="Jetbrains"></a>Jetbrains</h2><ul>
<li><a href="https://www.jetbrains.com/idea/download/other.html" target="_blank" rel="noopener">IntelliJ IDEA</a><br><a href="https://download.jetbrains.com/idea/ideaIU-2021.1.3.win.zip" target="_blank" rel="noopener">https://download.jetbrains.com/idea/ideaIU-2021.1.3.win.zip</a><br><a href="https://download.jetbrains.com/idea/ideaIU-2021.1.3.dmg" target="_blank" rel="noopener">https://download.jetbrains.com/idea/ideaIU-2021.1.3.dmg</a><br><a href="https://download.jetbrains.com/idea/ideaIU-2021.1.3-aarch64.dmg" target="_blank" rel="noopener">https://download.jetbrains.com/idea/ideaIU-2021.1.3-aarch64.dmg</a><br><a href="https://download.jetbrains.com/idea/ideaIU-2021.1.3.tar.gz" target="_blank" rel="noopener">https://download.jetbrains.com/idea/ideaIU-2021.1.3.tar.gz</a></li>
<li><a href="https://www.jetbrains.com/go/download/other.html" target="_blank" rel="noopener">GoLand</a><br><a href="https://download.jetbrains.com/go/goland-2021.1.3.win.zip" target="_blank" rel="noopener">https://download.jetbrains.com/go/goland-2021.1.3.win.zip</a><br><a href="https://download.jetbrains.com/go/goland-2021.1.3.dmg" target="_blank" rel="noopener">https://download.jetbrains.com/go/goland-2021.1.3.dmg</a><br><a href="https://download.jetbrains.com/go/goland-2021.1.3-aarch64.dmg" target="_blank" rel="noopener">https://download.jetbrains.com/go/goland-2021.1.3-aarch64.dmg</a><br><a href="https://download.jetbrains.com/go/goland-2021.1.3.tar.gz" target="_blank" rel="noopener">https://download.jetbrains.com/go/goland-2021.1.3.tar.gz</a></li>
<li><a href="https://www.jetbrains.com/pycharm/download/other.html" target="_blank" rel="noopener">PyCharm</a><br><a href="https://download.jetbrains.com/python/pycharm-professional-2021.1.3.exe" target="_blank" rel="noopener">https://download.jetbrains.com/python/pycharm-professional-2021.1.3.exe</a><br><a href="https://download.jetbrains.com/python/pycharm-professional-2021.1.3.dmg" target="_blank" rel="noopener">https://download.jetbrains.com/python/pycharm-professional-2021.1.3.dmg</a><br><a href="https://download.jetbrains.com/python/pycharm-professional-2021.1.3-aarch64.dmg" target="_blank" rel="noopener">https://download.jetbrains.com/python/pycharm-professional-2021.1.3-aarch64.dmg</a><br><a href="https://download.jetbrains.com/python/pycharm-professional-2021.1.3.tar.gz" target="_blank" rel="noopener">https://download.jetbrains.com/python/pycharm-professional-2021.1.3.tar.gz</a></li>
<li><a href="https://www.jetbrains.com/webstorm/download/other.html" target="_blank" rel="noopener">WebStorm</a><br><a href="https://download.jetbrains.com/webstorm/WebStorm-2021.1.3.win.zip" target="_blank" rel="noopener">https://download.jetbrains.com/webstorm/WebStorm-2021.1.3.win.zip</a><br><a href="https://download.jetbrains.com/webstorm/WebStorm-2021.1.3.dmg" target="_blank" rel="noopener">https://download.jetbrains.com/webstorm/WebStorm-2021.1.3.dmg</a><br><a href="https://download.jetbrains.com/webstorm/WebStorm-2021.1.3-aarch64.dmg" target="_blank" rel="noopener">https://download.jetbrains.com/webstorm/WebStorm-2021.1.3-aarch64.dmg</a><br><a href="https://download.jetbrains.com/webstorm/WebStorm-2021.1.3.tar.gz" target="_blank" rel="noopener">https://download.jetbrains.com/webstorm/WebStorm-2021.1.3.tar.gz</a></li>
</ul>
<h2 id="Downloader"><a href="#Downloader" class="headerlink" title="Downloader"></a>Downloader</h2><ul>
<li><a href="https://github.com/agalwood/Motrix/releases" target="_blank" rel="noopener">Motrix</a><br><a href="https://github.com/agalwood/Motrix/releases/download/v1.6.11/Motrix-1.6.11-win.zip" target="_blank" rel="noopener">https://github.com/agalwood/Motrix/releases/download/v1.6.11/Motrix-1.6.11-win.zip</a><br><a href="https://github.com/agalwood/Motrix/releases/download/v1.6.11/Motrix-1.6.11.dmg" target="_blank" rel="noopener">https://github.com/agalwood/Motrix/releases/download/v1.6.11/Motrix-1.6.11.dmg</a><br><a href="https://github.com/agalwood/Motrix/releases/download/v1.6.11/Motrix-1.6.11-arm64.dmg" target="_blank" rel="noopener">https://github.com/agalwood/Motrix/releases/download/v1.6.11/Motrix-1.6.11-arm64.dmg</a></li>
<li><a href="http://mirror2.internetdownloadmanager.com/a/rn/" target="_blank" rel="noopener">Internet Download Manager</a><br><a href="http://mirror2.internetdownloadmanager.com/a/rn/17209/idman608.exe" target="_blank" rel="noopener">http://mirror2.internetdownloadmanager.com/a/rn/17209/idman608.exe</a><br><a href="http://mirror3.internetdownloadmanager.com/a/rn/22260/idman608.exe" target="_blank" rel="noopener">http://mirror3.internetdownloadmanager.com/a/rn/22260/idman608.exe</a><br><a href="http://mirror3.tonec.com/a/rn/22260/idman608.exe" target="_blank" rel="noopener">http://mirror3.tonec.com/a/rn/22260/idman608.exe</a></li>
<li>Thunder<br><a href="http://down.sandai.net/mini/ThunderMini1.5.3.288.exe" target="_blank" rel="noopener">http://down.sandai.net/mini/ThunderMini1.5.3.288.exe</a><br><a href="http://down.sandai.net/thunderspeed/ThunderSpeed1.0.35.366.exe" target="_blank" rel="noopener">http://down.sandai.net/thunderspeed/ThunderSpeed1.0.35.366.exe</a></li>
</ul>
<h2 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h2><ul>
<li><a href="https://cloud.google.com/chrome-enterprise/browser/download/" target="_blank" rel="noopener">Chrome</a><br><a href="https://dl.google.com/edgedl/chrome/install/GoogleChromeStandaloneEnterprise.msi" target="_blank" rel="noopener">https://dl.google.com/edgedl/chrome/install/GoogleChromeStandaloneEnterprise.msi</a><br><a href="https://dl.google.com/edgedl/chrome/install/GoogleChromeStandaloneEnterprise64.msi" target="_blank" rel="noopener">https://dl.google.com/edgedl/chrome/install/GoogleChromeStandaloneEnterprise64.msi</a><br><a href="https://dl.google.com/dl/chrome/mac/universal/stable/gcea/googlechrome.dmg" target="_blank" rel="noopener">https://dl.google.com/dl/chrome/mac/universal/stable/gcea/googlechrome.dmg</a><br><a href="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb" target="_blank" rel="noopener">https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</a></li>
<li><a href="https://chrome.google.com/webstore/category/extensions" target="_blank" rel="noopener">Chrome Extensions</a><br><a href="https://chrome.google.com/webstore/detail/bitwarden-free-password/nngceckbapebfimnlniiiahkandclblb" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/bitwarden-free-password/nngceckbapebfimnlniiiahkandclblb</a><br><a href="https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm</a><br><a href="https://chrome.google.com/webstore/detail/ai-translator-and-youtube/mjdbhokoopacimoekfgkcoogikbfgngb" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/ai-translator-and-youtube/mjdbhokoopacimoekfgkcoogikbfgngb</a></li>
</ul>
<h2 id="Editor"><a href="#Editor" class="headerlink" title="Editor"></a>Editor</h2><ul>
<li><a href="https://www.sublimetext.com/" target="_blank" rel="noopener">SublimeText</a><br><a href="https://download.sublimetext.com/sublime_text_build_4126.zip" target="_blank" rel="noopener">https://download.sublimetext.com/sublime_text_build_4126.zip</a><br><a href="https://download.sublimetext.com/sublime_text_build_4126_x64.zip" target="_blank" rel="noopener">https://download.sublimetext.com/sublime_text_build_4126_x64.zip</a><br><a href="https://download.sublimetext.com/sublime_text_build_4126_mac.zip" target="_blank" rel="noopener">https://download.sublimetext.com/sublime_text_build_4126_mac.zip</a><br><a href="https://download.sublimetext.com/sublime_text_build_4126_x64.tar.xz" target="_blank" rel="noopener">https://download.sublimetext.com/sublime_text_build_4126_x64.tar.xz</a></li>
<li><a href="https://typora.io/releases/all" target="_blank" rel="noopener">Typora</a><br><a href="https://download.typora.io/windows/typora-setup-x64-1.4.8.exe" target="_blank" rel="noopener">https://download.typora.io/windows/typora-setup-x64-1.4.8.exe</a><br><a href="https://download.typora.io/mac/Typora-1.4.8.dmg" target="_blank" rel="noopener">https://download.typora.io/mac/Typora-1.4.8.dmg</a><br><a href="https://download.typora.io/linux/Typora-linux-x64-1.4.8.tar.gz" target="_blank" rel="noopener">https://download.typora.io/linux/Typora-linux-x64-1.4.8.tar.gz</a></li>
<li><a href="https://download.anytype.io/" target="_blank" rel="noopener">Anytype</a><br><a href="https://github.com/anyproto/anytype-ts/releases/download/v0.42.4/Anytype.Setup.0.42.4.exe" target="_blank" rel="noopener">https://github.com/anyproto/anytype-ts/releases/download/v0.42.4/Anytype.Setup.0.42.4.exe</a><br><a href="https://github.com/anyproto/anytype-ts/releases/download/v0.42.4/Anytype-0.42.4-mac-x64.dmg" target="_blank" rel="noopener">https://github.com/anyproto/anytype-ts/releases/download/v0.42.4/Anytype-0.42.4-mac-x64.dmg</a><br><a href="https://github.com/anyproto/anytype-ts/releases/download/v0.42.4/Anytype-0.42.4-mac-arm64.dmg" target="_blank" rel="noopener">https://github.com/anyproto/anytype-ts/releases/download/v0.42.4/Anytype-0.42.4-mac-arm64.dmg</a><br><a href="https://github.com/anyproto/anytype-ts/releases/download/v0.42.4/anytype-0.42.4.tar.gz" target="_blank" rel="noopener">https://github.com/anyproto/anytype-ts/releases/download/v0.42.4/anytype-0.42.4.tar.gz</a></li>
<li><a href="https://code.visualstudio.com/download" target="_blank" rel="noopener">VSCode</a><br><a href="https://vscode.cdn.azure.cn/stable/5235c6bb189b60b01b1f49062f4ffa42384f8c91/VSCode-win32-ia32-1.74.0.zip" target="_blank" rel="noopener">https://vscode.cdn.azure.cn/stable/5235c6bb189b60b01b1f49062f4ffa42384f8c91/VSCode-win32-ia32-1.74.0.zip</a><br><a href="https://vscode.cdn.azure.cn/stable/5235c6bb189b60b01b1f49062f4ffa42384f8c91/VSCode-win32-x64-1.74.0.zip" target="_blank" rel="noopener">https://vscode.cdn.azure.cn/stable/5235c6bb189b60b01b1f49062f4ffa42384f8c91/VSCode-win32-x64-1.74.0.zip</a><br><a href="https://vscode.cdn.azure.cn/stable/5235c6bb189b60b01b1f49062f4ffa42384f8c91/VSCode-darwin-universal.zip" target="_blank" rel="noopener">https://vscode.cdn.azure.cn/stable/5235c6bb189b60b01b1f49062f4ffa42384f8c91/VSCode-darwin-universal.zip</a><br><a href="https://vscode.cdn.azure.cn/stable/5235c6bb189b60b01b1f49062f4ffa42384f8c91/code-stable-x64-1670260359.tar.gz" target="_blank" rel="noopener">https://vscode.cdn.azure.cn/stable/5235c6bb189b60b01b1f49062f4ffa42384f8c91/code-stable-x64-1670260359.tar.gz</a></li>
</ul>
<h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><ul>
<li><a href="https://www.7-zip.org/download.html" target="_blank" rel="noopener">7-Zip</a><br><a href="https://www.7-zip.org/a/7z2201.msi" target="_blank" rel="noopener">https://www.7-zip.org/a/7z2201.msi</a><br><a href="https://www.7-zip.org/a/7z2201-x64.msi" target="_blank" rel="noopener">https://www.7-zip.org/a/7z2201-x64.msi</a></li>
<li><a href="https://www.bandisoft.com/bandizip/old/6/" target="_blank" rel="noopener">Bandizip</a><br><a href="https://dl.bandisoft.com/bandizip.old/BANDIZIP6-PORTABLE.ZIP" target="_blank" rel="noopener">https://dl.bandisoft.com/bandizip.old/BANDIZIP6-PORTABLE.ZIP</a><br><a href="https://dl.bandisoft.com/bandizip/BANDIZIP-PORTABLE-GL-32BIT.ZIP" target="_blank" rel="noopener">https://dl.bandisoft.com/bandizip/BANDIZIP-PORTABLE-GL-32BIT.ZIP</a><br><a href="https://dl.bandisoft.com/bandizip/BANDIZIP-PORTABLE-GL-64BIT.ZIP" target="_blank" rel="noopener">https://dl.bandisoft.com/bandizip/BANDIZIP-PORTABLE-GL-64BIT.ZIP</a></li>
<li><a href="https://github.com/Bioruebe/UniExtract2/releases" target="_blank" rel="noopener">UniExtract</a><br><a href="https://github.com/Bioruebe/UniExtract2/releases/download/v2.0.0-rc.3/UniExtractRC3.zip" target="_blank" rel="noopener">https://github.com/Bioruebe/UniExtract2/releases/download/v2.0.0-rc.3/UniExtractRC3.zip</a></li>
<li><a href="http://www.voidtools.com/support/everything/previous_versions/" target="_blank" rel="noopener">Everything</a><br><a href="https://www.voidtools.com/Everything-1.4.1.965.x86.zip" target="_blank" rel="noopener">https://www.voidtools.com/Everything-1.4.1.965.x86.zip</a><br><a href="https://www.voidtools.com/Everything-1.4.1.965.x64.zip" target="_blank" rel="noopener">https://www.voidtools.com/Everything-1.4.1.965.x64.zip</a></li>
<li><a href="https://www.glarysoft.com/downloads/" target="_blank" rel="noopener">Glary Utilities</a><br><a href="http://download.glarysoft.com/guportable.zip" target="_blank" rel="noopener">http://download.glarysoft.com/guportable.zip</a></li>
<li><a href="https://www.revouninstaller.com/revo-uninstaller-free-download/" target="_blank" rel="noopener">Revo Uninstaller</a><br><a href="https://download.revouninstaller.com/download/RevoUninstaller_Portable.zip" target="_blank" rel="noopener">https://download.revouninstaller.com/download/RevoUninstaller_Portable.zip</a></li>
<li><a href="https://github.com/Klocman/Bulk-Crap-Uninstaller/releases/" target="_blank" rel="noopener">BCUninstaller</a><br><a href="https://github.com/Klocman/Bulk-Crap-Uninstaller/releases/download/v5.4/BCUninstaller_5.4_portable.zip" target="_blank" rel="noopener">https://github.com/Klocman/Bulk-Crap-Uninstaller/releases/download/v5.4/BCUninstaller_5.4_portable.zip</a></li>
</ul>
<h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><ul>
<li><a href="https://www.huorong.cn/person5.html" target="_blank" rel="noopener">Huorong Sysdiag</a><br><a href="https://down7.huorong.cn/sysdiag-all-5.0.73.1-2023.01.15.1.exe" target="_blank" rel="noopener">https://down7.huorong.cn/sysdiag-all-5.0.73.1-2023.01.15.1.exe</a></li>
<li><a href="https://www.sordum.org/" target="_blank" rel="noopener">Firewall App Blocker</a><br><a href="https://www.sordum.org/files/firewall-app-blocker/fab.zip" target="_blank" rel="noopener">https://www.sordum.org/files/firewall-app-blocker/fab.zip</a></li>
<li><a href="https://undelete360.com/download.html" target="_blank" rel="noopener">Undelete 360</a><br><a href="https://undelete360.com/files/undelete-360.exe" target="_blank" rel="noopener">https://undelete360.com/files/undelete-360.exe</a></li>
<li><a href="http://keir.net/hash.html" target="_blank" rel="noopener">Hash</a><br><a href="http://keir.net/download/hash.zip" target="_blank" rel="noopener">http://keir.net/download/hash.zip</a></li>
</ul>
<h2 id="File-Compare"><a href="#File-Compare" class="headerlink" title="File Compare"></a>File Compare</h2><ul>
<li><a href="https://www.devart.com/codecompare/download.html" target="_blank" rel="noopener">Code Compare</a><br><a href="https://www.devart.com/codecompare/codecompare.exe" target="_blank" rel="noopener">https://www.devart.com/codecompare/codecompare.exe</a><br><a href="https://www.devart.com/codecompare/codecompare-4.1.78.exe" target="_blank" rel="noopener">https://www.devart.com/codecompare/codecompare-4.1.78.exe</a></li>
<li><a href="https://www.scootersoftware.com/download.php" target="_blank" rel="noopener">Beyond Compare</a><br><a href="http://www.scootersoftware.com/BCompare-3.3.13.18981.exe" target="_blank" rel="noopener">http://www.scootersoftware.com/BCompare-3.3.13.18981.exe</a><br><a href="http://www.scootersoftware.com/bcompare-3.3.13.18981_i386.deb" target="_blank" rel="noopener">http://www.scootersoftware.com/bcompare-3.3.13.18981_i386.deb</a></li>
</ul>
<h2 id="Utility"><a href="#Utility" class="headerlink" title="Utility"></a>Utility</h2><ul>
<li><a href="https://github.com/ventoy/Ventoy/releases" target="_blank" rel="noopener">Ventoy</a><br><a href="https://github.com/ventoy/Ventoy/releases/download/v1.0.99/ventoy-1.0.99-windows.zip" target="_blank" rel="noopener">https://github.com/ventoy/Ventoy/releases/download/v1.0.99/ventoy-1.0.99-windows.zip</a></li>
<li><a href="https://github.com/pbatard/rufus/releases/" target="_blank" rel="noopener">Rufus</a><br><a href="https://github.com/pbatard/rufus/releases/download/v4.5/rufus-4.5p.exe" target="_blank" rel="noopener">https://github.com/pbatard/rufus/releases/download/v4.5/rufus-4.5p.exe</a></li>
<li><a href="https://www.balena.io/etcher/" target="_blank" rel="noopener">Etcher</a><br><a href="https://github.com/balena-io/etcher/releases/download/v1.19.21/balenaEtcher-win32-x64-1.19.21.zip" target="_blank" rel="noopener">https://github.com/balena-io/etcher/releases/download/v1.19.21/balenaEtcher-win32-x64-1.19.21.zip</a><br><a href="https://github.com/balena-io/etcher/releases/download/v1.19.21/balenaEtcher-1.19.21-x64.dmg" target="_blank" rel="noopener">https://github.com/balena-io/etcher/releases/download/v1.19.21/balenaEtcher-1.19.21-x64.dmg</a><br><a href="https://github.com/balena-io/etcher/releases/download/v1.19.21/balenaEtcher-1.19.21-arm64.dmg" target="_blank" rel="noopener">https://github.com/balena-io/etcher/releases/download/v1.19.21/balenaEtcher-1.19.21-arm64.dmg</a><br><a href="https://github.com/balena-io/etcher/releases/download/v1.19.21/balenaEtcher-linux-x64-1.19.21.zip" target="_blank" rel="noopener">https://github.com/balena-io/etcher/releases/download/v1.19.21/balenaEtcher-linux-x64-1.19.21.zip</a></li>
<li><a href="https://github.com/laomms/PidKeyBatch" target="_blank" rel="noopener">PidKeyBatch</a><br><a href="https://github.com/laomms/PidKeyTool/releases/download/3.5.7/PidKeyTool.v3.57.zip" target="_blank" rel="noopener">https://github.com/laomms/PidKeyTool/releases/download/3.5.7/PidKeyTool.v3.57.zip</a></li>
</ul>
<h2 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h2><ul>
<li><a href="https://videoconverter.wondershare.com/gl/video-converter-desktop.html" target="_blank" rel="noopener">UniConverter</a><br><a href="http://download.wondershare.com/cbs_down/video-converter-ultimate_full495.exe" target="_blank" rel="noopener">http://download.wondershare.com/cbs_down/video-converter-ultimate_full495.exe</a><br><a href="http://download.wondershare.com/cbs_down/video-converter-ultimate-mac_full735.dmg" target="_blank" rel="noopener">http://download.wondershare.com/cbs_down/video-converter-ultimate-mac_full735.dmg</a></li>
<li><a href="https://shotcut.org/download/" target="_blank" rel="noopener">Shotcut</a><br><a href="https://github.com/mltframework/shotcut/releases/download/v22.12.21/shotcut-win64-221221.zip" target="_blank" rel="noopener">https://github.com/mltframework/shotcut/releases/download/v22.12.21/shotcut-win64-221221.zip</a><br><a href="https://github.com/mltframework/shotcut/releases/download/v22.12.21/shotcut-macos-221221.dmg" target="_blank" rel="noopener">https://github.com/mltframework/shotcut/releases/download/v22.12.21/shotcut-macos-221221.dmg</a><br><a href="https://github.com/mltframework/shotcut/releases/download/v22.12.21/shotcut-macos-ARM64-221221.dmg" target="_blank" rel="noopener">https://github.com/mltframework/shotcut/releases/download/v22.12.21/shotcut-macos-ARM64-221221.dmg</a></li>
</ul>
<h2 id="Music"><a href="#Music" class="headerlink" title="Music"></a>Music</h2><ul>
<li><a href="https://www.foobar2000.org/download" target="_blank" rel="noopener">foobar2000</a><br><a href="https://www.foobar2000.org/files/foobar2000_v2.1.5.exe" target="_blank" rel="noopener">https://www.foobar2000.org/files/foobar2000_v2.1.5.exe</a><br><a href="https://www.foobar2000.org/files/foobar2000-x64_v2.1.5.exe" target="_blank" rel="noopener">https://www.foobar2000.org/files/foobar2000-x64_v2.1.5.exe</a><br><a href="https://www.foobar2000.org/components/view/foo_input_dts" target="_blank" rel="noopener">https://www.foobar2000.org/components/view/foo_input_dts</a><br><a href="https://www.foobar2000.org/components/view/foo_input_monkey" target="_blank" rel="noopener">https://www.foobar2000.org/components/view/foo_input_monkey</a></li>
</ul>
<h2 id="Photo"><a href="#Photo" class="headerlink" title="Photo"></a>Photo</h2><ul>
<li><a href="https://www.theinpaint.com/download.html" target="_blank" rel="noopener">Inpaint</a><br><a href="https://www.theinpaint.com/download/InpaintSetup.exe" target="_blank" rel="noopener">https://www.theinpaint.com/download/InpaintSetup.exe</a><br><a href="https://www.theinpaint.com/download/Inpaint.dmg" target="_blank" rel="noopener">https://www.theinpaint.com/download/Inpaint.dmg</a><br><a href="https://www.theinpaint.com/download/BatchInpaintSetup.exe" target="_blank" rel="noopener">https://www.theinpaint.com/download/BatchInpaintSetup.exe</a><br><a href="https://www.theinpaint.com/download/BatchInpaint.dmg" target="_blank" rel="noopener">https://www.theinpaint.com/download/BatchInpaint.dmg</a></li>
<li><a href="https://download.gimp.org/mirror/pub/gimp/" target="_blank" rel="noopener">GIMP</a><br><a href="https://download.gimp.org/pub/gimp/v2.10/windows/gimp-2.10.6-setup.exe" target="_blank" rel="noopener">https://download.gimp.org/pub/gimp/v2.10/windows/gimp-2.10.6-setup.exe</a><br><a href="https://download.gimp.org/pub/gimp/v2.10/osx/gimp-2.10.6-x86_64.dmg" target="_blank" rel="noopener">https://download.gimp.org/pub/gimp/v2.10/osx/gimp-2.10.6-x86_64.dmg</a><br><a href="https://download.gimp.org/pub/gimp/v2.10/gimp-2.10.6.tar.bz2" target="_blank" rel="noopener">https://download.gimp.org/pub/gimp/v2.10/gimp-2.10.6.tar.bz2</a></li>
<li><a href="https://files.kde.org/krita/" target="_blank" rel="noopener">Krita</a><br><a href="https://download.kde.org/stable/krita/4.1.5/krita-x86-4.1.5.zip" target="_blank" rel="noopener">https://download.kde.org/stable/krita/4.1.5/krita-x86-4.1.5.zip</a><br><a href="https://download.kde.org/stable/krita/4.1.5/krita-x64-4.1.5.zip" target="_blank" rel="noopener">https://download.kde.org/stable/krita/4.1.5/krita-x64-4.1.5.zip</a><br><a href="https://download.kde.org/stable/krita/4.1.5/krita-4.1.5.1.dmg" target="_blank" rel="noopener">https://download.kde.org/stable/krita/4.1.5/krita-4.1.5.1.dmg</a><br><a href="https://download.kde.org/stable/krita/4.1.5/krita-4.1.5-x86_64.appimage" target="_blank" rel="noopener">https://download.kde.org/stable/krita/4.1.5/krita-4.1.5-x86_64.appimage</a></li>
<li><a href="https://medibangpaint.com/zh_CN/app-download/" target="_blank" rel="noopener">MediBang Paint Pro</a><br><a href="https://medibangpaint.com/static/installer/MediBangPaintPro/MediBangPaintProSetup-20.1-32bit.exe" target="_blank" rel="noopener">https://medibangpaint.com/static/installer/MediBangPaintPro/MediBangPaintProSetup-20.1-32bit.exe</a><br><a href="https://medibangpaint.com/static/installer/MediBangPaintPro/MediBangPaintProSetup-20.1-64bit.exe" target="_blank" rel="noopener">https://medibangpaint.com/static/installer/MediBangPaintPro/MediBangPaintProSetup-20.1-64bit.exe</a><br><a href="https://medibangpaint.com/static/installer/MediBangPaintPro/MediBangPaintPro-20.1.dmg" target="_blank" rel="noopener">https://medibangpaint.com/static/installer/MediBangPaintPro/MediBangPaintPro-20.1.dmg</a></li>
</ul>
<h2 id="Screen-Recorder"><a href="#Screen-Recorder" class="headerlink" title="Screen Recorder"></a>Screen Recorder</h2><ul>
<li><a href="http://www.faststone.org/FSCapturerDownload.htm" target="_blank" rel="noopener">FastStone Capture</a><br><a href="http://www.faststonesoft.net/DN/FSCapture90.zip" target="_blank" rel="noopener">http://www.faststonesoft.net/DN/FSCapture90.zip</a></li>
<li><a href="https://www.screentogif.com/" target="_blank" rel="noopener">ScreenToGif</a><br><a href="https://github.com/NickeManarin/ScreenToGif/releases/download/2.14.1/ScreenToGif.2.14.1.Portable.zip" target="_blank" rel="noopener">https://github.com/NickeManarin/ScreenToGif/releases/download/2.14.1/ScreenToGif.2.14.1.Portable.zip</a></li>
</ul>
<h2 id="Diagram"><a href="#Diagram" class="headerlink" title="Diagram"></a>Diagram</h2><ul>
<li><a href="https://balsamiq.com/download/" target="_blank" rel="noopener">Balsamiq Mockups</a><br><a href="https://builds.balsamiq.com/mockups-desktop/Balsamiq_Mockups_3.5.17_bundled.zip" target="_blank" rel="noopener">https://builds.balsamiq.com/mockups-desktop/Balsamiq_Mockups_3.5.17_bundled.zip</a><br><a href="https://builds.balsamiq.com/mockups-desktop/Balsamiq_Mockups_3.5.17.dmg" target="_blank" rel="noopener">https://builds.balsamiq.com/mockups-desktop/Balsamiq_Mockups_3.5.17.dmg</a></li>
</ul>
<h2 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h2><ul>
<li><a href="https://golang.google.cn/dl/" target="_blank" rel="noopener">Go</a><br><a href="https://dl.google.com/go/go1.17.8.windows-386.zip" target="_blank" rel="noopener">https://dl.google.com/go/go1.17.8.windows-386.zip</a><br><a href="https://dl.google.com/go/go1.17.8.windows-amd64.zip" target="_blank" rel="noopener">https://dl.google.com/go/go1.17.8.windows-amd64.zip</a><br><a href="https://dl.google.com/go/go1.17.8.darwin-amd64.tar.gz" target="_blank" rel="noopener">https://dl.google.com/go/go1.17.8.darwin-amd64.tar.gz</a><br><a href="https://dl.google.com/go/go1.17.8.darwin-arm64.tar.gz" target="_blank" rel="noopener">https://dl.google.com/go/go1.17.8.darwin-arm64.tar.gz</a><br><a href="https://dl.google.com/go/go1.17.8.linux-386.tar.gz" target="_blank" rel="noopener">https://dl.google.com/go/go1.17.8.linux-386.tar.gz</a><br><a href="https://dl.google.com/go/go1.17.8.linux-amd64.tar.gz" target="_blank" rel="noopener">https://dl.google.com/go/go1.17.8.linux-amd64.tar.gz</a></li>
<li><a href="https://nodejs.org/dist/" target="_blank" rel="noopener">Node</a><br><a href="https://nodejs.org/dist/v16.18.0/node-v16.18.0-win-x86.zip" target="_blank" rel="noopener">https://nodejs.org/dist/v16.18.0/node-v16.18.0-win-x86.zip</a><br><a href="https://nodejs.org/dist/v16.18.0/node-v16.18.0-win-x64.zip" target="_blank" rel="noopener">https://nodejs.org/dist/v16.18.0/node-v16.18.0-win-x64.zip</a><br><a href="https://nodejs.org/dist/v16.18.0/node-v16.18.0-darwin-x64.tar.gz" target="_blank" rel="noopener">https://nodejs.org/dist/v16.18.0/node-v16.18.0-darwin-x64.tar.gz</a><br><a href="https://nodejs.org/dist/v16.18.0/node-v16.18.0-darwin-arm64.tar.gz" target="_blank" rel="noopener">https://nodejs.org/dist/v16.18.0/node-v16.18.0-darwin-arm64.tar.gz</a><br><a href="https://nodejs.org/dist/v16.18.0/node-v16.18.0-linux-x64.tar.gz" target="_blank" rel="noopener">https://nodejs.org/dist/v16.18.0/node-v16.18.0-linux-x64.tar.gz</a></li>
<li><a href="https://www.python.org/ftp/python/" target="_blank" rel="noopener">Python</a><br><a href="https://www.python.org/ftp/python/2.7.15/python-2.7.15.msi" target="_blank" rel="noopener">https://www.python.org/ftp/python/2.7.15/python-2.7.15.msi</a><br><a href="https://www.python.org/ftp/python/2.7.15/python-2.7.15.amd64.msi" target="_blank" rel="noopener">https://www.python.org/ftp/python/2.7.15/python-2.7.15.amd64.msi</a><br><a href="https://www.python.org/ftp/python/2.7.15/python-2.7.15-macosx10.9.pkg" target="_blank" rel="noopener">https://www.python.org/ftp/python/2.7.15/python-2.7.15-macosx10.9.pkg</a><br><a href="https://www.python.org/ftp/python/2.7.15/Python-2.7.15.tgz" target="_blank" rel="noopener">https://www.python.org/ftp/python/2.7.15/Python-2.7.15.tgz</a><br><a href="https://www.python.org/ftp/python/3.4.4/python-3.4.4.msi" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.4.4/python-3.4.4.msi</a><br><a href="https://www.python.org/ftp/python/3.4.4/python-3.4.4.amd64.msi" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.4.4/python-3.4.4.amd64.msi</a><br><a href="https://www.python.org/ftp/python/3.4.4/python-3.4.4-macosx10.6.pkg" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.4.4/python-3.4.4-macosx10.6.pkg</a><br><a href="https://www.python.org/ftp/python/3.4.4/Python-3.4.4.tgz" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.4.4/Python-3.4.4.tgz</a></li>
<li><a href="https://jdk.java.net/archive/" target="_blank" rel="noopener">OpenJDK</a><br><a href="https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_windows-x64_bin.zip" target="_blank" rel="noopener">https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_windows-x64_bin.zip</a><br><a href="https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_osx-x64_bin.tar.gz" target="_blank" rel="noopener">https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_osx-x64_bin.tar.gz</a><br><a href="https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_linux-x64_bin.tar.gz" target="_blank" rel="noopener">https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_linux-x64_bin.tar.gz</a></li>
</ul>
<h2 id="Decompiler"><a href="#Decompiler" class="headerlink" title="Decompiler"></a>Decompiler</h2><ul>
<li><a href="http://jd.benow.ca/" target="_blank" rel="noopener">Java Decompiler</a><br><a href="https://github.com/java-decompiler/jd-gui/releases/download/v1.6.6/jd-gui-1.6.6.jar" target="_blank" rel="noopener">https://github.com/java-decompiler/jd-gui/releases/download/v1.6.6/jd-gui-1.6.6.jar</a></li>
<li><a href="https://github.com/Konloch/bytecode-viewer/releases" target="_blank" rel="noopener">Bytecode Viewer</a><br><a href="https://github.com/Konloch/bytecode-viewer/releases/download/v2.9.22/Bytecode-Viewer-2.9.22.jar" target="_blank" rel="noopener">https://github.com/Konloch/bytecode-viewer/releases/download/v2.9.22/Bytecode-Viewer-2.9.22.jar</a></li>
<li><a href="http://www.angusj.com/resourcehacker/" target="_blank" rel="noopener">Resource Hacker</a><br><a href="http://www.angusj.com/resourcehacker/resource_hacker.zip" target="_blank" rel="noopener">http://www.angusj.com/resourcehacker/resource_hacker.zip</a></li>
</ul>
<h2 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h2><ul>
<li><a href="https://www.navicat.com.cn/products" target="_blank" rel="noopener">Navicat</a><br><a href="https://download.navicat.com/download/navicat101_premium_en.exe" target="_blank" rel="noopener">https://download.navicat.com/download/navicat101_premium_en.exe</a><br><a href="https://download.navicat.com/download/navicat101_premium_en.dmg" target="_blank" rel="noopener">https://download.navicat.com/download/navicat101_premium_en.dmg</a></li>
<li><a href="https://tableplus.com/download/" target="_blank" rel="noopener">TablePlus</a><br><a href="https://download.tableplus.com/windows/5.0.1/TablePlusSetup.exe" target="_blank" rel="noopener">https://download.tableplus.com/windows/5.0.1/TablePlusSetup.exe</a><br><a href="https://download.tableplus.com/macos/468/TablePlus.dmg" target="_blank" rel="noopener">https://download.tableplus.com/macos/468/TablePlus.dmg</a></li>
<li><a href="https://github.com/beekeeper-studio/beekeeper-studio/releases" target="_blank" rel="noopener">Beekeeper Studio</a><br><a href="https://github.com/beekeeper-studio/beekeeper-studio/releases/download/v3.7.10/Beekeeper-Studio-3.7.10-portable.exe" target="_blank" rel="noopener">https://github.com/beekeeper-studio/beekeeper-studio/releases/download/v3.7.10/Beekeeper-Studio-3.7.10-portable.exe</a><br><a href="https://github.com/beekeeper-studio/beekeeper-studio/releases/download/v3.7.10/Beekeeper-Studio-3.7.10-mac.zip" target="_blank" rel="noopener">https://github.com/beekeeper-studio/beekeeper-studio/releases/download/v3.7.10/Beekeeper-Studio-3.7.10-mac.zip</a><br><a href="https://github.com/beekeeper-studio/beekeeper-studio/releases/download/v3.7.10/Beekeeper-Studio-3.7.10-arm64-mac.zip" target="_blank" rel="noopener">https://github.com/beekeeper-studio/beekeeper-studio/releases/download/v3.7.10/Beekeeper-Studio-3.7.10-arm64-mac.zip</a></li>
<li><a href="https://www.allroundautomations.com/try-it-free/" target="_blank" rel="noopener">PLSQL Developer</a><br><a href="http://files.allroundautomations.com/plsqldev1401x32.msi" target="_blank" rel="noopener">http://files.allroundautomations.com/plsqldev1401x32.msi</a><br><a href="http://files.allroundautomations.com/plsqldev1401x64.msi" target="_blank" rel="noopener">http://files.allroundautomations.com/plsqldev1401x64.msi</a></li>
<li><a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases/" target="_blank" rel="noopener">Redis Desktop Manager</a><br><a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases/download/v1.5.9/Another-Redis-Desktop-Manager.1.5.9.exe" target="_blank" rel="noopener">https://github.com/qishibo/AnotherRedisDesktopManager/releases/download/v1.5.9/Another-Redis-Desktop-Manager.1.5.9.exe</a><br><a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases/download/v1.5.9/Another-Redis-Desktop-Manager.1.5.9.dmg" target="_blank" rel="noopener">https://github.com/qishibo/AnotherRedisDesktopManager/releases/download/v1.5.9/Another-Redis-Desktop-Manager.1.5.9.dmg</a><br><a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases/download/v1.5.9/Another-Redis-Desktop-Manager-M1-arm64-1.5.9.dmg" target="_blank" rel="noopener">https://github.com/qishibo/AnotherRedisDesktopManager/releases/download/v1.5.9/Another-Redis-Desktop-Manager-M1-arm64-1.5.9.dmg</a></li>
</ul>
<h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><ul>
<li><a href="https://nginx.org/download/" target="_blank" rel="noopener">Nginx</a><br><a href="https://nginx.org/download/nginx-1.12.0.zip" target="_blank" rel="noopener">https://nginx.org/download/nginx-1.12.0.zip</a><br><a href="https://nginx.org/download/nginx-1.12.0.tar.gz" target="_blank" rel="noopener">https://nginx.org/download/nginx-1.12.0.tar.gz</a></li>
</ul>
<h2 id="SCM"><a href="#SCM" class="headerlink" title="SCM"></a>SCM</h2><ul>
<li><a href="https://git-scm.com/download/" target="_blank" rel="noopener">Git</a><br><a href="https://github.com/git-for-windows/git/releases/download/v2.38.1.windows.1/PortableGit-2.38.1-32-bit.7z.exe" target="_blank" rel="noopener">https://github.com/git-for-windows/git/releases/download/v2.38.1.windows.1/PortableGit-2.38.1-32-bit.7z.exe</a><br><a href="https://github.com/git-for-windows/git/releases/download/v2.38.1.windows.1/PortableGit-2.38.1-64-bit.7z.exe" target="_blank" rel="noopener">https://github.com/git-for-windows/git/releases/download/v2.38.1.windows.1/PortableGit-2.38.1-64-bit.7z.exe</a></li>
<li><a href="https://www.sourcetreeapp.com/download-archives" target="_blank" rel="noopener">Sourcetree</a><br><a href="https://product-downloads.atlassian.com/software/sourcetree/windows/ga/SourceTreeSetup-3.4.12.exe" target="_blank" rel="noopener">https://product-downloads.atlassian.com/software/sourcetree/windows/ga/SourceTreeSetup-3.4.12.exe</a><br><a href="https://product-downloads.atlassian.com/software/sourcetree/ga/Sourcetree_4.2.3_252.zip" target="_blank" rel="noopener">https://product-downloads.atlassian.com/software/sourcetree/ga/Sourcetree_4.2.3_252.zip</a></li>
</ul>
<h2 id="Programming"><a href="#Programming" class="headerlink" title="Programming"></a>Programming</h2><ul>
<li><a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">Docker Desktop</a><br><a href="https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe" target="_blank" rel="noopener">https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe</a><br><a href="https://desktop.docker.com/mac/main/amd64/Docker.dmg" target="_blank" rel="noopener">https://desktop.docker.com/mac/main/amd64/Docker.dmg</a><br><a href="https://desktop.docker.com/mac/main/arm64/Docker.dmg" target="_blank" rel="noopener">https://desktop.docker.com/mac/main/arm64/Docker.dmg</a></li>
<li><a href="https://mobaxterm.mobatek.net/download-home-edition.html" target="_blank" rel="noopener">MobaXterm</a><br><a href="https://download.mobatek.net/2032020060430358/MobaXterm_Portable_v20.3.zip" target="_blank" rel="noopener">https://download.mobatek.net/2032020060430358/MobaXterm_Portable_v20.3.zip</a></li>
<li><a href="https://www.ieinspector.com/download.html" target="_blank" rel="noopener">HttpAnalyzer</a><br><a href="https://scaleway.ieinspector.com/download/HttpAnalyzerStd_V7.6.4.exe" target="_blank" rel="noopener">https://scaleway.ieinspector.com/download/HttpAnalyzerStd_V7.6.4.exe</a><br><a href="https://scaleway.ieinspector.com/download/HttpAnalyzerFull_V7.6.4.exe" target="_blank" rel="noopener">https://scaleway.ieinspector.com/download/HttpAnalyzerFull_V7.6.4.exe</a></li>
<li><a href="https://www.kafkatool.com/download.html" target="_blank" rel="noopener">Offset Explorer</a><br><a href="https://www.kafkatool.com/download2/offsetexplorer.exe" target="_blank" rel="noopener">https://www.kafkatool.com/download2/offsetexplorer.exe</a><br><a href="https://www.kafkatool.com/download2/offsetexplorer_64bit.exe" target="_blank" rel="noopener">https://www.kafkatool.com/download2/offsetexplorer_64bit.exe</a><br><a href="https://www.kafkatool.com/download2/offsetexplorer.dmg" target="_blank" rel="noopener">https://www.kafkatool.com/download2/offsetexplorer.dmg</a></li>
</ul>
<h2 id="Engineering"><a href="#Engineering" class="headerlink" title="Engineering"></a>Engineering</h2><ul>
<li><a href="https://help.sonatype.com/repomanager3/download" target="_blank" rel="noopener">Nexus</a><br><a href="https://download.sonatype.com/nexus/3/latest-win64.zip" target="_blank" rel="noopener">https://download.sonatype.com/nexus/3/latest-win64.zip</a><br><a href="https://download.sonatype.com/nexus/3/latest-mac.tgz" target="_blank" rel="noopener">https://download.sonatype.com/nexus/3/latest-mac.tgz</a><br><a href="https://download.sonatype.com/nexus/3/latest-unix.tar.gz" target="_blank" rel="noopener">https://download.sonatype.com/nexus/3/latest-unix.tar.gz</a></li>
<li><a href="http://mirrors.jenkins.io/war-stable/" target="_blank" rel="noopener">Jenkins</a><br><a href="http://mirrors.jenkins.io/war-stable/2.138.3/jenkins.war" target="_blank" rel="noopener">http://mirrors.jenkins.io/war-stable/2.138.3/jenkins.war</a></li>
<li><a href="https://www.sonarqube.org/" target="_blank" rel="noopener">SonarQube</a><br><a href="https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.4.zip" target="_blank" rel="noopener">https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.4.zip</a></li>
<li><a href="https://www.atlassian.com/software/jira/download-archives" target="_blank" rel="noopener">JIRA</a><br><a href="https://downloads.atlassian.com/software/jira/downloads/atlassian-jira-6.1.zip" target="_blank" rel="noopener">https://downloads.atlassian.com/software/jira/downloads/atlassian-jira-6.1.zip</a><br><a href="https://downloads.atlassian.com/software/jira/downloads/atlassian-jira-6.2.zip" target="_blank" rel="noopener">https://downloads.atlassian.com/software/jira/downloads/atlassian-jira-6.2.zip</a><br><a href="https://downloads.atlassian.com/software/jira/downloads/atlassian-jira-6.3.zip" target="_blank" rel="noopener">https://downloads.atlassian.com/software/jira/downloads/atlassian-jira-6.3.zip</a><br><a href="https://downloads.atlassian.com/software/jira/downloads/atlassian-jira-6.4.zip" target="_blank" rel="noopener">https://downloads.atlassian.com/software/jira/downloads/atlassian-jira-6.4.zip</a></li>
</ul>
<h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><ul>
<li><a href="https://archive.apache.org/dist/jmeter/" target="_blank" rel="noopener">JMeter</a><br><a href="https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.0.zip" target="_blank" rel="noopener">https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.0.zip</a><br><a href="https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.0.tgz" target="_blank" rel="noopener">https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.0.tgz</a></li>
</ul>
<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><ul>
<li><a href="https://github.com/hiddify/hiddify-next/releases/" target="_blank" rel="noopener">Hiddify</a><br><a href="https://github.com/hiddify/hiddify-next/releases/download/v2.0.5/Hiddify-Windows-Portable-x64.zip" target="_blank" rel="noopener">https://github.com/hiddify/hiddify-next/releases/download/v2.0.5/Hiddify-Windows-Portable-x64.zip</a><br><a href="https://github.com/hiddify/hiddify-next/releases/download/v2.0.5/Hiddify-MacOS.dmg" target="_blank" rel="noopener">https://github.com/hiddify/hiddify-next/releases/download/v2.0.5/Hiddify-MacOS.dmg</a></li>
<li><a href="https://github.com/KaringX/karing/releases/" target="_blank" rel="noopener">Karing</a><br><a href="https://github.com/KaringX/karing/releases/download/v1.0.27.353/karing_1.0.27.353_windows_x64.zip" target="_blank" rel="noopener">https://github.com/KaringX/karing/releases/download/v1.0.27.353/karing_1.0.27.353_windows_x64.zip</a></li>
</ul>
<h2 id="Trading"><a href="#Trading" class="headerlink" title="Trading"></a>Trading</h2><ul>
<li><a href="https://www.aicoin.com/zh-CN/download" target="_blank" rel="noopener">AICoin</a><br><a href="https://static.aicoinstorge.com/windows/aicoin-v1.8.7-i32.exe" target="_blank" rel="noopener">https://static.aicoinstorge.com/windows/aicoin-v1.8.7-i32.exe</a><br><a href="https://static.aicoinstorge.com/windows/aicoin-v1.8.6-x64.exe" target="_blank" rel="noopener">https://static.aicoinstorge.com/windows/aicoin-v1.8.6-x64.exe</a><br><a href="https://static.aicoinstorge.com/mac/aicoin-v1.8.6.dmg" target="_blank" rel="noopener">https://static.aicoinstorge.com/mac/aicoin-v1.8.6.dmg</a></li>
<li><a href="https://www.moomoo.com/us/hans/download/" target="_blank" rel="noopener">Moomoo</a><br><a href="https://softwarefile.moomoo.com/moomoo_12.25.11258.exe" target="_blank" rel="noopener">https://softwarefile.moomoo.com/moomoo_12.25.11258.exe</a><br><a href="https://softwarefile.moomoo.com/moomoo_12.16.3508_Website.dmg" target="_blank" rel="noopener">https://softwarefile.moomoo.com/moomoo_12.16.3508_Website.dmg</a></li>
</ul>
<h2 id="Translator"><a href="#Translator" class="headerlink" title="Translator"></a>Translator</h2><ul>
<li><a href="http://quest-app.appspot.com/download" target="_blank" rel="noopener">QTranslate</a><br><a href="http://qtranslate2.appspot.com/QTranslate.6.10.0.zip" target="_blank" rel="noopener">http://qtranslate2.appspot.com/QTranslate.6.10.0.zip</a></li>
<li><a href="https://www.eudic.net/v4/en/app/download" target="_blank" rel="noopener">Eudic</a><br><a href="https://www.eudic.net/download/eudic_win.zip?v=2022-11-10" target="_blank" rel="noopener">https://www.eudic.net/download/eudic_win.zip?v=2022-11-10</a><br><a href="https://static.frdic.com/pkg/eudicmac.dmg?v=2022-11-13" target="_blank" rel="noopener">https://static.frdic.com/pkg/eudicmac.dmg?v=2022-11-13</a></li>
<li><a href="http://cp.iciba.com/pc-company/" target="_blank" rel="noopener">PowerWord</a><br><a href="http://download.iciba.com/pc/enterprise2016/PowerWord2016Enterprise.zip" target="_blank" rel="noopener">http://download.iciba.com/pc/enterprise2016/PowerWord2016Enterprise.zip</a><br><a href="http://download.iciba.com/pc/enterprise2016/PowerWord2016EnterpriseP.zip" target="_blank" rel="noopener">http://download.iciba.com/pc/enterprise2016/PowerWord2016EnterpriseP.zip</a></li>
</ul>
<h2 id="Office"><a href="#Office" class="headerlink" title="Office"></a>Office</h2><ul>
<li><a href="https://www.sumatrapdfreader.org/download-prev.html" target="_blank" rel="noopener">SumatraPDF</a><br><a href="https://www.sumatrapdfreader.org/dl/rel/3.4.5/SumatraPDF-3.4.5.zip" target="_blank" rel="noopener">https://www.sumatrapdfreader.org/dl/rel/3.4.5/SumatraPDF-3.4.5.zip</a><br><a href="https://www.sumatrapdfreader.org/dl/rel/3.4.5/SumatraPDF-3.4.5-64.zip" target="_blank" rel="noopener">https://www.sumatrapdfreader.org/dl/rel/3.4.5/SumatraPDF-3.4.5-64.zip</a></li>
<li><a href="https://www.updf.cn/updf/" target="_blank" rel="noopener">UPDF</a><br><a href="https://download.superace.com/updf/installer/win/web/updf-8010100000-win-installer.exe" target="_blank" rel="noopener">https://download.superace.com/updf/installer/win/web/updf-8010100000-win-installer.exe</a><br><a href="https://download.superace.com/package/updf/cn/mac/seo/intel/updf-50049_mac-full.dmg" target="_blank" rel="noopener">https://download.superace.com/package/updf/cn/mac/seo/intel/updf-50049_mac-full.dmg</a><br><a href="https://download.superace.com/package/updf/cn/mac/seo/apple/updf-50049_mac-full.dmg" target="_blank" rel="noopener">https://download.superace.com/package/updf/cn/mac/seo/apple/updf-50049_mac-full.dmg</a></li>
<li><a href="https://ep.wps.cn/download" target="_blank" rel="noopener">WPS Pro</a><br><a href="http://wpspro.support.wps.cn/gov/guangdong/chaozhou/installation/WPS%20Office%202019%20%E4%B8%93%E4%B8%9A%E7%89%88%EF%BC%88%E6%BD%AE%E5%B7%9E%E5%B8%82%E5%85%9A%E6%94%BF%E6%9C%BA%E5%85%B3%E5%8D%95%E4%BD%8D%EF%BC%89.exe" target="_blank" rel="noopener">WPS2019Pro_GDCZ</a><br><a href="http://wpspro.support.wps.cn/gov/guangdong/huizhou/installation/WPS%20Office%202019%E4%B8%93%E4%B8%9A%E7%89%88%EF%BC%88%E6%83%A0%E5%B7%9E%E5%B8%82%E7%9B%B4%E6%9C%BA%E5%85%B3%E5%8D%95%E4%BD%8D%EF%BC%89.exe" target="_blank" rel="noopener">WPS2019Pro_GDHZ</a><br><a href="http://wpspro.support.wps.cn/gov/guangdong/maoming/installation/WPS%20Office%202019%20%E4%B8%93%E4%B8%9A%E7%89%88%EF%BC%88%E8%8C%82%E5%90%8D%E5%B8%82%E5%85%9A%E6%94%BF%E6%9C%BA%E5%85%B3%E5%8D%95%E4%BD%8D%EF%BC%89.exe" target="_blank" rel="noopener">WPS2019Pro_GDMM</a>  </li>
</ul>
<h2 id="Baidu"><a href="#Baidu" class="headerlink" title="Baidu"></a>Baidu</h2><ul>
<li><a href="https://yun.baidu.com/disk/version" target="_blank" rel="noopener">BaiduNetdisk</a><br><a href="http://issuecdn.baidupcs.com/issue/netdisk/yunguanjia/BaiduNetdisk_6.2.0.exe" target="_blank" rel="noopener">http://issuecdn.baidupcs.com/issue/netdisk/yunguanjia/BaiduNetdisk_6.2.0.exe</a><br><a href="http://issuecdn.baidupcs.com/issue/netdisk/MACguanjia/BaiduNetdisk_mac_2.2.3.dmg" target="_blank" rel="noopener">http://issuecdn.baidupcs.com/issue/netdisk/MACguanjia/BaiduNetdisk_mac_2.2.3.dmg</a></li>
<li><a href="https://fanyi.baidu.com/appdownload/download.html" target="_blank" rel="noopener">BaiduTranslate</a><br><a href="https://fanyiapp.cdn.bcebos.com/fanyi-client/pkg/win/1.5.4/%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91_Setup_1.5.4.exe" target="_blank" rel="noopener">https://fanyiapp.cdn.bcebos.com/fanyi-client/pkg/win/1.5.4/%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91_Setup_1.5.4.exe</a><br><a href="https://fanyiapp.cdn.bcebos.com/fanyi-client/pkg/mac/1.5.4/%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91-1.5.4.pkg" target="_blank" rel="noopener">https://fanyiapp.cdn.bcebos.com/fanyi-client/pkg/mac/1.5.4/%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91-1.5.4.pkg</a><br><a href="https://fanyiapp.cdn.bcebos.com/fanyi-client/pkg/mac/1.5.4/%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91-1.5.4-arm64.pkg" target="_blank" rel="noopener">https://fanyiapp.cdn.bcebos.com/fanyi-client/pkg/mac/1.5.4/%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91-1.5.4-arm64.pkg</a></li>
</ul>
<h2 id="Alibaba"><a href="#Alibaba" class="headerlink" title="Alibaba"></a>Alibaba</h2><ul>
<li><a href="https://tms.dingtalk.com/markets/dingtalk/download" target="_blank" rel="noopener">DingTalk</a><br><a href="https://download.alicdn.com/dingtalk-desktop/win_installer/Release/DingTalk_v4.6.25.10026.exe" target="_blank" rel="noopener">https://download.alicdn.com/dingtalk-desktop/win_installer/Release/DingTalk_v4.6.25.10026.exe</a><br><a href="https://download.alicdn.com/dingtalk-desktop/mac_dmg/Release/DingTalk_v4.6.25.0.dmg" target="_blank" rel="noopener">https://download.alicdn.com/dingtalk-desktop/mac_dmg/Release/DingTalk_v4.6.25.0.dmg</a></li>
</ul>
<h2 id="Tencent"><a href="#Tencent" class="headerlink" title="Tencent"></a>Tencent</h2><ul>
<li><a href="https://weixin.qq.com/" target="_blank" rel="noopener">WeChat</a><br><a href="https://dldir1.qq.com/weixin/Windows/WeChatSetup.exe" target="_blank" rel="noopener">https://dldir1.qq.com/weixin/Windows/WeChatSetup.exe</a><br><a href="https://dldir1.qq.com/weixin/mac/WeChatMac.dmg" target="_blank" rel="noopener">https://dldir1.qq.com/weixin/mac/WeChatMac.dmg</a></li>
<li><a href="https://transmart.qq.com/zh-CN/download/" target="_blank" rel="noopener">TranSmart</a><br><a href="https://cdn.transmart.qq.com/installation_pro/TranSmart_Alpha0.8.12(20221214)_windows.exe" target="_blank" rel="noopener">https://cdn.transmart.qq.com/installation_pro/TranSmart_Alpha0.8.12(20221214)_windows.exe</a><br><a href="https://cdn.transmart.qq.com/installation_pro/TranSmart_Alpha0.8.12(20221214)_mac_x86.dmg" target="_blank" rel="noopener">https://cdn.transmart.qq.com/installation_pro/TranSmart_Alpha0.8.12(20221214)_mac_x86.dmg</a><br><a href="https://cdn.transmart.qq.com/installation_pro/TranSmart_Alpha0.8.12(20221214)_mac_arm64.dmg" target="_blank" rel="noopener">https://cdn.transmart.qq.com/installation_pro/TranSmart_Alpha0.8.12(20221214)_mac_arm64.dmg</a></li>
</ul>
]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Checkstyle</title>
    <url>/2017/05/27/tools/checkstyle/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Google-Style"><a href="#Google-Style" class="headerlink" title="Google Style"></a><a href="https://github.com/google/styleguide" target="_blank" rel="noopener">Google Style</a></h2><ul>
<li><a href="https://github.com/google/styleguide/blob/gh-pages/eclipse-java-google-style.xml" target="_blank" rel="noopener">Java Google Style</a></li>
<li><a href="https://github.com/google/styleguide/blob/gh-pages/javascriptguide.xml" target="_blank" rel="noopener">Javascript Google Style</a></li>
<li><a href="https://github.com/google/styleguide/blob/gh-pages/htmlcssguide.xml" target="_blank" rel="noopener">Html Css Google Style</a></li>
</ul>
<h2 id="Google-Style-配置"><a href="#Google-Style-配置" class="headerlink" title="Google Style 配置"></a>Google Style 配置</h2><ul>
<li><p>Eclipse</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">Window &gt; Preferences &gt; Java &gt; Code Style &gt; Formatter &gt; Import...</span><br></pre></td></tr></table></figure>
</li>
<li><p>IntelliJ</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">File &gt; Settings... &gt; Editor &gt; Code Style &gt; Java &gt; Manage... &gt; Import... &gt; Eclipse XML Profile</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Checkstyle"><a href="#Checkstyle" class="headerlink" title="Checkstyle"></a><a href="https://github.com/checkstyle/checkstyle" target="_blank" rel="noopener">Checkstyle</a></h2><ul>
<li><a href="https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml" target="_blank" rel="noopener">Google Checks</a></li>
<li><a href="https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/sun_checks.xml" target="_blank" rel="noopener">Sun Checks</a></li>
</ul>
<h2 id="Checkstyle-自定义"><a href="#Checkstyle-自定义" class="headerlink" title="Checkstyle 自定义"></a>Checkstyle 自定义</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">module</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">          <span class="meta-string">"-//Puppy Crawl//DTD Check Configuration 1.3//EN"</span></span></span><br><span class="line"><span class="meta">          <span class="meta-string">"http://www.puppycrawl.com/dtds/configuration_1_3.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span> = <span class="string">"Checker"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"charset"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"warning"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"NewlineAtEndOfFile"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fileExtensions"</span> <span class="attr">value</span>=<span class="string">"java,properties,xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 不允许使用TAB缩进 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"FileTabCharacter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"eachLine"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"containsTab"</span> <span class="attr">value</span>=<span class="string">"本行不能包含tab字符."</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 检查每个java package中是否包含java注释文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"JavadocPackage"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowLegacy"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"javadoc.packageInfo"</span> <span class="attr">value</span>=<span class="string">"package中需包含有package-info.java注释文件."</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"TreeWalker"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 修饰符顺序检测 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ModifierOrder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"mod.order"</span> <span class="attr">value</span>=<span class="string">"''&#123;0&#125;'' 修饰符顺序错误."</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"annotation.order"</span> <span class="attr">value</span>=<span class="string">"'&#123;0&#125;'' 注释修饰符不能在非注释修饰符前面."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 缩进风格 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"Indentation"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basicOffset"</span> <span class="attr">value</span>=<span class="string">"4"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"indentation.error"</span> <span class="attr">value</span>=<span class="string">"你缩进了&#123;1&#125;个空格，正确应该缩进 &#123;2&#125;个空格."</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"indentation.child.error"</span> <span class="attr">value</span>=<span class="string">"你缩进了&#123;1&#125;个空格，正确应该缩进 &#123;2&#125;个空格."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 页宽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"LineLength"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"max"</span> <span class="attr">value</span>=<span class="string">"120"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"maxLineLen"</span> <span class="attr">value</span>=<span class="string">"行字符数超过120个."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 操作符换行策略检查 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"OperatorWrap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"nl"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"ASSIGN,BAND,BOR,DIV,EQUAL,GE,GT,LAND,LE,LOR,LT,MINUS_ASSIGN,MOD,MOD_ASSIGN,NOT_EQUAL,PLUS,PLUS_ASSIGN,QUESTION,STAR,STAR_ASSIGN"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ParenPad"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"CTOR_CALL,METHOD_CALL,SUPER_CTOR_CALL"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"ws.followed"</span> <span class="attr">value</span>=<span class="string">"''&#123;0&#125;'' 后面有空格."</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"ws.preceded"</span> <span class="attr">value</span>=<span class="string">"''&#123;0&#125;'' 前面有空格."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"TypecastParenPad"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"RPAREN,TYPECAST"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"ws.followed"</span> <span class="attr">value</span>=<span class="string">"''&#123;0&#125;''后面多一个空格."</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"ws.preceded"</span> <span class="attr">value</span>=<span class="string">"''&#123;0&#125;''前面多一个空格."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"WhitespaceAfter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"COMMA,SEMI"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"ws.notFollowed"</span> <span class="attr">value</span>=<span class="string">"''&#123;0&#125;''后面多一个空格."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"WhitespaceAround"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"RCURLY,LITERAL_ASSERT,LITERAL_ASSERT,LITERAL_CATCH,LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_FOR,LITERAL_IF,LITERAL_RETURN,LITERAL_SYNCHRONIZED,LITERAL_TRY,LITERAL_WHILE"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowEmptyConstructors"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowEmptyMethods"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"ws.notPreceded"</span> <span class="attr">value</span>=<span class="string">"''&#123;0&#125;'' 关键字前少一个空格."</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"ws.notFollowed"</span> <span class="attr">value</span>=<span class="string">"''&#123;0&#125;'' 关键字后少一个空格."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 每行语句数量--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"OneStatementPerLine"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">metadata</span> <span class="attr">name</span>=<span class="string">"net.sf.eclipsecs.core.comment"</span> <span class="attr">value</span>=<span class="string">"Coding Problems-&gt; Only one statement per line allowed"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"multiple.statements.line"</span> <span class="attr">value</span>=<span class="string">"禁止一行有多句代码."</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 每行变量声明数量--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MultipleVariableDeclarations"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"multiple.variable.declarations.comma"</span> <span class="attr">value</span>=<span class="string">"每一个变量的定义必须在它的声明处且在同一行."</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"multiple.variable.declarations"</span> <span class="attr">value</span>=<span class="string">"每一行只能定义一个变量."</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"RightCurly"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"alone"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span>               </span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"LeftCurly"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"line.previous"</span> <span class="attr">value</span>=<span class="string">"左侧大括号没有放在前一行代码的行尾."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"NeedBraces"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"needBraces"</span> <span class="attr">value</span>=<span class="string">"''&#123;0&#125;'' 结构没有用大括号 '''&#123;&#125;'''"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 对类和接口的注释检查 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"JavadocType"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"type.missingTag"</span> <span class="attr">value</span>=<span class="string">"Javadoc 类型的注释丢失 &#123;0&#125; 标签."</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"javadoc.missing"</span> <span class="attr">value</span>=<span class="string">"缺少 Javadoc 注释."</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"javadoc.unusedTagGeneral"</span> <span class="attr">value</span>=<span class="string">"未使用过的 Javadoc 标签."</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"javadoc.unusedTag"</span> <span class="attr">value</span>=<span class="string">"未使用过的 &#123;0&#125; 标签for ''&#123;1&#125;''."</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"type.tagFormat"</span> <span class="attr">value</span>=<span class="string">"Javadoc 类型标签 &#123;0&#125;必须匹配模式 ''&#123;1&#125;''."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 对public protect private修饰的变量注释检查 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"JavadocVariable"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"scope"</span> <span class="attr">value</span>=<span class="string">"public"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"javadoc.missing"</span> <span class="attr">value</span>=<span class="string">"变量注释：缺少Javadoc注释."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"JavadocVariable"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"scope"</span> <span class="attr">value</span>=<span class="string">"protected"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"javadoc.missing"</span> <span class="attr">value</span>=<span class="string">"变量注释：缺少Javadoc注释."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"JavadocVariable"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"javadoc.missing"</span> <span class="attr">value</span>=<span class="string">"变量注释：缺少Javadoc注释."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 检查所有方法的javadoc(可以不声明RuntimeException) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"JavadocMethod"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowUndeclaredRTE"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 允许get set 方法没有注释 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowMissingPropertyJavadoc"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"javadoc.missing"</span> <span class="attr">value</span>=<span class="string">"方法注释：缺少Javadoc注释."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 包名命名规范 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"PackageName"</span>&gt;</span>     </span><br><span class="line">            <span class="comment">&lt;!-- &lt;property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format"</span> <span class="attr">value</span>=<span class="string">"^mo\.gov\.dsat\.vss+(\.[a-z]+)+$"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"name.invalidPattern"</span> <span class="attr">value</span>=<span class="string">"包名 ''&#123;0&#125;'' 不符合 mo.gov.dsat.vss.模块名 命名规范."</span>/&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 类的命名,匹配规则默认:(^[A-Z][a-zA-Z0-9]*$),必须以大写字母开始 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"TypeName"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"CLASS_DEF"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"name.invalidPattern"</span> <span class="attr">value</span>=<span class="string">"类名 ''&#123;0&#125;''没有通过大驼峰命名法命名，具体名称应使用意义完整的英文描述."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 接口命名,匹配规则默认:(^[A-Z][a-zA-Z0-9]*$),必须以大写字母开始 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"TypeName"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"INTERFACE_DEF"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"name.invalidPattern"</span> <span class="attr">value</span>=<span class="string">"接口名 ''&#123;0&#125;''没有通过大驼峰命名法命名，具体名称应使用意义完整的英文描述."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 方法名命名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MethodName"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format"</span> <span class="attr">value</span>=<span class="string">"(^[a-z][a-zA-Z0-9]*$)"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"name.invalidPattern"</span> <span class="attr">value</span>=<span class="string">"方法名 ''&#123;0&#125;''没有通过小驼峰命名法命名，具体名称应使用意义完整的英文描述."</span>/&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 局部变量命名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"LocalVariableName"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format"</span> <span class="attr">value</span>=<span class="string">"(^[a-z][a-zA-Z0-9]*$)"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"name.invalidPattern"</span> <span class="attr">value</span>=<span class="string">"变量名 ''&#123;0&#125;''没有通过小驼峰命名法命名，具体名称应使用意义完整的英文描述."</span>/&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 局部的final变量，包括catch中的参数的检查 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"LocalFinalVariableName"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"name.invalidPattern"</span> <span class="attr">value</span>=<span class="string">"变量名 ''&#123;0&#125;''没有通过小驼峰命名法命名，具体名称应使用意义完整的英文描述."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 变量命名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MemberName"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"name.invalidPattern"</span> <span class="attr">value</span>=<span class="string">"变量名 ''&#123;0&#125;''没有通过小驼峰命名法命名，具体名称应使用意义完整的英文描述."</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 静态变量命名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"StaticVariableName"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"name.invalidPattern"</span> <span class="attr">value</span>=<span class="string">"变量名 ''&#123;0&#125;''没有通过小驼峰命名法命名，具体名称应使用意义完整的英文描述."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数组变量命名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ArrayTypeStyle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"array.type.style"</span> <span class="attr">value</span>=<span class="string">"数组定义没有采取int[] index这种方式."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 常量命名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ConstantName"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"name.invalidPattern"</span> <span class="attr">value</span>=<span class="string">"常量 ''&#123;0&#125;'' 常量名违反编码规范."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- import语句不使用通配符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"AvoidStarImport"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"import.avoidStar"</span> <span class="attr">value</span>=<span class="string">"引用包时不能使用*号."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 魔法数检测 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MagicNumber"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"magic.number"</span> <span class="attr">value</span>=<span class="string">"''&#123;0&#125;'' 是一个魔法数(即常数)."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 多余的关键字，包含不适用this作为关键字 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"RedundantModifier"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"redundantModifier"</span> <span class="attr">value</span>=<span class="string">"''&#123;0&#125;'' 多余的修饰符."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 重载父类方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MissingOverride"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"annotation.missing.override"</span> <span class="attr">value</span>=<span class="string">"重载方法缺少@Override."</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"tag.not.valid.on"</span> <span class="attr">value</span>=<span class="string">"注释-&gt; Javadoc &#123;0&#125;标签在这个位置是无效的."</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 判断语句使用 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"SimplifyBooleanExpression"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"simplify.expression"</span> <span class="attr">value</span>=<span class="string">"存在布尔冗余."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 检查switch语句是否忘记了default标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MissingSwitchDefault"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"missing.switch.default"</span> <span class="attr">value</span>=<span class="string">"switch 语句后边没有 default 语句."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 检查switch语句中default标签的顺序 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"DefaultComesLast"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"default.comes.last"</span> <span class="attr">value</span>=<span class="string">"建议Default 放在 switch 语句的最后."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 禁止使用System.out.println --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"Regexp"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format"</span> <span class="attr">value</span>=<span class="string">"System\.out\.println"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">value</span>=<span class="string">"不要使用 System.out.println 进行控制台打印，应该使用日志工具类(如：log4j)进行统一记录或者打印."</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"illegalPattern"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 禁止使用System.err.println --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"Regexp"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format"</span> <span class="attr">value</span>=<span class="string">"System\.err\.println"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">value</span>=<span class="string">"不要使用 System.err.println 进行控制台打印，应该使用日志工具类(如：log4j)进行统一记录或者打印."</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"illegalPattern"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 不允许用main方法测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"UncommentedMain"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 检查是否应该使用括号的地方没有加括号 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"NeedBraces"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>checkstyle<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-checkstyle-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">id</span>&gt;</span>checkstyle<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>validate<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>check<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">failOnViolation</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnViolation</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configLocation</span>&gt;</span>$&#123;checkstyle.config.location&#125;<span class="tag">&lt;/<span class="name">configLocation</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">suppressionsLocation</span>&gt;</span>$&#123;checkstyle.suppressions.location&#125;<span class="tag">&lt;/<span class="name">suppressionsLocation</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">checkstyle.config.location</span>&gt;</span></span><br><span class="line">                $&#123;basedir&#125;/src/test/resources/checkstyle/custom_checks.xml</span><br><span class="line">            <span class="tag">&lt;/<span class="name">checkstyle.config.location</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">checkstyle.suppressions.location</span>&gt;</span></span><br><span class="line">                $&#123;basedir&#125;/src/test/resources/checkstyle/checkstyle_suppressions.xml</span><br><span class="line">            <span class="tag">&lt;/<span class="name">checkstyle.suppressions.location</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>checkstyle</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2017/05/27/tools/git/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a><a href="https://github.com/git-for-windows/git/releases/" target="_blank" rel="noopener">Git</a></h2><ul>
<li><a href="https://github.com/git-for-windows/git/releases/download/v2.28.0.windows.1/PortableGit-2.28.0-32-bit.7z.exe" target="_blank" rel="noopener">https://github.com/git-for-windows/git/releases/download/v2.28.0.windows.1/PortableGit-2.28.0-32-bit.7z.exe</a></li>
<li><a href="https://github.com/git-for-windows/git/releases/download/v2.28.0.windows.1/PortableGit-2.28.0-64-bit.7z.exe" target="_blank" rel="noopener">https://github.com/git-for-windows/git/releases/download/v2.28.0.windows.1/PortableGit-2.28.0-64-bit.7z.exe</a></li>
</ul>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><ol>
<li>将Git免安装版解压到指定(如 D:\Portable\Scrum\Git)目录  </li>
<li>配置环境变量<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">$ setx GIT_HOME "D:\Portable\Scrum\Git"</span><br><span class="line">$ setx <span class="built_in">PATH</span> "<span class="variable">%PATH%</span>;<span class="variable">%GIT_HOME%</span>\<span class="built_in">cmd</span>;"</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>Mac 终端的用户可通过 <code>xcode-select --install</code> 命令安装命令行工具，命令行工具(Command Line Tools)为 Mac 终端用户提供了许多常用的工具、实用程序和编译器，其中包括git、make、gcc、clang、python3、size、strip、strings、libtool、cpp以及其它很多能够在 Linux 默认安装中找到的有用命令。</p>
</blockquote>
<h2 id="SSH多个KEY管理"><a href="#SSH多个KEY管理" class="headerlink" title="SSH多个KEY管理"></a>SSH多个KEY管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成SSH KEY</span></span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">"lugavin@outlook.com"</span> -f id_rsa_github</span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">"lugavin@outlook.com"</span> -f id_rsa_gitlab</span><br><span class="line"></span><br><span class="line">$ vi ~/.ssh/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># config配置文件</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line"></span><br><span class="line">Host gitlab.com</span><br><span class="line">HostName gitlab.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_gitlab</span><br><span class="line"></span><br><span class="line">Host *</span><br><span class="line">PreferredAuthentications publickey,password</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试config配置文件</span></span><br><span class="line">$ ssh -vT git@github.com</span><br></pre></td></tr></table></figure>
<h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><h3 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">"[name]"</span></span><br><span class="line">$ git config [--global] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></table></figure>
<h3 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>
<h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>
<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>
<h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>
<h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure>
<h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://kapeli.com/cheat_sheets/Git.docset/Contents/Resources/Documents/index" target="_blank" rel="noopener">Git Docset</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">阮一峰. <em>常用 Git 命令清单</em></a></li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo</title>
    <url>/2017/05/27/tools/hexo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">Markdown</a> 解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装<a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></h3><p>安装完成后可通过以下命名查询版本和安装目标路径信息：<br><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">$ where node</span><br></pre></td></tr></table></figure></p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></h3><p>安装完成后可通过以下命名查询版本和安装目标路径信息：<br><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">$ where git</span><br></pre></td></tr></table></figure></p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装<a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a></h3><p>安装完成后可通过以下命名查询版本和安装目标路径信息：<br><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">$ where npm</span><br><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo -v</span><br><span class="line">$ where hexo</span><br></pre></td></tr></table></figure></p>
<h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> your-hexo-site</span><br><span class="line">$ <span class="built_in">cd</span> your-hexo-site</span><br><span class="line">$ hexo init</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p>
<p>新建完成后，指定文件夹的目录如下：<br><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">site</span><br><span class="line">+-- _config.yml  ##网站的配置信息</span><br><span class="line">+-- package.json ##应用程序的信息</span><br><span class="line">+-- scaffolds    ##模版文件夹</span><br><span class="line">+-- source       ##资源文件夹</span><br><span class="line">|   +-- _drafts  ##draft布局对应的路径</span><br><span class="line">|   +-- _posts   ##post布局对应的路径</span><br><span class="line">+-- themes       ##主题文件夹</span><br></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your-hexo-site</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>Hexo 生成的所有文件都放在 public 文件夹中，您可以将它们复制到您喜欢的地方。</p>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h4 id="hexo-deployer-git"><a href="#hexo-deployer-git" class="headerlink" title="hexo-deployer-git"></a><a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a></h4><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h4 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:lugavin/lugavin.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="comment">#message: [message]</span></span><br></pre></td></tr></table></figure>
<h4 id="GitHub-Actions配置"><a href="#GitHub-Actions配置" class="headerlink" title="GitHub Actions配置"></a>GitHub Actions配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># See https://github.com/actions/checkout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="comment"># [PRIVATE KEY](https://github.com/lugavin/blog/settings/secrets)</span></span><br><span class="line">        <span class="comment"># [PUBLIC KEY](https://github.com/settings/keys)</span></span><br><span class="line">        <span class="attr">ACCESS_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">"$ACCESS_TOKEN"</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">'\r'</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">        <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">        <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span>  <span class="string">'lugavin'</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">'lugavin@outlook.com'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">run</span> <span class="string">clean</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="hexo-all-minifier"><a href="#hexo-all-minifier" class="headerlink" title="hexo-all-minifier"></a><a href="https://github.com/chenzhutian/hexo-all-minifier" target="_blank" rel="noopener">hexo-all-minifier</a></h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-all-minifier --save</span><br></pre></td></tr></table></figure>
<p>安装完成后，修改站点配置文件_config.yml：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">html_minifier:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">ignore_error:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line"><span class="attr">css_minifier:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'*.min.css'</span></span><br><span class="line"><span class="attr">js_minifier:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'*.min.js'</span></span><br><span class="line"><span class="attr">image_minifier:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">interlaced:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">multipass:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">optimizationLevel:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">pngquant:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">progressive:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<h3 id="hexo-generator-searchdb"><a href="#hexo-generator-searchdb" class="headerlink" title="hexo-generator-searchdb"></a><a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener">hexo-generator-searchdb</a></h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>安装完成后，修改主题配置文件_config.yml：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure></p>
<h3 id="hexo-generator-feed"><a href="#hexo-generator-feed" class="headerlink" title="hexo-generator-feed"></a><a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a></h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
<p>安装完成后，修改主题配置文件_config.yml：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rss:</span> <span class="string">atom.xml</span></span><br></pre></td></tr></table></figure></p>
<h3 id="hexo-generator-sitemap"><a href="#hexo-generator-sitemap" class="headerlink" title="hexo-generator-sitemap"></a><a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="noopener">hexo-generator-sitemap</a></h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>
<p>安装完成后，修改主题配置文件_config.yml：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">/sitemap.xml</span></span><br></pre></td></tr></table></figure></p>
<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><ol>
<li><p>新建页面</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your-hexo-site</span><br><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置页面类型<br>执行上述命令后将会自动创建source/tags/index.md文件，编辑该文件，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2017-05-18 07:49:30</span><br><span class="line">type: "tags"</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改菜单<br>编辑主题配置文件，添加 tags 到 menu 中：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol>
<li><p>新建页面</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your-hexo-site</span><br><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置页面类型<br>执行上述命令后将会自动创建source/categories/index.md文件，编辑该文件，将页面的 type 设置为 categories ，主题将自动为这个页面显示分类：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2017-05-18 07:52:11</span><br><span class="line">type: "categories"</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改菜单<br>编辑主题配置文件，添加 categories 到 menu 中：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h3><p>执行以下命令后将会自动创建source/about/index.md文件，可编辑该文件录入作者相关信息。</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your-hexo-site</span><br><span class="line">$ hexo new page about</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Microsoft</title>
    <url>/2017/05/27/tools/microsoft/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Windows-ISO-Images"><a href="#Windows-ISO-Images" class="headerlink" title="Windows ISO Images"></a>Windows ISO Images</h2><ul>
<li><a href="ed2k://|file|cn_windows_7_professional_with_sp1_vl_build_x86_dvd_u_677939.iso|2502909952|935E5B4B754527BE3C238FA6ABDD9B86|/" target="_blank" rel="noopener">cn_windows_7_professional_with_sp1_vl_build_x86_dvd_u_677939.iso</a></li>
<li><a href="ed2k://|file|cn_windows_7_professional_with_sp1_vl_build_x64_dvd_u_677816.iso|3266004992|5A52F4CCEFA71797D58389B397038B2F|/" target="_blank" rel="noopener">cn_windows_7_professional_with_sp1_vl_build_x64_dvd_u_677816.iso</a></li>
<li><a href="ed2k://|file|cn_windows_8_pro_vl_x86_dvd_917720.iso|2595137536|E87CEF7B8B4EFB12B0A7397795209301|/" target="_blank" rel="noopener">cn_windows_8_pro_vl_x86_dvd_917720.iso</a></li>
<li><a href="ed2k://|file|cn_windows_8_pro_vl_x64_dvd_917773.iso|3558014976|7956620A80428F37D4F2989CB5CF3B5A|/" target="_blank" rel="noopener">cn_windows_8_pro_vl_x64_dvd_917773.iso</a></li>
<li><a href="ed2k://|file|cn_windows_8_1_pro_vl_x86_dvd_2972620.iso|3049981952|5B396C3A0BA99617647D9AFE8403AFA5|/" target="_blank" rel="noopener">cn_windows_8_1_pro_vl_x86_dvd_2972620.iso</a></li>
<li><a href="ed2k://|file|cn_windows_8_1_pro_vl_x64_dvd_2971907.iso|4032598016|1FDA520B3E8880E2FB00B20439E0826E|/" target="_blank" rel="noopener">cn_windows_8_1_pro_vl_x64_dvd_2971907.iso</a></li>
<li><a href="ed2k://|file|cn_windows_10_enterprise_ltsc_2019_x86_dvd_1814dbab.iso|3196803072|2D39C54A2E99BAC308191C74A15B3237|/" target="_blank" rel="noopener">cn_windows_10_enterprise_ltsc_2019_x86_dvd_1814dbab.iso</a></li>
<li><a href="ed2k://|file|cn_windows_10_enterprise_ltsc_2019_x64_dvd_9c09ff24.iso|4478906368|E7C526499308841A4A6D116C857DB669|/" target="_blank" rel="noopener">cn_windows_10_enterprise_ltsc_2019_x64_dvd_9c09ff24.iso</a></li>
<li><a href="ed2k://|file|SW_DVD9_Win_Pro_11_21H2_64ARM_ChnSimp_Pro_Ent_EDU_N_MLF_-2_X22-82731.ISO|5608900608|5D3A8B542CBAB917C7AE43BCD17AC28E|/" target="_blank" rel="noopener">SW_DVD9_Win_Pro_11_21H2_64ARM_ChnSimp_Pro_Ent_EDU_N_MLF_-2_X22-82731.ISO</a></li>
</ul>
<h2 id="Diskpart"><a href="#Diskpart" class="headerlink" title="Diskpart"></a><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/diskpart" target="_blank" rel="noopener">Diskpart</a></h2><blockquote>
<p>Once Windows Setup is loaded, press Shirt + F10 keys at the first setup screen. A Command Prompt window will be opened.</p>
</blockquote>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">For</span> Win7/<span class="number">8</span></span><br><span class="line">$ diskpart</span><br><span class="line">DISKPART&gt; list disk</span><br><span class="line">DISKPART&gt; select disk <span class="number">0</span></span><br><span class="line">DISKPART&gt; clean</span><br><span class="line">DISKPART&gt; create partition primary size = <span class="number">82020</span></span><br><span class="line">DISKPART&gt; active</span><br><span class="line">DISKPART&gt; <span class="built_in">format</span> quick</span><br><span class="line">DISKPART&gt; create partition extended</span><br><span class="line">DISKPART&gt; create partition logical size = <span class="number">153700</span></span><br><span class="line">DISKPART&gt; <span class="built_in">format</span> quick</span><br><span class="line">DISKPART&gt; create partition logical size = <span class="number">307300</span></span><br><span class="line">DISKPART&gt; <span class="built_in">format</span> quick</span><br><span class="line">DISKPART&gt; create partition logical</span><br><span class="line">DISKPART&gt; <span class="built_in">format</span> quick</span><br><span class="line">DISKPART&gt; <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">For</span> Win10/<span class="number">11</span></span><br><span class="line">$ diskpart</span><br><span class="line">DISKPART&gt; list disk</span><br><span class="line">DISKPART&gt; select disk <span class="number">0</span></span><br><span class="line">DISKPART&gt; clean</span><br><span class="line">DISKPART&gt; <span class="built_in">convert</span> gpt</span><br><span class="line">DISKPART&gt; create partition msr size = <span class="number">512</span></span><br><span class="line">DISKPART&gt; create partition primary size = <span class="number">82020</span></span><br><span class="line">DISKPART&gt; <span class="built_in">format</span> quick</span><br><span class="line">DISKPART&gt; create partition primary size = <span class="number">153700</span></span><br><span class="line">DISKPART&gt; <span class="built_in">format</span> quick</span><br><span class="line">DISKPART&gt; create partition primary size = <span class="number">307300</span></span><br><span class="line">DISKPART&gt; <span class="built_in">format</span> quick</span><br><span class="line">DISKPART&gt; create partition primary</span><br><span class="line">DISKPART&gt; <span class="built_in">format</span> quick</span><br><span class="line">DISKPART&gt; <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
<h2 id="Create-a-Bootable-Drive"><a href="#Create-a-Bootable-Drive" class="headerlink" title="Create a Bootable Drive"></a><a href="https://learn.microsoft.com/en-us/windows-server-essentials/install/create-a-bootable-usb-flash-drive" target="_blank" rel="noopener">Create a Bootable Drive</a></h2><ol>
<li><p>Insert a USB flash drive into a running computer.</p>
</li>
<li><p>Open a Command Prompt window as an administrator.</p>
</li>
<li><p>Type <code>diskpart</code>.</p>
</li>
<li><p>In the new command line window that opens, to determine the USB flash drive number or drive letter, at the command prompt, type <code>list disk</code>, and then click ENTER. The <code>list disk</code> command displays all the disks on the computer. Note the drive number or drive letter of the USB flash drive.</p>
</li>
<li><p>At the command prompt, type <code>select disk &lt;X&gt;</code>, where X is the drive number or drive letter of the USB flash drive, and then click ENTER.</p>
</li>
<li><p>Type <code>clean</code>, and the click ENTER. This command deletes all data from the USB flash drive.</p>
</li>
<li><p>To create a new primary partition on the USB flash drive, type <code>create partition primary</code>, and then click ENTER.</p>
</li>
<li><p>To select the partition that you just created, type <code>select partition 1</code>, and then click ENTER.</p>
</li>
<li><p>To format the partition, type <code>format fs=ntfs quick</code>, and then click ENTER.</p>
</li>
<li><p>Type <code>active</code>, and then click ENTER.</p>
</li>
<li><p>Type <code>exit</code>, and then click ENTER.</p>
</li>
<li><p>When you finish preparing your custom image, save it to the root of the USB flash drive.</p>
</li>
</ol>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">$ diskpart</span><br><span class="line">DISKPART&gt; list disk</span><br><span class="line">DISKPART&gt; select disk <span class="number">1</span></span><br><span class="line">DISKPART&gt; clean</span><br><span class="line">DISKPART&gt; create partition primary</span><br><span class="line">DISKPART&gt; list partition</span><br><span class="line">DISKPART&gt; active</span><br><span class="line">DISKPART&gt; <span class="built_in">format</span> <span class="built_in">fs</span>=ntfs quick</span><br><span class="line">DISKPART&gt; <span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line"># Mount the ISO image (G:) and then <span class="built_in">move</span> its content to your USB drive (F:)</span><br><span class="line"><span class="function">G:\&gt;<span class="title">cd</span> <span class="title">boot</span></span></span><br><span class="line"><span class="function"><span class="title">G</span>:\<span class="title">boot</span>&gt;<span class="title">bootsect</span> /<span class="title">nt60</span> <span class="title">F</span>:</span></span><br><span class="line"><span class="function"><span class="title">G</span>:\<span class="title">boot</span>&gt;<span class="title">xcopy</span> <span class="title">G</span>:\*.* <span class="title">F</span>:\ \<span class="title">E</span> \<span class="title">F</span> \<span class="title">H</span></span></span><br></pre></td></tr></table></figure>
<h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><ul>
<li><a href="https://learn.microsoft.com/en-us/windows-server-essentials/install/create-a-bootable-usb-flash-drive" target="_blank" rel="noopener">Create a Bootable USB Flash Drive</a></li>
<li><a href="https://www.makeuseof.com/windows-11-create-bootable-usb-drive/" target="_blank" rel="noopener">How to Create a Bootable Drive Using Command Prompt</a></li>
</ul>
]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>microsoft</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN</title>
    <url>/2017/05/27/tools/svn/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="SmartSVN"><a href="#SmartSVN" class="headerlink" title="SmartSVN"></a><a href="https://www.smartsvn.com/download/" target="_blank" rel="noopener">SmartSVN</a></h2><ul>
<li><a href="https://www.smartsvn.com/downloads/smartsvn/smartsvn-windows-portable-14_0_0.zip" target="_blank" rel="noopener">https://www.smartsvn.com/downloads/smartsvn/smartsvn-windows-portable-14_0_0.zip</a></li>
<li><a href="https://www.smartsvn.com/downloads/smartsvn/smartsvn-macosx-14_0_0.dmg" target="_blank" rel="noopener">https://www.smartsvn.com/downloads/smartsvn/smartsvn-macosx-14_0_0.dmg</a></li>
<li><a href="https://www.smartsvn.com/downloads/smartsvn/smartsvn-linux-14_0_0.tar.gz" target="_blank" rel="noopener">https://www.smartsvn.com/downloads/smartsvn/smartsvn-linux-14_0_0.tar.gz</a></li>
</ul>
<h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a><a href="https://tortoisesvn.net/docs/nightly/TortoiseSVN_zh_CN/tsvn-repository.html" target="_blank" rel="noopener">创建版本库</a></h2><ol>
<li><p>使用命令行工具创建版本库</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> SVNRepository</span><br><span class="line">$ svnadmin create --<span class="built_in">fs</span>-<span class="built_in">type</span> fsfs SVNRepository</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 ${SVNRepository}\conf\svnserve.conf 配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># password-db = passwd</span><br><span class="line">password-db = passwd</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 ${SVNRepository}\conf\passwd 配置文件</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="comment"># harry = harryssecret</span></span><br><span class="line"><span class="comment"># sally = sallyssecret</span></span><br><span class="line"><span class="attr">admin</span> = admin</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行以下命令启动subversion</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">$ svnserve -d -r SVNRepository</span><br></pre></td></tr></table></figure>
</li>
<li><p>在${SVNRepository}目录下创建trunk/branches/tags三个目录并Import到版本库(如 D:\SVNRepository)中</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> SVNRepository</span><br><span class="line">$ <span class="built_in">mkdir</span> trunk</span><br><span class="line">$ svn import -m "New import" trunk file:///D:/SVNRepository/trunk</span><br><span class="line">$ <span class="built_in">mkdir</span> branches</span><br><span class="line">$ svn import -m "New import" branches file:///D:/SVNRepository/branches</span><br><span class="line">$ <span class="built_in">mkdir</span> tags</span><br><span class="line">$ svn import -m "New import" tags file:///D:/SVNRepository/tags</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>JSONP</title>
    <url>/2018/10/08/web/jsonp/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="造成跨域的两种策略"><a href="#造成跨域的两种策略" class="headerlink" title="造成跨域的两种策略"></a>造成跨域的两种策略</h2><p>浏览器的同源策略会导致跨域，这里同源策略又分为以下两种：</p>
<ul>
<li><p>DOM同源策略：禁止对不同源页面DOM进行操作(这里主要场景是iframe跨域的情况，不同域名的iframe是限制互相访问的)</p>
</li>
<li><p>XMLHttpRequest同源策略：禁止使用XHR对象向不同源的服务器地址发起HTTP请求。</p>
</li>
</ul>
<p>只要协议、域名、端口有任何一个不同，都被当作是不同的域，之间的请求就是跨域操作。</p>
<h2 id="为什么要有跨域限制"><a href="#为什么要有跨域限制" class="headerlink" title="为什么要有跨域限制"></a>为什么要有跨域限制</h2><p>AJAX同源策略主要用来防止CSRF攻击，试想如果没有AJAX同源策略，我们发起的每一次HTTP请求都会带上请求地址对应的cookie（用户标识），那就相当危险了。因为一旦cookie泄露，攻击者就可以模拟用户进行一些非法操作了，所以，跨域限制主要是为了安全考虑。</p>
<h2 id="跨域的解决方式"><a href="#跨域的解决方式" class="headerlink" title="跨域的解决方式"></a>跨域的解决方式</h2><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS(Cross-Origin Resource Sharing)即跨域资源共享，是一个W3C标准，大体流程：</p>
<ul>
<li>对于客户端，我们还是正常使用xhr对象发送ajax请求，唯一需要注意的是，我们需要设置xhr的withCredentials属性为true，否则，cookie是不发送的。</li>
<li>对于服务器端，需要在响应头中设置如下两个字段：<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Allow-Origin: http://www.domain.com</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这样，我们就可以跨域请求接口了。</p>
<h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>我们知道，<code>&lt;script&gt;</code>标签是不受同源策略的限制的，它可以载入任意地方的js脚本而并不要求同源。JSONP正是利用了这一点，通过动态添加<code>&lt;script&gt;</code>标签来实现跨域请求。</p>
<p>JSONP的核心就是：允许用户传递一个callback参数给服务端，服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Detect, normalize options and install callbacks for jsonp requests</span></span><br><span class="line">jQuery.ajaxPrefilter( <span class="string">"json jsonp"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> s, originalSettings, jqXHR </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> callbackName, overwritten, responseContainer,</span><br><span class="line">		jsonProp = s.jsonp !== <span class="literal">false</span> &amp;&amp; ( rjsonp.test( s.url ) ?</span><br><span class="line">			<span class="string">"url"</span> :</span><br><span class="line">			<span class="keyword">typeof</span> s.data === <span class="string">"string"</span> &amp;&amp; !( s.contentType || <span class="string">""</span> ).indexOf(<span class="string">"application/x-www-form-urlencoded"</span>) &amp;&amp; rjsonp.test( s.data ) &amp;&amp; <span class="string">"data"</span></span><br><span class="line">		);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Handle iff the expected data type is "jsonp" or we have a parameter to set</span></span><br><span class="line">	<span class="keyword">if</span> ( jsonProp || s.dataTypes[ <span class="number">0</span> ] === <span class="string">"jsonp"</span> ) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Get callback name, remembering preexisting value associated with it</span></span><br><span class="line">		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ? s.jsonpCallback() : s.jsonpCallback;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Insert callback into url or form data</span></span><br><span class="line">		<span class="keyword">if</span> ( jsonProp ) &#123;</span><br><span class="line">			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, <span class="string">"$1"</span> + callbackName );</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( s.jsonp !== <span class="literal">false</span> ) &#123;</span><br><span class="line">			s.url += ( ajax_rquery.test( s.url ) ? <span class="string">"&amp;"</span> : <span class="string">"?"</span> ) + s.jsonp + <span class="string">"="</span> + callbackName;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Use data converter to retrieve json after script execution</span></span><br><span class="line">		s.converters[<span class="string">"script json"</span>] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> ( !responseContainer ) &#123;</span><br><span class="line">				jQuery.error( callbackName + <span class="string">" was not called"</span> );</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> responseContainer[ <span class="number">0</span> ];</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// force json dataType</span></span><br><span class="line">		s.dataTypes[ <span class="number">0</span> ] = <span class="string">"json"</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Install callback</span></span><br><span class="line">		overwritten = <span class="built_in">window</span>[ callbackName ];</span><br><span class="line">		<span class="built_in">window</span>[ callbackName ] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			responseContainer = <span class="built_in">arguments</span>;</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Clean-up function (fires after converters)</span></span><br><span class="line">		jqXHR.always(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="comment">// Restore preexisting value</span></span><br><span class="line">			<span class="built_in">window</span>[ callbackName ] = overwritten;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Save back as free</span></span><br><span class="line">			<span class="keyword">if</span> ( s[ callbackName ] ) &#123;</span><br><span class="line">				<span class="comment">// make sure that re-using the options doesn't screw things around</span></span><br><span class="line">				s.jsonpCallback = originalSettings.jsonpCallback;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// save the callback name for future use</span></span><br><span class="line">				oldCallbacks.push( callbackName );</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Call if it was a function and we have a response</span></span><br><span class="line">			<span class="keyword">if</span> ( responseContainer &amp;&amp; jQuery.isFunction( overwritten ) ) &#123;</span><br><span class="line">				overwritten( responseContainer[ <span class="number">0</span> ] );</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			responseContainer = overwritten = <span class="literal">undefined</span>;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Delegate to script</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">"script"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bind script tag hack transport</span></span><br><span class="line">jQuery.ajaxTransport( <span class="string">"script"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> s </span>) </span>&#123;</span><br><span class="line">	<span class="comment">// This transport only deals with cross domain requests</span></span><br><span class="line">	<span class="keyword">if</span> ( s.crossDomain ) &#123;</span><br><span class="line">		<span class="keyword">var</span> script, callback;</span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">			send: <span class="function"><span class="keyword">function</span>(<span class="params"> _, complete </span>) </span>&#123;</span><br><span class="line">				script = jQuery(<span class="string">"&lt;script&gt;"</span>).prop(&#123;</span><br><span class="line">					<span class="keyword">async</span>: <span class="literal">true</span>,</span><br><span class="line">					charset: s.scriptCharset,</span><br><span class="line">					src: s.url</span><br><span class="line">				&#125;).on(</span><br><span class="line">					<span class="string">"load error"</span>,</span><br><span class="line">					callback = <span class="function"><span class="keyword">function</span>(<span class="params"> evt </span>) </span>&#123;</span><br><span class="line">						script.remove();</span><br><span class="line">						callback = <span class="literal">null</span>;</span><br><span class="line">						<span class="keyword">if</span> ( evt ) &#123;</span><br><span class="line">							complete( evt.type === <span class="string">"error"</span> ? <span class="number">404</span> : <span class="number">200</span>, evt.type );</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				);</span><br><span class="line">				<span class="built_in">document</span>.head.appendChild( script[ <span class="number">0</span> ] );</span><br><span class="line">			&#125;,</span><br><span class="line">			abort: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">				<span class="keyword">if</span> ( callback ) &#123;</span><br><span class="line">					callback();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;script src="url?jsonpCallback=callbackFunction"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountResource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @GetMapping(produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span></span><br><span class="line">    <span class="comment">// public String getAccount(@RequestParam String jsonpCallback) &#123;</span></span><br><span class="line">    <span class="comment">//     Subject subject = subjectService.getSubject();</span></span><br><span class="line">    <span class="comment">//     String json = JsonUtils.toJson(subject);</span></span><br><span class="line">    <span class="comment">//     return String.format("%s(%s)", jsonpCallback, json);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;MappingJacksonValue&gt; <span class="title">getAccount</span><span class="params">(@RequestParam String jsonpCallback)</span> </span>&#123;</span><br><span class="line">        Subject subject = subjectService.getSubject();</span><br><span class="line">        MappingJacksonValue jacksonValue = <span class="keyword">new</span> MappingJacksonValue(subject);</span><br><span class="line">        jacksonValue.setJsonpFunction(jsonpCallback);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(jacksonValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>jsonp</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT</title>
    <url>/2020/05/21/web/jwt/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在设计Web应用程序时，安全认证是其中的关键部分。使用令牌进行认证是这方面的一个突破，而刷新令牌的出现，则是对其进行了补充并使其可用。</p>
<h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>身份认证系统根据如何验证用户可划分为：</p>
<ul>
<li>基于已知的东西（密码）</li>
<li>基于拥有的东西（身份证、U盘、令牌）</li>
<li>基于体貌特征（声音、指纹、眼睛）</li>
</ul>
<h3 id="基于令牌的身份认证"><a href="#基于令牌的身份认证" class="headerlink" title="基于令牌的身份认证"></a>基于令牌的身份认证</h3><p>令牌是通过现代认证和授权引入Web应用程序的。 我们可以说，由于OAuth协议，它的使用得到了扩展。这些都集中在授权上，而不是人们通常认为的身份验证上。当我们谈论到使用令牌进行身份验证时，我们可以将其分为两种类型：基于令牌的有状态认证和基于令牌的无状态认证。</p>
<h4 id="基于令牌的有状态认证"><a href="#基于令牌的有状态认证" class="headerlink" title="基于令牌的有状态认证"></a>基于令牌的有状态认证</h4><p>这是最常见的认证模式。当用户登录时，服务器会返回一个令牌，这个令牌通常存储在客户端浏览器的Cookie中，服务器会将会话信息保存在内存或数据库中（Redis、MongoDB…）。</p>
<p>因此，每次用户用该令牌发起请求时，服务器都会搜索存储的会话信息以识别出是哪个用户在尝试访问，如果用户信息有效，就会执行所请求的方法。</p>
<p>这种认证方式有几个问题，比如超载（存储所有被认证用户的信息会造成超载）、可扩展性（如果启动了多个服务器实例，为避免再次登录，将不得不以某种方式共享会话信息），除此之外，这种架构还存在着一些漏洞（CORS - 跨域资源共享、CSRF - 跨站请求伪造）。</p>
<h4 id="基于令牌的无状态认证"><a href="#基于令牌的无状态认证" class="headerlink" title="基于令牌的无状态认证"></a>基于令牌的无状态认证</h4><p>为了解决上述的这些问题，无状态认证出现了。这意味着服务器不会存储任何信息，也不会存储会话。</p>
<p>当用户使用凭证或其他方式进行身份验证时，在响应中将接收到一个访问令牌。从那一刻起，所有发起的API请求都会在HTTP头中携带这个令牌，这样服务器就可以识别出是哪个用户发起的请求，而不需要搜索数据库或其他存储系统。</p>
<p>使用这种认证方式，应用程序变得可扩展，因为是客户端本身存储其认证信息而不是服务器，这样一来，请求可以在没有同步的情况下到达任意的服务器实例；此外，不同的平台可以使用相同的API；同时，这也提高了安全性，避免了CSRF漏洞（因为没有会话），并且，如果我们在令牌中加入过期时间，安全性会更高。</p>
<h2 id="JWT认证"><a href="#JWT认证" class="headerlink" title="JWT认证"></a>JWT认证</h2><p>JWT是基于JSON的开放标准，用于创建允许应用程序或API资源使用的访问令牌。这个令牌将包含服务器识别所需要的用户信息以及其他可能有用的附加信息（如角色、权限等）。</p>
<p>访问令牌也可以设置一个有效期，一旦有效期过了，服务器将不再允许用户使用这个令牌访问资源。此时，用户必须通过重新认证或一些额外的方法（刷新令牌）来获得一个新的访问令牌。</p>
<p>JWT将JSON作为令牌中存储的信息要使用的内部格式。此外，如果与JWS和JWE结合使用，它会变得非常有用。将JWT与JWS和JWE结合，我们不仅可以对用户进行身份验证，还可以将加密后的信息发送出去，这样只有服务器才能提取加密后的信息出来，同时还可以对内容进行校验以确保没有被篡改。</p>
<p>JWT令牌由三个部分组成：头信息、消息体和签名，中间使用点号分割：Header.Payload.Signature</p>
<ul>
<li>头信息：Header 部分是一个 JSON 对象，描述 JWT 的元数据，如alg属性表示签名的算法，typ属性表示这个令牌的类型</li>
<li>消息体：Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据</li>
<li>签名：Signature 部分是对前两部分内容的签名，以防止数据被篡改</li>
</ul>
<h3 id="令牌类型"><a href="#令牌类型" class="headerlink" title="令牌类型"></a>令牌类型</h3><p>令牌有很多类型，不过在JWT认证中，最典型的是访问令牌和刷新令牌：</p>
<ul>
<li>访问令牌：它包含了服务器需要知道用户是否可以访问所请求资源的所有信息。访问令牌通常是过期的令牌，其有效期很短。</li>
<li>刷新令牌：刷新令牌用于生成一个新的访问令牌。通常情况下，如果访问令牌设置了有效期，一旦过期，用户就必须重新认证才能获得新的访问令牌。使用刷新令牌则可以跳过这一步，只需携带刷新令牌发起请求，就可以获得一个新的访问令牌，以允许用户继续访问应用资源。</li>
</ul>
<p>当用户访问之前没有访问过的资源时，可能也需要生成一个新的访问令牌，不过这取决于API实现的限制。</p>
<p>与访问令牌相比，刷新令牌在存储时需要更高的安全性，因为如果它被第三方窃取，他们就可以利用它来获得访问令牌以访问受保护的应用资源。为了减少这种情况的发生，除了设置一个明显比访问令牌更长的有效期之外，应用还必须在服务端实现使刷新令牌失效的功能。</p>
<h3 id="刷新令牌的实现"><a href="#刷新令牌的实现" class="headerlink" title="刷新令牌的实现"></a>刷新令牌的实现</h3><p>在这个例子中，我将跳过数据库部分，因而，尽管我会对其进行说明，但仍需要进行一些应该做的安全检查。我之所以这样做的原因是为了展示尽可能简单的代码，而并不限制任何永久性系统的实现。</p>
<p>在第一段代码中，我们只是简单地启动一个Node服务，就像其他应用程序一样。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8999</span>)</span><br></pre></td></tr></table></figure>
<p>我们首先要做的第一件事是添加一个验证用户身份的方法，最典型的是使用用户名和密码。为了简化代码，未从数据库中进行校验，且允许我们访问所有用户。</p>
<p>在方法返回值中，我们将同时返回访问令牌和刷新令牌。正如我们在实现中看到的那样，令牌的有效期为300秒。</p>
<p>对于访问令牌，我们使用 <a href="https://github.com/auth0/node-jsonwebtoken" target="_blank" rel="noopener">jsonwebtoken</a> 模块来加密并生成签名，即我们只需将要加密的对象以及用于加密和解密的密钥传递给它，就可自动生成JWT令牌。</p>
<p>对于刷新令牌，我们将简单地生成一个UID，并将其与相关联的用户名一起储存在内存中。在完整实现中，我们可以将用户的信息、令牌的创建时间和失效时间保存在数据库中。</p>
<p>虽然刷新令牌也可以是自包含令牌，就像我们创建的访问令牌一样，这种实现的好处是不用访问数据库来获取必要的信息。但如果是自包含令牌的话，我们将无法知道刷新令牌是否已被加入黑名单或被管理员覆写，又或者，如果用户被管理员禁用了，我们也无法知晓。这就是为什么我更喜欢通过不带自包含信息来实现这种类型的令牌。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">var</span> jwt = <span class="built_in">require</span>(<span class="string">'jsonwebtoken'</span>) </span><br><span class="line"><span class="keyword">var</span> randtoken = <span class="built_in">require</span>(<span class="string">'rand-token'</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> refreshTokens = &#123;&#125; </span><br><span class="line"><span class="keyword">var</span> SECRET = <span class="string">"SECRETO_PARA_ENCRIPTACION"</span> </span><br><span class="line">app.use(bodyParser.json()) </span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;)) </span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/login'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">var</span> username = req.body.username </span><br><span class="line">  <span class="keyword">var</span> password = req.body.password</span><br><span class="line">  <span class="keyword">var</span> user = &#123; </span><br><span class="line">    <span class="string">'username'</span>: username, </span><br><span class="line">    <span class="string">'role'</span>: <span class="string">'admin'</span> </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">var</span> token = jwt.sign(user, SECRET, &#123; <span class="attr">expiresIn</span>: <span class="number">300</span> &#125;) </span><br><span class="line">  <span class="keyword">var</span> refreshToken = randtoken.uid(<span class="number">256</span>) </span><br><span class="line">  refreshTokens[refreshToken] = username</span><br><span class="line">  res.json(&#123;<span class="attr">token</span>: <span class="string">'JWT '</span> + token, <span class="attr">refreshToken</span>: refreshToken&#125;) </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>为了请求一个新的访问令牌，我们创建了 /token 资源。在该API中，我们接收刷新令牌和拥有该令牌的用户名。在这里，我们要做的是检查刷新令牌列表中是否包含发送给我们的令牌，并且该令牌具有相同的用户名。如果正确的话，我们会生成一个新的令牌，其中包含用户的信息（我们会从数据库中获取）并返回。</p>
<p>在应用中，如果管理员可以暂时禁用用户或刷新令牌，则我们还必须在生成新的访问令牌之前对其进行检查。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">'/token'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> username = req.body.username</span><br><span class="line">  <span class="keyword">var</span> refreshToken = req.body.refreshToken</span><br><span class="line">  <span class="keyword">if</span>((refreshToken <span class="keyword">in</span> refreshTokens) &amp;&amp; (refreshTokens[refreshToken] == username)) &#123;</span><br><span class="line">    <span class="keyword">var</span> user = &#123;</span><br><span class="line">      <span class="string">'username'</span>: username,</span><br><span class="line">      <span class="string">'role'</span>: <span class="string">'admin'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> token = jwt.sign(user, SECRET, &#123; <span class="attr">expiresIn</span>: <span class="number">300</span> &#125;)</span><br><span class="line">    res.json(&#123;<span class="attr">token</span>: <span class="string">'JWT '</span> + token&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    res.send(<span class="number">401</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在这种架构中，有必要有一种方法可来禁用刷新令牌，以避免冒名顶替和滥用。</p>
<p>在应用程序中，用户可以使用同一个身份（相同的用户名）在不同设备上工作，但每个设备上使用不同的令牌，如果其中一个令牌丢失或被盗，这个方法将允许管理员删除或禁用该刷新令牌，而不会影响用户在其他设备上的服务，也不需要重新认证、修改密码等。也就是说，用户可以继续工作而不受任何影响，也没有从被盗设备生成新访问令牌的风险。我们建议访问令牌设置较短的有效期，这样在这种情况下，可以快速恢复到安全状态。</p>
<p>为此，我们创建了一个 /token/reject 资源来禁用刷新令牌。在本示例中，我们只需将其从内存列表中删除即可。在完整的实现中，有必要验证发起请求是否是管理员或其他对此资源具有权限的用户。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">'/token/reject'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">var</span> refreshToken = req.body.refreshToken </span><br><span class="line">  <span class="keyword">if</span>(refreshToken <span class="keyword">in</span> refreshTokens) &#123; </span><br><span class="line">    <span class="keyword">delete</span> refreshTokens[refreshToken]</span><br><span class="line">  &#125; </span><br><span class="line">  res.send(<span class="number">204</span>) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>最后，我们将公开只能通过发送附带有先前获得的JWT令牌的请求头信息才能访问的资源，该令牌将由我们的应用程序生成并与使用我们的密钥（SECRET）签名。</p>
<p>在本示例中，我们将使用 <a href="http://passportjs.org/" target="_blank" rel="noopener">Passport</a> 模块。Passport是Nodejs中用于身份验证的中间件，它非常灵活且模块化，这体现在大量的模块中，每个模块都实现了不同的身份验证策略（JWT、Twitter、Facebook、Google、Auth0、SAML等多达300种）。我们可以使用其中的任何一种，导入和配置都很简单，把最复杂的认证部分交给Passport来完成即可。</p>
<p>首先，我们要加载中间件和必要的对象。Passport要求我们实现serializeUser方法（根据策略也可以实现deserializeUser），该方法用于将识别所需的用户信息储存在会话中。在我们的例子中，我们用用户名做索引，但理想的情况是使用ID。</p>
<p>事实上，既然是无状态认证，那么会话就没有意义了，如果我们只用JWT，Passport将永远不会使用 deserializeUser 反序列化方法，我把它注释掉，以防引入新的策略时会用到。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> passport = <span class="built_in">require</span>(<span class="string">'passport'</span>)</span><br><span class="line"><span class="keyword">var</span> JwtStrategy = <span class="built_in">require</span>(<span class="string">'passport-jwt'</span>).Strategy</span><br><span class="line"><span class="keyword">var</span> ExtractJwt = <span class="built_in">require</span>(<span class="string">'passport-jwt'</span>).ExtractJwt</span><br><span class="line"></span><br><span class="line">app.use(passport.initialize())</span><br><span class="line">app.use(passport.session())</span><br><span class="line"></span><br><span class="line">passport.serializeUser(<span class="function"><span class="keyword">function</span> (<span class="params">user, done</span>) </span>&#123;</span><br><span class="line">  done(<span class="literal">null</span>, user.username)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">passport.deserializeUser(function (username, done) &#123;</span></span><br><span class="line"><span class="comment">  done(null, username)</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>最后，我们需要做的是，每当请求到达需要身份认证的资源时，从令牌中提取信息并进行处理（变量jwtPayload将有我们在用户登录时加密的用户对象）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> token = jwt.sign(user, SECRET, &#123; <span class="attr">expiresIn</span>: <span class="number">300</span> &#125;)</span><br></pre></td></tr></table></figure>
<p>Passport身份验证策略配置如下：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> opts = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Setup JWT options</span></span><br><span class="line">opts.jwtFromRequest = ExtractJwt.fromAuthHeader()</span><br><span class="line">opts.secretOrKey = SECRET</span><br><span class="line"></span><br><span class="line">passport.use(<span class="keyword">new</span> JwtStrategy(opts, <span class="function"><span class="keyword">function</span> (<span class="params">jwtPayload, done</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//If the token has expiration, raise unauthorized</span></span><br><span class="line">  <span class="keyword">var</span> expirationDate = <span class="keyword">new</span> <span class="built_in">Date</span>(jwtPayload.exp * <span class="number">1000</span>)</span><br><span class="line">  <span class="keyword">if</span>(expirationDate &lt; <span class="keyword">new</span> <span class="built_in">Date</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> user = jwtPayload</span><br><span class="line">  done(<span class="literal">null</span>, user)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></p>
<p>我们将创建用于测试身份验证的 /test_jwt 资源，且只需告诉Passport，通过 jwt 策略，可以访问该路径来对进行身份验证。这样我们就有了一个想法，即通过Passport，我们可以使用不同的策略对每个资源进行身份验证，从而以非常简单的方式给我们提供了极大的灵活性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">'/test_jwt'</span>, passport.authenticate(<span class="string">'jwt'</span>), <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.json(&#123;<span class="attr">success</span>: <span class="string">'You are authenticated with JWT!'</span>, <span class="attr">user</span>: req.user&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过使用JWT，我们可以避免多次数据库调用，从而降低延迟，提高应用的效率。此外，通过使用刷新令牌，我们提高了这种架构的安全性和可用性。</p>
<p>在大量的项目中，使用令牌进行认证是非常有用的，但它不是解决所有问题、为所有产品服务的圣杯，但我们在提出任何解决方案时都必须考虑到它。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://solidgeargroup.com/en/refresh-token-with-jwt-authentication-node-js/" target="_blank" rel="noopener">Refresh token with JWT authentication in Node.js</a></li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>jwt</tag>
      </tags>
  </entry>
  <entry>
    <title>Nest</title>
    <url>/2020/05/01/web/nest/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近几年，由于 Node.js 的广泛流行，JavaScript 已经成为前端和后端应用程序的「通用语言」，从而产生了像<a href="https://angular.io/" target="_blank" rel="noopener">Angular</a>、<a href="https://zh-hans.reactjs.org/" target="_blank" rel="noopener">React</a>、<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue</a>等令人耳目一新的项目，这些项目提高了开发人员的生产力，使得可以快速构建可测试的且可扩展的前端应用程序。然而，在服务器端，虽然有很多优秀的库、helper 和 Node 工具，但是它们都没有有效地解决主要问题 - 架构。</p>
<p>Nest 旨在提供一个开箱即用的应用程序体系结构，允许轻松创建高度可测试、可扩展、松耦合且易于维护的应用程序。</p>
<p>Nest 是用于构建高效且可扩展的服务器端应用程序的渐进式 Node.js 框架，深受 Spring 和 Angular 的启发。它兼容 TypeScript 和纯 JavaScript，并结合了 OOP（面向对象编程）、FP（函数式编程）和 FRP（函数响应式编程），底层默认使用 Express，但也提供了与其他各种库的兼容（例如 Fastify），可以方便地使用各种可用的第三方插件。</p>
<h2 id="Controllers"><a href="#Controllers" class="headerlink" title="Controllers"></a><a href="https://docs.nestjs.com/controllers" target="_blank" rel="noopener">Controllers</a></h2><p><code>Controllers</code> 负责接收客户端的请求并返回响应。</p>
<p><code>Controller</code> 的目的是接收应用的特定请求，路由机制控制哪个控制器接收哪些请求。通常，每个控制器有多个路由，不同的路由可以执行不同的操作。为了创建一个基本的控制器，我们使用类和装饰器。装饰器将类与所需的元数据相关联，使得 <code>Nest</code> 可以创建路由映射（将请求绑定到相应的控制器）。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @Controller(): Decorator that marks a class as a Nest controller that can receive inbound </span></span><br><span class="line"><span class="comment"> * requests and produce responses.</span></span><br><span class="line"><span class="comment"> * It defines a class that provides the context for one or more related route handlers that </span></span><br><span class="line"><span class="comment"> * correspond to HTTP request methods and associated routes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">'dicts'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DictController &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly dictService: DictService</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Post</span>()</span><br><span class="line">    <span class="keyword">async</span> createDicts(<span class="meta">@Body</span>() entity: DictEntity): <span class="built_in">Promise</span>&lt;DictEntity&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.dictService.createDict(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Providers"><a href="#Providers" class="headerlink" title="Providers"></a><a href="https://docs.nestjs.com/providers" target="_blank" rel="noopener">Providers</a></h2><p><code>Provider</code> 只是一个用 <code>@Injectable()</code> 装饰器注释的纯粹的 <code>JavaScript</code> 类。</p>
<p><code>Provider</code> 的主要目的是它可以注入依赖项，这意味着对象可以彼此创建各种关系，并且“连接”对象实例的操作在很大程度上可以委托给 <code>Nest</code> 运行时系统。使用 <code>Nest</code> 内置的依赖注入（DI）技术，通过构造函数参数的方式，可以将 <code>Provider</code> 注入到其他类中。</p>
<p>当注入 <code>Provider</code> 时，<strong>它必须要在注入的类的模块范围内可见</strong>，这可以通过以下几种方式来完成：</p>
<ul>
<li>在同一模块范围内定义 <code>provider</code></li>
<li>从一个模块作用域导出 <code>provider</code> 并将该模块导入到要注入的类的模块作用域中</li>
<li>从标记了 <code>@Global()</code> 装饰器的全局模块中导出 <code>provider</code></li>
</ul>
<p>在前面的示例中，控制器接收客户端 HTTP 请求并将复杂的业务处理委托给 <code>Provider</code> 来完成：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @Injectable(): Decorator that marks a class as a provider</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DictService &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectRepository</span>(DictEntity)</span><br><span class="line">    <span class="keyword">private</span> dictRepository: Repository&lt;DictEntity&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> createDict(entity: DictEntity): <span class="built_in">Promise</span>&lt;DictEntity&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.dictRepository.save(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Dependency-injection"><a href="#Dependency-injection" class="headerlink" title="Dependency injection"></a>Dependency injection</h3><p>依赖，是当类需要执行其功能时，所需要的服务或对象； DI 是一种编码模式，其中的类会从外部源中请求获取依赖，而不是自己创建它们。<strong>依赖注入（DI）是一种控制反转（IOC）技术，您可以将依赖的实例化操作委派给IOC容器（<code>Nest</code>运行时系统）来代替自己在代码中进行实例化操作。</strong></p>
<p>在 <code>Nest</code> 中，借助于 <strong>TypeScript</strong> 的特性，管理依赖项非常容易，因为仅需按类型进行解析即可。</p>
<h3 id="Scopes"><a href="#Scopes" class="headerlink" title="Scopes"></a>Scopes</h3><p><code>Providers</code> 通常具有与应用程序一致的生命周期。当应用程序启动时，必须处理解决每个依赖项，因此必须实例化每个 <code>Provider</code>；同样，当应用程序关闭时，每个 <code>Provider</code> 都将被销毁。</p>
<h3 id="Custom-providers"><a href="#Custom-providers" class="headerlink" title="Custom providers"></a>Custom providers</h3><p><code>Nest</code> 有一个内置的 IOC 容器（<code>Nest</code>运行时系统），可以解决 <code>Providers</code> 之间的依赖关系。此功能是上面描述的依赖注入功能的基础，但实际上要比我们到目前为止描述的功能强大得多。</p>
<p><code>@Injectable()</code> 装饰器并不是定义一个 Provider 的唯一方式，我们还可以使用<a href="https://docs.nestjs.com/fundamentals/custom-providers#value-providers-usevalue" target="_blank" rel="noopener">Value</a>、<a href="https://docs.nestjs.com/fundamentals/custom-providers#class-providers-useclass" target="_blank" rel="noopener">Class</a>、<a href="https://docs.nestjs.com/fundamentals/custom-providers#factory-providers-usefactory" target="_blank" rel="noopener">Factory</a>来定义一个 Provider。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">    providers: [&#123;</span><br><span class="line">        provide: APP_PIPE,</span><br><span class="line">        useClass: ValidationPipe</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PipeModule &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!-- 
### Optional providers
-->
<h3 id="Property-based-injection"><a href="#Property-based-injection" class="headerlink" title="Property-based injection"></a>Property-based injection</h3><p>除了基于构造函数注入 <code>providers</code> 的方式之外，在某些非常特殊的情况下，基于属性的注入可能会很有用。例如，如果父类依赖于一个或多个 providers，那么通过从构造函数中调用子类中的 <code>super()</code> 来传递它们就会非常烦人了。因此，为了避免出现这种情况，可以在属性上使用 <code>@Inject()</code> 装饰器。</p>
<h3 id="Provider-registration"><a href="#Provider-registration" class="headerlink" title="Provider registration"></a>Provider registration</h3><p>现在我们已经定义了一个提供者（<code>DictService</code>），并且也已经有了该服务的使用者（<code>DictController</code>），此外，我们还需要将该服务注册到 Nest 中以便它可以进行注入。因此，我们需要编写模块文件（<code>DictModule</code>），并将该服务添加到 <code>@Module()</code> 装饰器的 <code>providers</code> 数组中：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">    imports: [TypeOrmModule.forFeature([DictEntity])],</span><br><span class="line">    providers: [DictService],</span><br><span class="line">    controllers: [DictController],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DictModule &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的示例中，当 <code>Nest IOC</code> 容器实例化 <code>DictController</code> 时，它首先查找所有的依赖项；当找到 <code>DictService</code> 依赖项时，它将对 <code>DictService</code> 令牌执行查找，根据 <code>DictModule</code> 的配置，将返回 <code>DictService</code> 类；然后，Nest 创建 <code>DictService</code> 实例，将其缓存并返回，或者如果实例已经在缓存中存在，则返回现有实例。</p>
<h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a><a href="https://docs.nestjs.com/modules" target="_blank" rel="noopener">Modules</a></h2><p>模块是用 <code>@Module()</code> 装饰器注释的类。Nest 使用模块来组织应用程序结构，<code>@Module()</code> 装饰器提供了 Nest 用来组织应用程序结构的元数据。</p>
<table>
<thead>
<tr>
<th>Metadata</th>
<th>Describe</th>
</tr>
</thead>
<tbody>
<tr>
<td>providers</td>
<td>由 Nest 注入器实例化的<code>providers</code>，并且至少可以在此模块中共享</td>
</tr>
<tr>
<td>controllers</td>
<td>在此模块中定义的需实例化的一组<code>controllers</code></td>
</tr>
<tr>
<td>imports</td>
<td>导入模块的列表，这些模块道导出了此模块中所需的<code>providers</code></td>
</tr>
<tr>
<td>exports</td>
<td>由本模块提供供其他模块导入使用的<code>providers</code>子集</td>
</tr>
</tbody>
</table>
<p><strong>默认情况下，模块封装提供者，这意味着如果提供者既不是当前模块的一部分也不是从另外模块（已导入）导出的，那么它是无法注入的。</strong></p>
<h2 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a><a href="https://docs.nestjs.com/middleware" target="_blank" rel="noopener">Middleware</a></h2><p><code>Middleware</code> 是在路由处理程序之前执行的函数，该函数可以访问 <a href="https://expressjs.com/en/4x/api.html#req" target="_blank" rel="noopener">request</a> 和 <a href="https://expressjs.com/en/4x/api.html#res" target="_blank" rel="noopener">response</a> 对象，以及应用程序请求-响应周期中 <code>next()</code> 中间件函数。Nest 中间件实际上等价于 <a href="http://expressjs.com/en/guide/using-middleware.html" target="_blank" rel="noopener">express</a> 中间件。</p>
<p>中间件无法在这 <code>@Module()</code> 装饰器中进行配置，我们可以通过使用模块类的 <code>configure()</code> 方法来进行设置，且包含中间件的模块必须实现 <code>NestModule</code> 接口。</p>
<!-- 
## [Exception filters](https://docs.nestjs.com/exception-filters)
## [Pipes](https://docs.nestjs.com/pipes)
## [Guards](https://docs.nestjs.com/guards)
## [Interceptors](https://docs.nestjs.com/interceptors)
## [Decorators](https://docs.nestjs.com/custom-decorators)
-->
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://docs.nestjs.com/" target="_blank" rel="noopener">Nest</a></li>
<li><a href="https://expressjs.com/" target="_blank" rel="noopener">Express</a></li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>nest</tag>
      </tags>
  </entry>
  <entry>
    <title>Storage</title>
    <url>/2017/10/15/web/storage/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>由于HTTP的无状态性，不通过额外的手段，服务器不知道用户上一次做了什么，所以Cookie就是用来绕开HTTP的无状态性的“额外手段”之一。服务器可以设置或读取Cookies中包含信息，借此维护用户跟服务器会话中的状态。Cookie会在每次发送HTTP请求时附加到Cookie请求头字段, 服务器以此来进行会话跟踪。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment"> * https://developer.mozilla.org/en-US/docs/Web/API/document.cookie</span></span><br><span class="line"><span class="comment"> * https://github.com/madmurphy/cookies.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(Namespace) === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        Namespace = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明一个全局变量用来注册命名空间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@namespace <span class="variable">Namespace</span></span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Namespace.register = <span class="function"><span class="keyword">function</span> (<span class="params">namespace</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nsArr = namespace.split(<span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">var</span> nsStr = <span class="string">''</span>, codeStr = <span class="string">''</span>;</span><br><span class="line">        nsArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">ns, idx</span>) </span>&#123;</span><br><span class="line">            nsStr += (idx === <span class="number">0</span> ? ns : <span class="string">'.'</span> + ns);</span><br><span class="line">            codeStr += <span class="string">'if (typeof('</span> + nsStr + <span class="string">') === "undefined") &#123; '</span> + nsStr + <span class="string">' = &#123;&#125;; &#125;'</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        codeStr &amp;&amp; <span class="built_in">eval</span>(codeStr);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    factory(root.Namespace);</span><br><span class="line"></span><br><span class="line">&#125;)(<span class="built_in">window</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Namespace</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册[cookieStorage]命名空间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@namespace <span class="variable">cookieStorage</span></span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Namespace.register(<span class="string">'cookieStorage'</span>);</span><br><span class="line"></span><br><span class="line">    cookieStorage.setItem = setItem;</span><br><span class="line">    cookieStorage.getItem = getItem;</span><br><span class="line">    cookieStorage.removeItem = removeItem;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setItem</span>(<span class="params">sKey, sValue, vEnd, sPath, sDomain, bSecure</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!sKey || <span class="regexp">/^(?:expires|max\-age|path|domain|secure)$/i</span>.test(sKey)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> sExpires = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (vEnd) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (vEnd.constructor) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="built_in">Number</span>:</span><br><span class="line">                    sExpires = vEnd === <span class="literal">Infinity</span> ? <span class="string">"; expires=Fri, 31 Dec 9999 23:59:59 GMT"</span> : <span class="string">"; max-age="</span> + vEnd;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="built_in">String</span>:</span><br><span class="line">                    sExpires = <span class="string">"; expires="</span> + vEnd;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="built_in">Date</span>:</span><br><span class="line">                    sExpires = <span class="string">"; expires="</span> + vEnd.toUTCString();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.cookie = <span class="built_in">encodeURIComponent</span>(sKey) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(sValue) + sExpires + (sDomain ? <span class="string">"; domain="</span> + sDomain : <span class="string">""</span>) + (sPath ? <span class="string">"; path="</span> + sPath : <span class="string">""</span>) + (bSecure ? <span class="string">"; secure"</span> : <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getItem</span>(<span class="params">sKey</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!sKey) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.cookie.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(?:(?:^|.*;)\\s*"</span> + <span class="built_in">encodeURIComponent</span>(sKey).replace(<span class="regexp">/[\-\.\+\*]/g</span>, <span class="string">"\\$&amp;"</span>) + <span class="string">"\\s*\\=\\s*([^;]*).*$)|^.*$"</span>), <span class="string">"$1"</span>)) || <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">removeItem</span>(<span class="params">sKey, sPath, sDomain</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasItem(sKey)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.cookie = <span class="built_in">encodeURIComponent</span>(sKey) + <span class="string">"=; expires=Thu, 01 Jan 1970 00:00:00 GMT"</span> + (sDomain ? <span class="string">"; domain="</span> + sDomain : <span class="string">""</span>) + (sPath ? <span class="string">"; path="</span> + sPath : <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hasItem</span>(<span class="params">sKey</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!sKey || <span class="regexp">/^(?:expires|max\-age|path|domain|secure)$/i</span>.test(sKey)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(?:^|;\\s*)"</span> + <span class="built_in">encodeURIComponent</span>(sKey).replace(<span class="regexp">/[\-\.\+\*]/g</span>, <span class="string">"\\$&amp;"</span>) + <span class="string">"\\s*\\="</span>)).test(<span class="built_in">document</span>.cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h2><p>sessionStorage 属性允许你访问一个 session Storage 对象。它与 localStorage 相似，不同之处在于 localStorage 里面存储的数据没有过期时间设置，而存储在 sessionStorage 里面的数据在页面会话结束时会被清除。页面会话在浏览器打开期间一直保持，并且重新加载或恢复页面仍会保持原来的页面会话。在新标签或窗口打开一个页面会初始化一个新的会话。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// listen for changes to localStorage</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'storage'</span>, storageEventListener, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.attachEvent(<span class="string">'onstorage'</span>, storageEventListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ask other tabs for session storage (this is ONLY to trigger event)</span></span><br><span class="line">    <span class="keyword">if</span> (!sessionStorage.length) &#123;</span><br><span class="line">        localStorage.setItem(<span class="string">'getSessionStorage'</span>, <span class="built_in">Date</span>.now());</span><br><span class="line">        localStorage.removeItem(<span class="string">'getSessionStorage'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// transfers sessionStorage from one tab to another</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">storageEventListener</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!event) &#123;</span><br><span class="line">            event = <span class="built_in">window</span>.event;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!event.newValue) &#123;</span><br><span class="line">            <span class="comment">// do nothing if no value to work with</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (event.key == <span class="string">'getSessionStorage'</span>) &#123;</span><br><span class="line">            <span class="comment">// another tab asked for the sessionStorage -&gt; send it</span></span><br><span class="line">            localStorage.setItem(<span class="string">'sessionStorage'</span>, <span class="built_in">JSON</span>.stringify(sessionStorage));</span><br><span class="line">            <span class="comment">// the other tab should now have it, so we're done with it.</span></span><br><span class="line">            localStorage.removeItem(<span class="string">'sessionStorage'</span>); <span class="comment">// &lt;- could do short timeout as well.</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.key == <span class="string">'sessionStorage'</span> &amp;&amp; !sessionStorage.length) &#123;</span><br><span class="line">            <span class="comment">// another tab sent data &lt;- get it</span></span><br><span class="line">            <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(event.newValue);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">                <span class="keyword">if</span> (data.hasOwnProperty(key)) &#123;</span><br><span class="line">                    sessionStorage.setItem(key, data[key]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><p>localStorage 属性允许你访问一个 local Storage 对象。localStorage 与 sessionStorage 相似。不同之处在于，存储在 localStorage 里面的数据没有过期时间（expiration time），而存储在 sessionStorage 里面的数据会在浏览器会话（browsing session）结束时被清除，即浏览器关闭时。</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>storage</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript</title>
    <url>/2019/12/28/web/typescript/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Any application that can be written in JavaScript, will eventually be written in JavaScript.</p>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量是对“值”的具名引用。变量就是为“值”起名，然后引用这个名字，就等同于引用这个值。变量的名字就是变量名。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p>
<p>上面的代码先声明变量a，然后在变量a与数值1之间建立引用关系，称为将数值1“赋值”给变量a。以后，引用变量名a就会得到数值1。最前面的var，是变量声明命令。它表示通知解释引擎，要创建一个变量a。如果只是声明变量而没有赋值，则该变量的值是undefined。undefined是一个特殊的值，表示“无定义”。</p>
<h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>JavaScript 引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行。这造成的结果，就是所有的变量的声明语句，都会被提升到代码的头部，这就叫做变量提升。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p>
<p>上面代码首先使用console.log方法，在控制台（console）显示变量a的值。这时变量a还没有声明和赋值，所以这是一种错误的做法，但是实际上不会报错。因为存在变量提升，真正运行的是下面的代码。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p>
<p>最后的结果是显示undefined，表示变量a已声明，但还未赋值。</p>
<h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><p>JavaScript 使用大括号，将多个相关的语句组合在一起，称为“区块”（block）。对于var命令来说，JavaScript 的区块不构成单独的作用域（scope）。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">a; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p>
<p>上面代码在区块内部，使用var命令声明并赋值了变量a，然后在区块外部，变量a依然有效，区块对于var命令不构成单独的作用域，与不使用区块的情况没有任何区别。在 JavaScript 语言中，单独使用区块并不常见，区块往往用来构成其他更复杂的语法结构，比如for、if、while、function等。</p>
<blockquote>
<p>注意，对于var命令来说，局部变量只能在函数内部声明，在其他区块中声明，一律都是全局变量。</p>
</blockquote>
<h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>在 JavaScript 中，truthy（真值）指的是在布尔值上下文中，转换后的值为真的值。所有值都是真值，除非它们被定义为 假值（即除 false、0、””、null、undefined 和 NaN 以外皆为真值）。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">undefined</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0n</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NaN</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="string">''</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="string">""</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="string">``</span>)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>null 和 undefined 的区别：null是一个表示“空”的对象，转为数值时为0；undefined是一个表示”此处无定义”的原始值，转为数值时为NaN。</p>
</blockquote>
<h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><p>JavaScript 内部，所有数字都是以64位浮点数形式储存，即使整数也是如此。所以，1与1.0是相同的，是同一个数。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> === <span class="number">1.0</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>
<p>这就是说，JavaScript 语言的底层根本没有整数，所有数字都是小数（64位浮点数）。容易造成混淆的是，某些运算只有整数才能完成，此时 JavaScript 会自动把64位浮点数，转成32位整数，然后再进行运算。由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span> <span class="comment">// false</span></span><br><span class="line"><span class="number">0.3</span> / <span class="number">0.1</span> <span class="comment">// 2.9999999999999996</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>NaN是 JavaScript 的特殊值，表示“非数字”（Not a Number），主要出现在将字符串解析成数字出错的场合。NaN不等于任何值，包括它本身。需要注意的是，NaN不是独立的数据类型，而是一个特殊数值，它的数据类型依然属于Number，使用typeof运算符可以看得很清楚。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span>  <span class="comment">// 'number'</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="Base64编码"><a href="#Base64编码" class="headerlink" title="Base64编码"></a>Base64编码</h3><p>JavaScript 原生提供两个 Base64 相关的方法：</p>
<ul>
<li>btoa()：任意值转为 Base64 编码</li>
<li>atob()：Base64 编码转为原来的值<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var string = &apos;Hello World!&apos;;</span><br><span class="line">btoa(string); // &quot;SGVsbG8gV29ybGQh&quot;</span><br><span class="line">atob(&apos;SGVsbG8gV29ybGQh&apos;); // &quot;Hello World!&quot;</span><br><span class="line">btoa(&apos;你好&apos;); // 报错</span><br><span class="line">btoa(encodeURIComponent(&apos;你好&apos;)); // &quot;JUU0JUJEJUEwJUU1JUE1JUJE&quot;</span><br><span class="line">decodeURIComponent(atob(&apos;JUU0JUJEJUEwJUU1JUE1JUJE&apos;)); // &quot;你好&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>注意，这两个方法不适合非 ASCII 码的字符，会报错。要将非 ASCII 码字符转为 Base64 编码，必须中间插入一个转码环节，再使用这两个方法。</p>
</blockquote>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>什么是对象？简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="string">'Hello'</span>,</span><br><span class="line">  bar: <span class="string">'World'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量，会影响到其他所有变量。如果取消某一个变量对于原对象的引用，不会影响到另一个变量。但是，这种引用只局限于对象，如果两个变量指向同一个原始类型的值。那么，变量这时都是值的拷贝。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = o1;</span><br><span class="line"></span><br><span class="line">o1.a = <span class="number">1</span>;</span><br><span class="line">o2.a; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">o1 = <span class="number">1</span>;</span><br><span class="line">o2; <span class="comment">// &#123;a: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> y = x;</span><br><span class="line"></span><br><span class="line">x = <span class="number">2</span>;</span><br><span class="line">y; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p>
<p>对象采用大括号表示，这导致了一个问题：如果行首是一个大括号，它到底是表达式还是语句？<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">foo</span>: <span class="number">123</span> &#125;</span><br></pre></td></tr></table></figure></p>
<p>JavaScript 引擎读到上面这行代码，会发现可能有两种含义。第一种可能是，这是一个表达式，表示一个包含foo属性的对象；第二种可能是，这是一个语句，表示一个代码区块，里面有一个标签foo，指向表达式123。</p>
<p>为了避免这种歧义，JavaScript 引擎的做法是，如果遇到这种情况，无法确定是对象还是代码块，一律解释为代码块。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="built_in">console</span>.log(<span class="number">123</span>) &#125; <span class="comment">// 123</span></span><br></pre></td></tr></table></figure></p>
<p>上面的语句是一个代码块，而且只有解释为代码块，才能执行。如果要解释为对象，最好在大括号前加上圆括号。因为圆括号的里面，只能是表达式，所以确保大括号只能解释为对象。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(&#123; <span class="attr">foo</span>: <span class="number">123</span> &#125;) <span class="comment">// 正确</span></span><br><span class="line">(&#123; <span class="built_in">console</span>.log(<span class="number">123</span>) &#125;) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></p>
<p>for…in循环用来遍历一个对象的全部属性，使用时需要注意：</p>
<ul>
<li>它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。</li>
<li>它不仅遍历对象自身的属性，还遍历继承的属性。<br>如果继承的属性是可遍历的，那么就会被for…in循环遍历到。但是，一般情况下，都是只想遍历对象自身的属性，所以使用for…in的时候，应该结合使用hasOwnProperty方法，在循环内部判断一下，某个属性是否为对象自身的属性。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>: <span class="string">'老张'</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">  <span class="keyword">if</span> (person.hasOwnProperty(key)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key); <span class="comment">// name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>对象的继承：大部分面向对象的编程语言，都是通过“类”（class）实现对象的继承。传统上，JavaScript 语言的继承不通过 class，而是通过“原型对象”（prototype）实现（ES6 引入了基于 class 的继承语法）。JavaScript 通过构造函数生成新对象，因此构造函数可以视为对象的模板。实例对象的属性和方法，可以定义在构造函数内部。通过构造函数为实例对象定义属性，虽然很方便，但是有一个缺点。同一个构造函数的多个实例之间，无法共享属性，从而造成对系统资源的浪费。这个问题的解决方法，就是 JavaScript 的原型对象（prototype）。</p>
<p>prototype 属性的作用：JavaScript 继承机制的设计思想就是，原型对象的所有属性和方法，都能被实例对象共享。也就是说，如果属性和方法定义在原型上，那么所有实例对象就能共享，不仅节省了内存，还体现了实例对象之间的联系。JavaScript 规定，每个函数都有一个prototype属性，指向一个对象。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">typeof</span> f.prototype <span class="comment">// "object"</span></span><br></pre></td></tr></table></figure></p>
<p>注意，原型对象的属性不是实例对象自身的属性。只要修改原型对象，变动就立刻会体现在所有实例对象上。原型对象的作用就是定义所有实例对象共享的属性和方法，这也是它被称为原型对象的原因，而实例对象可以视作从原型对象衍生出来的子对象。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.color = <span class="string">'white'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Animal(<span class="string">'大毛'</span>);</span><br><span class="line"><span class="keyword">var</span> cat2 = <span class="keyword">new</span> Animal(<span class="string">'二毛'</span>);</span><br><span class="line"></span><br><span class="line">cat1.color <span class="comment">// 'white'</span></span><br><span class="line">cat2.color <span class="comment">// 'white'</span></span><br><span class="line"></span><br><span class="line">Animal.prototype.color = <span class="string">'yellow'</span>;</span><br><span class="line"></span><br><span class="line">cat1.color <span class="comment">// "yellow"</span></span><br><span class="line">cat2.color <span class="comment">// "yellow"</span></span><br></pre></td></tr></table></figure></p>
<p>constructor 属性：prototype对象有一个constructor属性，默认指向prototype对象所在的构造函数。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">P</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">P.prototype.constructor === P <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> P();</span><br><span class="line">p.constructor === P <span class="comment">// true</span></span><br><span class="line">p.hasOwnProperty(<span class="string">'constructor'</span>) <span class="comment">// false</span></span><br><span class="line">p.constructor === P.prototype.constructor <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>调用函数时，要使用圆括号运算符。圆括号之中，可以加入函数的参数。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line">add(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p>
<p>上面代码中，函数名后面紧跟一对圆括号，就会调用这个函数。</p>
<blockquote>
<p>JavaScript 语言将函数看作一种值，与其它值（数值、字符串、布尔值等等）地位相同。凡是可以使用值的地方，就能使用函数。比如，可以把函数赋值给变量和对象的属性，也可以当作参数传入其他函数，或者作为函数的结果返回。函数只是一个可以执行的值，此外并无特殊之处。由于函数与其他数据类型地位平等，所以在 JavaScript 语言中又称函数为第一等公民。</p>
</blockquote>
<p>JavaScript 引擎将函数名视同变量名，所以采用function命令声明函数时，整个函数会像变量声明一样，被提升到代码头部。所以，下面的代码不会报错。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">f();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>表面上，上面代码好像在声明之前就调用了函数f。但是实际上，由于“变量提升”，函数f被提升到了代码头部，也就是在调用之前已经声明了。但是，如果采用赋值语句定义函数，JavaScript 就会报错。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">f();</span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">// 上面的代码等同于下面的形式</span></span><br><span class="line"><span class="keyword">var</span> f;</span><br><span class="line">f(); <span class="comment">// TypeError: undefined is not a function</span></span><br><span class="line">f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure></p>
<p>函数作用域：作用域（scope）指的是变量存在的范围。在 ES5 的规范中，JavaScript 只有两种作用域：一种是全局作用域，变量在整个程序中一直存在，所有地方都可以读取；另一种是函数作用域，变量只在函数内部存在。ES6 又新增了块级作用域。</p>
<ul>
<li>函数外部声明的变量就是全局变量（global variable），它可以在函数内部读取；</li>
<li>在函数内部定义的变量称为局部变量（local variable），外部无法读取；</li>
<li>函数内部定义的变量，会在该作用域内覆盖同名全局变量；</li>
</ul>
<blockquote>
<p>注意，对于var命令来说，局部变量只能在函数内部声明，在其他区块中声明，一律都是全局变量。与全局作用域一样，函数作用域内部也会产生“变量提升”现象。var命令声明的变量，不管在什么位置，变量声明都会被提升到函数体的头部。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = x - <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    tmp = x - <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>本质上，数组属于一种特殊的对象。typeof运算符会返回数组的类型是object。</p>
<p>只要是数组，就一定有length属性。该属性是一个动态的值，等于键名中的最大整数加上1。清空数组的一个有效方法，就是将length属性设为0。如果一个对象的所有键名都是正整数或零，并且有length属性，那么这个对象就很像数组，语法上称为“类似数组的对象”（array-like object）。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>典型的“类似数组的对象”是函数的arguments对象，以及大多数 DOM 元素集，还有字符串。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arguments对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">arguments</span> &#125;</span><br><span class="line"><span class="keyword">var</span> arrayLike = func(<span class="string">'a'</span>, <span class="string">'b'</span>);</span><br><span class="line"></span><br><span class="line">arrayLike[<span class="number">0</span>] <span class="comment">// 'a'</span></span><br><span class="line">arrayLike.length <span class="comment">// 2</span></span><br><span class="line">arrayLike <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DOM元素集</span></span><br><span class="line"><span class="keyword">var</span> elts = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'h3'</span>);</span><br><span class="line">elts.length <span class="comment">// 3</span></span><br><span class="line">elts <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"><span class="string">'abc'</span>[<span class="number">1</span>] <span class="comment">// 'b'</span></span><br><span class="line"><span class="string">'abc'</span>.length <span class="comment">// 3</span></span><br><span class="line"><span class="string">'abc'</span> <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p>
<p>数组的slice方法可以将“类似数组的对象”变成真正的数组。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.prototype.slice.call(arrayLike);</span><br></pre></td></tr></table></figure></p>
<p>除了转为真正的数组，“类似数组的对象”还有一个办法可以使用数组的方法，就是通过call()把数组的方法放到对象上面。注意，这种方法比直接使用数组原生的forEach要慢，所以最好还是先将“类似数组的对象”转为真正的数组，然后再直接调用数组的forEach方法。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.forEach.call(arrayLike, <span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index + <span class="string">' : '</span> + value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><h3 id="let-amp-const"><a href="#let-amp-const" class="headerlink" title="let &amp; const"></a>let &amp; const</h3><p>var命令会发生“变量提升”现象，即变量可以在声明之前使用，值为undefined。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。使用let命令所声明的变量，只在let命令所在的代码块内有效。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 输出undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p>
<p>const声明一个只读的常量。一旦声明，常量的值就不能改变。const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 foo 添加一个属性，可以成功</span></span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br><span class="line">foo.prop <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 foo 指向另一个对象，就会报错</span></span><br><span class="line">foo = &#123;&#125;; <span class="comment">// TypeError: "foo" is read-only</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入 Symbol 的原因。</p>
<p>ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值，它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</p>
<p>数据类型 symbol 是一种基本数据类型，该类型的性质在于这个类型的值可以用来创建匿名的对象属性。该数据类型通常被用作一个对象属性的键值（当你想让它是私有的时候）。例如，symbol 类型的键存在于各种内置的 JavaScript 对象中。同样，自定义类也可以这样创建私有成员。symbol 数据类型具有非常明确的目的，并且因为其功能性单一的优点而突出；一个 symbol 实例可以被赋值到一个左值变量，还可以通过标识符检查类型，这就是它的全部特性。</p>
<p>当一个 Symbol 包装器对象作为一个属性的键时，这个对象将被强制转换为它包装过的 symbol 值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sym = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</span><br><span class="line"><span class="keyword">var</span> obj = &#123;[sym]: <span class="number">1</span>&#125;;</span><br><span class="line">obj[sym];            <span class="comment">// 1</span></span><br><span class="line">obj[<span class="built_in">Object</span>(sym)];    <span class="comment">// still 1</span></span><br></pre></td></tr></table></figure>
<h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><p>Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。ES6 原生提供 Proxy 构造函数，用来生成 Proxy 实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>target  要使用Proxy包装的目标对象(可以是任何类型的对象，包括原生数组，函数，甚至另一个代理)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>handler 一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span>A proxy instance.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure>
<p>Proxy 对象的所有用法，都是上面这种形式，不同的只是 handler 参数的写法。其中，new Proxy() 表示生成一个 Proxy 实例，target 参数表示所要拦截的目标对象，handler 参数也是一个对象，用来定制拦截行为。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">    <span class="keyword">get</span>: function(obj, prop) &#123;</span><br><span class="line">        <span class="keyword">return</span> prop <span class="keyword">in</span> obj ? obj[prop] : <span class="number">37</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">p.a = <span class="number">1</span>;</span><br><span class="line">p.b = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p.a, p.b);      <span class="comment">// 1, undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'c'</span> <span class="keyword">in</span> p, p.c); <span class="comment">// false, 37</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，要使得 Proxy 起作用，必须针对 Proxy 实例进行操作，而不是针对目标对象进行操作。</p>
</blockquote>
<p>下面是 Proxy 支持的拦截操作一览，一共 13 种：</p>
<ul>
<li>get(target, propKey, receiver)：拦截对象属性的读取，比如<code>proxy.foo</code>和<code>proxy[&#39;foo&#39;]</code>。</li>
<li>set(target, propKey, value, receiver)：拦截对象属性的设置，比如<code>proxy.foo = v</code>或<code>proxy[&#39;foo&#39;] = v</code>，返回一个布尔值。</li>
<li>has(target, propKey)：拦截<code>propKey in proxy</code>的操作，返回一个布尔值。</li>
<li>deleteProperty(target, propKey)：拦截<code>delete proxy[propKey]</code>的操作，返回一个布尔值。</li>
<li>ownKeys(target)：拦截<code>Object.getOwnPropertyNames(proxy)</code>、<code>Object.getOwnPropertySymbols(proxy)</code>、<code>Object.keys(proxy)</code>、<code>for...in</code>循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而<code>Object.keys()</code>的返回结果仅包括目标对象自身的可遍历属性。</li>
<li>getOwnPropertyDescriptor(target, propKey)：拦截<code>Object.getOwnPropertyDescriptor(proxy, propKey)</code>，返回属性的描述对象。</li>
<li>defineProperty(target, propKey, propDesc)：拦截<code>Object.defineProperty(proxy, propKey, propDesc)</code>、<code>Object.defineProperties(proxy, propDescs)</code>，返回一个布尔值。</li>
<li>preventExtensions(target)：拦截<code>Object.preventExtensions(proxy)</code>，返回一个布尔值。</li>
<li>getPrototypeOf(target)：拦截<code>Object.getPrototypeOf(proxy)</code>，返回一个对象。</li>
<li>isExtensible(target)：拦截<code>Object.isExtensible(proxy)</code>，返回一个布尔值。</li>
<li>setPrototypeOf(target, proto)：拦截<code>Object.setPrototypeOf(proxy, proto)</code>，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</li>
<li>apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作，比如<code>proxy(...args)</code>、<code>proxy.call(object, ...args)</code>、<code>proxy.apply(...)</code>。</li>
<li>construct(target, args)：拦截 Proxy 实例作为构造函数调用的操作，比如<code>new proxy(...args)</code>。</li>
</ul>
<h3 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h3><p><code>Reflect</code>对象与<code>Proxy</code>对象一样，也是 ES6 为了操作对象而提供的新 API。<code>Reflect</code>对象的设计目的有这样几个：</p>
<ol>
<li><p>将<code>Object</code>对象的一些明显属于语言内部的方法（比如<code>Object.defineProperty</code>），放到<code>Reflect</code>对象上。现阶段，某些方法同时在<code>Object</code>和<code>Reflect</code>对象上部署，未来的新方法将只部署在<code>Reflect</code>对象上。也就是说，从<code>Reflect</code>对象上可以拿到语言内部的方法。</p>
</li>
<li><p>修改某些<code>Object</code>方法的返回结果，让其变得更合理。比如，<code>Object.defineProperty(obj, name, desc)</code>在无法定义属性时，会抛出一个错误，而<code>Reflect.defineProperty(obj, name, desc)</code>则会返回<code>false</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 老写法</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, property, attributes);</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Reflect</span>.defineProperty(target, property, attributes)) &#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>让<code>Object</code>操作都变成函数行为。某些<code>Object</code>操作是命令式，比如<code>name in obj</code>和<code>delete obj[name]</code>，而<code>Reflect.has(obj, name)</code>和<code>Reflect.deleteProperty(obj, name)</code>让它们变成了函数行为。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 老写法</span></span><br><span class="line"><span class="string">'assign'</span> <span class="keyword">in</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="built_in">Reflect</span>.has(<span class="built_in">Object</span>, <span class="string">'assign'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Reflect</code>对象的方法与<code>Proxy</code>对象的方法一一对应，只要是<code>Proxy</code>对象的方法，就能在<code>Reflect</code>对象上找到对应的方法。这就让<code>Proxy</code>对象可以方便地调用对应的<code>Reflect</code>方法，完成默认行为，作为修改行为的基础。也就是说，不管<code>Proxy</code>怎么修改默认行为，你总可以在<code>Reflect</code>上获取默认行为。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Proxy</span>(target, &#123;</span><br><span class="line">  <span class="keyword">set</span>: function(target, name, value, receiver) &#123;</span><br><span class="line">    <span class="comment">// 采用 Reflect.set 方法将值赋值给对象的属性，确保完成原有的行为，然后再添加额外的操作</span></span><br><span class="line">    <span class="keyword">var</span> success = <span class="built_in">Reflect</span>.set(target, name, value, receiver);</span><br><span class="line">    <span class="keyword">if</span> (success) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'property '</span> + name + <span class="string">' on '</span> + target + <span class="string">' set to '</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> success;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><p>ES6 提供了更接近传统语言的写法，引入了 Class 这个概念，作为对象的模板。通过class关键字，可以定义类。ES6 的class可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typeof</span> Point; <span class="comment">// "function"</span></span><br><span class="line">Point === Point.prototype.constructor; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>
<p>构造函数的prototype属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">Point.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;,</span><br><span class="line">  toString() &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>由于类的方法都定义在prototype对象上面，所以类的新方法可以添加在prototype对象上面。Object.assign方法可以很方便地一次向类添加多个方法。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(Point.prototype, &#123;</span><br><span class="line">  toString()&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>另外，类的内部所有定义的方法，都是不可枚举的（non-enumerable），这一点与 ES5 的行为不一致。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 Class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.keys(Point.prototype); <span class="comment">// []</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(Point.prototype); <span class="comment">// ["constructor", "toString"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5 Function</span></span><br><span class="line"><span class="keyword">var</span> Point = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line">Point.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(Point.prototype); <span class="comment">// ["toString"]</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(Point.prototype); <span class="comment">// ["constructor", "toString"]</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Generator-函数"><a href="#Generator-函数" class="headerlink" title="Generator 函数"></a>Generator 函数</h3><p>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。执行 Generator 函数会返回一个 Iterator 对象，返回的 Iterator 对象可以依次遍历 Generator 函数内部的每一个状态。</p>
<p>形式上，Generator 函数就是一个普通函数，但是有两个特征。一是，function关键字与函数名之间有一个星号；二是，函数体内部使用yield表达式，定义不同的内部状态（yield在英语里的意思就是“产出”）。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloWorldGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'hello'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'world'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'ending'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hw = helloWorldGenerator();</span><br></pre></td></tr></table></figure></p>
<p>上面代码定义了一个 Generator 函数helloWorldGenerator，它内部有两个yield表达式（hello和world），即该函数有三个状态：hello，world 和 return 语句（结束执行）。<br>然后，Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是 Iterator 对象。</p>
<p>下一步，必须调用 Iterator 对象的next方法，使得指针移向下一个状态。也就是说，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个yield表达式（或return语句）为止。换言之，Generator 函数是分段执行的，yield表达式是暂停执行的标记，而next方法可以恢复执行。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hw.next(); <span class="comment">// &#123; value: 'hello', done: false &#125;</span></span><br><span class="line"></span><br><span class="line">hw.next(); <span class="comment">// &#123; value: 'world', done: false &#125;</span></span><br><span class="line"></span><br><span class="line">hw.next(); <span class="comment">// &#123; value: 'ending', done: true &#125;</span></span><br><span class="line"></span><br><span class="line">hw.next(); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Async-函数"><a href="#Async-函数" class="headerlink" title="Async 函数"></a>Async 函数</h3><p>ES2017 标准引入了 async 函数，使得异步操作变得更加方便。async 函数是什么？一句话，它就是 Generator 函数的语法糖。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Generator 函数</span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">yield</span> fetch(<span class="string">'https://api.github.com/orgs/nodejs'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Async 函数</span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">'https://api.github.com/orgs/nodejs'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>一比较就会发现，async函数就是将Generator函数的星号替换成async，将yield替换成await，仅此而已（async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果）；进一步说，async函数完全可以看作多个异步操作包装成的一个 Promise 对象，而await命令就是内部then命令的语法糖。</p>
<h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><p>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。</p>
<p>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CommonJS模块</span></span><br><span class="line"><span class="keyword">let</span> &#123; stat, exists, readFile &#125; = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> _fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> stat = _fs.stat;</span><br><span class="line"><span class="keyword">let</span> exists = _fs.exists;</span><br><span class="line"><span class="keyword">let</span> readfile = _fs.readfile;</span><br></pre></td></tr></table></figure></p>
<p>上面代码的实质是整体加载fs模块（即加载fs的所有方法），生成一个对象（_fs），然后再从这个对象上面读取三个方法。这种加载称为运行时加载，因为只有运行时才能得到这个对象，导致完全没办法在编译时做静态优化。</p>
<p>ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; stat, exists, readFile &#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br></pre></td></tr></table></figure></p>
<p>上面代码的实质是从fs模块加载三个方法，其他方法不加载。这种加载称为编译时加载或者静态加载，即 ES6 可以在编译时就完成模块加载，效率要比 CommonJS 模块的加载方式高。当然，这也导致了没法引用 ES6 模块本身，因为它不是对象。</p>
<p>模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.info(msg);</span><br><span class="line">&#125;(<span class="string">'func run...'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'AppModule'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>ES2015<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>ECMAScript modules in browsers<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">import</span> AppModule <span class="keyword">from</span> <span class="string">'./AppModule.js'</span>; <span class="comment">// func run...</span></span></span><br><span class="line"><span class="javascript">	<span class="built_in">console</span>.log(AppModule); <span class="comment">// &#123;name: "AppModule"&#125;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h3><p>装饰器（Decorator）是一种与类（class）相关的语法，用来注释或修改类和类方法。装饰器是一种函数（写成<code>@+函数名</code>），它可以放在类和类方法的定义前面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@testable</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTestableClass</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testable</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  target.isTestable = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyTestableClass.isTestable; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>@testable</code> 就是一个装饰器。它修改了 MyTestableClass这 个类的行为，为它加上了静态属性isTestable。testable 函数的参数 target 是 MyTestableClass 类本身。</p>
<p>基本上，装饰器的行为就是下面这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@decorator</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line">A = decorator(A) || A;</span><br></pre></td></tr></table></figure>
<p>也就是说，<strong>装饰器是一个对类进行处理的函数。装饰器函数的第一个参数，就是所要装饰的目标类</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testable</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>testable</code>函数的参数<code>target</code>，就是会被装饰的类。</p>
<p>如果觉得一个参数不够用，可以在装饰器外面再封装一层函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testable</span>(<span class="params">isTestable</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    target.isTestable = isTestable;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@testable(<span class="literal">true</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTestableClass</span> </span>&#123;&#125;</span><br><span class="line">MyTestableClass.isTestable <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">@testable(<span class="literal">false</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;&#125;</span><br><span class="line">MyClass.isTestable <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，装饰器 testable 可以接受参数，这就等于可以修改装饰器的行为。</p>
<p>注意，<strong>装饰器对类的行为的改变，是代码编译时发生的，而不是在运行时</strong>。这意味着，装饰器能在编译阶段运行代码。也就是说，<strong>装饰器本质就是编译时执行的函数</strong>。</p>
<p>前面的例子是为类添加一个静态属性，如果想添加实例属性，可以通过目标类的<code>prototype</code>对象操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testable</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  target.prototype.isTestable = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@testable</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTestableClass</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> MyTestableClass();</span><br><span class="line">obj.isTestable <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，装饰器函数<code>testable</code>是在目标类的<code>prototype</code>对象上添加属性，因此就可以在实例上调用。</p>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>TypeScript 中的类除了实现了所有 ES6 中的类的功能以外，还添加了一些新的用法。</p>
<h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>TypeScript 可以使用三种访问修饰符：<code>public</code>、<code>private</code> 和 <code>protected</code></p>
<ul>
<li><code>public</code> 修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 <code>public</code> 的</li>
<li><code>private</code> 修饰的属性或方法是私有的，不能在声明它的类的外部访问</li>
<li><code>protected</code> 修饰的属性或方法是受保护的，它和 <code>private</code> 类似，区别是它在子类中也是允许被访问的</li>
</ul>
<h4 id="readonly修饰符"><a href="#readonly修饰符" class="headerlink" title="readonly修饰符"></a>readonly修饰符</h4><p>可以使用 readonly 关键字将属性设置为只读的，只读属性必须在声明时或构造函数里被初始化。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> AuthController &#123;</span><br><span class="line">    <span class="keyword">private</span> readonly authService: AuthService;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">authService: AuthService</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.authService = authService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h4><p>修饰符和 <code>readonly</code> 可以使用在构造函数参数中，等同于在类中定义该属性同时给该属性赋值，使代码更简洁。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用参数属性可以方便地把声明和赋值合并至一处</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> AuthController &#123;</span><br><span class="line">    <span class="comment">// private readonly authService: AuthService;</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly authService: AuthService</span>) &#123;</span><br><span class="line">        <span class="comment">// this.authService = authService;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>抽象类是供其他类继承的基类，抽象类不允许被实例化，抽象类中的抽象方法必须在子类中被实现。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">  <span class="keyword">public</span> name;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> sayHi();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="keyword">public</span> sayHi() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Meow, My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> Cat(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。在TypeScript里，我们只会去关注值的外形，只在两个类型内部的结构兼容那么这两个类型就是兼容的。这就允许我们在实现接口时候只要保证包含了接口要求的结构就可以，而不必明确地使用 implements 语句。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    firstName: <span class="built_in">string</span>;</span><br><span class="line">    lastName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person: Person</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person.firstName + <span class="string">" "</span> + person.lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123; firstName: <span class="string">"Jane"</span>, lastName: <span class="string">"User"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = greeter(user);</span><br></pre></td></tr></table></figure>
<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>随着TypeScript和ES6里引入了类，在一些场景下我们需要额外的特性来支持标注或修改类及其成员。装饰器（Decorators）为我们在类的声明及成员上通过元编程语法添加标注提供了一种方式。若要启用实验性的装饰器特性，你必须在命令行或 tsconfig.json 里启用 experimentalDecorators 编译器选项。</p>
<p>装饰器是一种特殊类型的声明，它能够被附加到类声明、方法、访问符、属性或参数上。装饰器使用 @expression 这种形式，expression求值后必须为一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener">JavaScript 教程</a></li>
<li><a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 入门</a></li>
<li><a href="https://babeljs.io/docs/en/learn" target="_blank" rel="noopener">Learn ES2015</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy" target="_blank" rel="noopener">Truthy（真值）</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy" target="_blank" rel="noopener">Falsy（虚值）</a></li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>Virtual DOM</title>
    <url>/2018/10/03/web/virtualdom/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Virtual-DOM-算法"><a href="#Virtual-DOM-算法" class="headerlink" title="Virtual DOM 算法"></a>Virtual DOM 算法</h2><p>真正的 DOM 元素是非常庞大的，所以操作它们的时候你要小心翼翼，轻微的触碰可能就会导致页面重排，这可是杀死性能的罪魁祸首。相对于 DOM 对象，原生的 JavaScript 对象处理起来更快，而且更简单。DOM 树上的结构、属性信息我们都可以很容易地用 JavaScript 对象表示出来：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element = &#123;</span><br><span class="line">  tagName: <span class="string">'ul'</span>, <span class="comment">// 节点标签名</span></span><br><span class="line">  props: &#123; <span class="comment">// DOM的属性，用一个对象存储键值对</span></span><br><span class="line">    id: <span class="string">'list'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  children: [ <span class="comment">// 该节点的子节点</span></span><br><span class="line">    &#123;<span class="attr">tagName</span>: <span class="string">'li'</span>, <span class="attr">props</span>: &#123;<span class="attr">class</span>: <span class="string">'item'</span>&#125;, <span class="attr">children</span>: [<span class="string">"Item 1"</span>]&#125;,</span><br><span class="line">    &#123;<span class="attr">tagName</span>: <span class="string">'li'</span>, <span class="attr">props</span>: &#123;<span class="attr">class</span>: <span class="string">'item'</span>&#125;, <span class="attr">children</span>: [<span class="string">"Item 2"</span>]&#125;,</span><br><span class="line">    &#123;<span class="attr">tagName</span>: <span class="string">'li'</span>, <span class="attr">props</span>: &#123;<span class="attr">class</span>: <span class="string">'item'</span>&#125;, <span class="attr">children</span>: [<span class="string">"Item 3"</span>]&#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面对应的HTML写法是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">'list'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>既然原来 DOM 树的信息都可以用 JavaScript 对象来表示，反过来，你就可以根据这个 JavaScript 对象表示的树结构来构建一棵真正的DOM树。</p>
<p>用 JavaScript 对象表示 DOM 信息和结构，当状态变更的时候，重新渲染这个 JavaScript 的对象结构。用新渲染的对象树去和旧的树进行对比，记录这两棵树差异。记录下来的不同就是我们需要对页面真正的 DOM 操作，然后把它们应用在真正的 DOM 树上，页面就变更了。这就是所谓的 Virtual DOM 算法，包括几个步骤：</p>
<ol>
<li>用 JavaScript 对象结构表示 DOM 树的结构，然后用这个树构建一个真正的 DOM 树，插到文档当中；  </li>
<li>当状态变更的时候，重新构造一棵新的对象树，然后用新的树和旧的树进行比较(Diff算法)，记录两棵树(新旧虚拟DOM这两个对象)的差异；</li>
<li>把步骤2所记录的差异应用到步骤1所构建的真正的DOM树上，视图就更新了。  </li>
</ol>
<p><img src="/images/web/virtual-dom.jpg" alt="Virtual DOM">  </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Virtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存；既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/Matt-Esch/virtual-dom" target="_blank" rel="noopener">https://github.com/Matt-Esch/virtual-dom</a></li>
<li><a href="https://github.com/livoras/blog/issues/13" target="_blank" rel="noopener">https://github.com/livoras/blog/issues/13</a></li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>virtualdom</tag>
      </tags>
  </entry>
  <entry>
    <title>Concurrent - JMM</title>
    <url>/2020/05/18/architect/concurrent/jmm/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>The Java memory model specifies how the Java virtual machine works with the computer’s memory (RAM). The Java virtual machine is a model of a whole computer so this model naturally includes a memory model - AKA the Java memory model.</p>
<p>It is very important to understand the Java memory model if you want to design correctly behaving concurrent programs. The Java memory model specifies how and when different threads can see values written to shared variables by other threads, and how to synchronize access to shared variables when necessary.</p>
<h2 id="Java-Memory-Model-JMM"><a href="#Java-Memory-Model-JMM" class="headerlink" title="Java Memory Model (JMM)"></a>Java Memory Model (JMM)</h2><p>The Java memory model used internally in the JVM divides memory between thread stacks and the heap. This diagram illustrates the Java memory model from a logic perspective: </p>
<p><img src="/images/architect/concurrent-jmm-1.png" alt="JMM"></p>
<p>Each thread running in the Java virtual machine has its own thread stack. The thread stack contains information about what methods the thread has called to reach the current point of execution. I will refer to this as the “call stack”. As the thread executes its code, the call stack changes.</p>
<p>The thread stack also contains all local variables for each method being executed (all methods on the call stack). A thread can only access it’s own thread stack. Local variables created by a thread are invisible to all other threads than the thread who created it. Even if two threads are executing the exact same code, the two threads will still create the local variables of that code in each their own thread stack. Thus, each thread has its own version of each local variable.</p>
<p>All local variables of primitive types ( boolean, byte, short, char, int, long, float, double) are fully stored on the thread stack and are thus not visible to other threads. One thread may pass a copy of a pritimive variable to another thread, but it cannot share the primitive local variable itself.</p>
<p>The heap contains all objects created in your Java application, regardless of what thread created the object. This includes the object versions of the primitive types (e.g. Byte, Integer, Long etc.). It does not matter if an object was created and assigned to a local variable, or created as a member variable of another object, the object is still stored on the heap.</p>
<p>Here is a diagram illustrating the call stack and local variables stored on the thread stacks, and objects stored on the heap: </p>
<p><img src="/images/architect/concurrent-jmm-2.png" alt="JMM"></p>
<p>A local variable may be of a primitive type, in which case it is totally kept on the thread stack.</p>
<p>A local variable may also be a reference to an object. In that case the reference (the local variable) is stored on the thread stack, but the object itself if stored on the heap.</p>
<p>An object may contain methods and these methods may contain local variables. These local variables are also stored on the thread stack, even if the object the method belongs to is stored on the heap.</p>
<p><strong>An object’s member variables are stored on the heap along with the object itself. That is true both when the member variable is of a primitive type, and if it is a reference to an object.</strong></p>
<p>Static class variables are also stored on the heap along with the class definition.</p>
<p>Objects on the heap can be accessed by all threads that have a reference to the object. When a thread has access to an object, it can also get access to that object’s member variables. If two threads call a method on the same object at the same time, they will both have access to the object’s member variables, but each thread will have its own copy of the local variables.</p>
<p>Here is a diagram illustrating the points above: </p>
<p><img src="/images/architect/concurrent-jmm-3.png" alt="JMM"></p>
<p>Two threads have a set of local variables. One of the local variables (Local Variable 2) point to a shared object on the heap (Object 3). The two threads each have a different reference to the same object. Their references are local variables and are thus stored in each thread’s thread stack (on each). The two different references point to the same object on the heap, though.</p>
<p>Notice how the shared object (Object 3) has a reference to Object 2 and Object 4 as member variables (illustrated by the arrows from Object 3 to Object 2 and Object 4). Via these member variable references in Object 3 the two threads can access Object 2 and Object 4.</p>
<p>The diagram also shows a local variable which point to two different objects on the heap. In this case the references point to two different objects (Object 1 and Object 5), not the same object. In theory both threads could access both Object 1 and Object 5, if both threads had references to both objects. But in the diagram above each thread only has a reference to one of the two objects.</p>
<p>So, what kind of Java code could lead to the above memory graph? Well, code as simple as the code below: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        methodOne();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> localVariable1 = <span class="number">45</span>;</span><br><span class="line">        MySharedObject localVariable2 = MySharedObject.sharedInstance;</span><br><span class="line">        <span class="comment">//... do more with local variables.</span></span><br><span class="line">        methodTwo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Integer localVariable1 = <span class="keyword">new</span> Integer(<span class="number">99</span>);</span><br><span class="line">        <span class="comment">//... do more with local variable.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySharedObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//static variable pointing to instance of MySharedObject</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MySharedObject sharedInstance = <span class="keyword">new</span> MySharedObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//member variables pointing to two objects on the heap</span></span><br><span class="line">    <span class="keyword">public</span> Integer object2 = <span class="keyword">new</span> Integer(<span class="number">22</span>);</span><br><span class="line">    <span class="keyword">public</span> Integer object4 = <span class="keyword">new</span> Integer(<span class="number">44</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> member1 = <span class="number">12345</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> member2 = <span class="number">67890</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If two threads were executing the run() method then the diagram shown earlier would be the outcome. The run() method calls methodOne() and methodOne() calls methodTwo().</p>
<p>methodOne() declares a primitive local variable (localVariable1 of type int) and an local variable which is an object reference (localVariable2).</p>
<p>Each thread executing methodOne() will create its own copy of localVariable1 and localVariable2 on their respective thread stacks. The localVariable1 variables will be completely separated from each other, only living on each thread’s thread stack. One thread cannot see what changes another thread makes to its copy of localVariable1.</p>
<p>Each thread executing methodOne() will also create their own copy of localVariable2. However, the two different copies of localVariable2 both end up pointing to the same object on the heap. The code sets localVariable2 to point to an object referenced by a static variable. There is only one copy of a static variable and this copy is stored on the heap. Thus, both of the two copies of localVariable2 end up pointing to the same instance of MySharedObject which the static variable points to. The MySharedObject instance is also stored on the heap. It corresponds to Object 3 in the diagram above.</p>
<p>Notice how the MySharedObject class contains two member variables too. The member variables themselves are stored on the heap along with the object. The two member variables point to two other Integer objects. These Integer objects correspond to Object 2 and Object 4 in the diagram above.</p>
<p>Notice also how methodTwo() creates a local variable named localVariable1. This local variable is an object reference to an Integer object. The method sets the localVariable1 reference to point to a new Integer instance. The localVariable1 reference will be stored in one copy per thread executing methodTwo(). The two Integer objects instantiated will be stored on the heap, but since the method creates a new Integer object every time the method is executed, two threads executing this method will create separate Integer instances. The Integer objects created inside methodTwo() correspond to Object 1 and Object 5 in the diagram above.</p>
<p>Notice also the two member variables in the class MySharedObject of type long which is a primitive type. Since these variables are member variables, they are still stored on the heap along with the object. Only local variables are stored on the thread stack.</p>
<h2 id="Hardware-Memory-Architecture-HMA"><a href="#Hardware-Memory-Architecture-HMA" class="headerlink" title="Hardware Memory Architecture (HMA)"></a>Hardware Memory Architecture (HMA)</h2><p>Modern hardware memory architecture is somewhat different from the internal Java memory model. It is important to understand the hardware memory architecture too, to understand how the Java memory model works with it. This section describes the common hardware memory architecture, and a later section will describe how the Java memory model works with it.</p>
<p>Here is a simplified diagram of modern computer hardware architecture: </p>
<p><img src="/images/architect/concurrent-jmm-4.png" alt="JMM"></p>
<p>A modern computer often has 2 or more CPUs in it. Some of these CPUs may have multiple cores too. The point is, that on a modern computer with 2 or more CPUs it is possible to have more than one thread running simultaneously. Each CPU is capable of running one thread at any given time. That means that if your Java application is multithreaded, one thread per CPU may be running simultaneously (concurrently) inside your Java application.</p>
<p>Each CPU contains a set of registers which are essentially in-CPU memory. The CPU can perform operations much faster on these registers than it can perform on variables in main memory. That is because the CPU can access these registers much faster than it can access main memory.</p>
<p>Each CPU may also have a CPU cache memory layer. In fact, most modern CPUs have a cache memory layer of some size. The CPU can access its cache memory much faster than main memory, but typically not as fast as it can access its internal registers. So, the CPU cache memory is somewhere in between the speed of the internal registers and main memory. Some CPUs may have multiple cache layers (Level 1 and Level 2), but this is not so important to know to understand how the Java memory model interacts with memory. What matters is to know that CPUs can have a cache memory layer of some sort.</p>
<p>A computer also contains a main memory area (RAM). All CPUs can access the main memory. The main memory area is typically much bigger than the cache memories of the CPUs.</p>
<p>Typically, when a CPU needs to access main memory it will read part of main memory into its CPU cache. It may even read part of the cache into its internal registers and then perform operations on it. When the CPU needs to write the result back to main memory it will flush the value from its internal register to the cache memory, and at some point flush the value back to main memory.</p>
<p>The values stored in the cache memory is typically flushed back to main memory when the CPU needs to store something else in the cache memory. The CPU cache can have data written to part of its memory at a time, and flush part of its memory at a time. It does not have to read / write the full cache each time it is updated. Typically the cache is updated in smaller memory blocks called “cache lines”. One or more cache lines may be read into the cache memory, and one or mor cache lines may be flushed back to main memory again.</p>
<h2 id="Bridging-The-Gap-Between-JMM-And-HMA"><a href="#Bridging-The-Gap-Between-JMM-And-HMA" class="headerlink" title="Bridging The Gap Between JMM And HMA"></a>Bridging The Gap Between JMM And HMA</h2><p>As already mentioned, the Java memory model and the hardware memory architecture are different. The hardware memory architecture does not distinguish between thread stacks and heap. On the hardware, both the thread stack and the heap are located in main memory. Parts of the thread stacks and heap may sometimes be present in CPU caches and in internal CPU registers. This is illustrated in this diagram: </p>
<p><img src="/images/architect/concurrent-jmm-5.png" alt="JMM"></p>
<p>When objects and variables can be stored in various different memory areas in the computer, certain problems may occur. The two main problems are:</p>
<ul>
<li>Visibility of thread updates (writes) to shared variables.</li>
<li>Race conditions when reading, checking and writing shared variables.</li>
</ul>
<p>Both of these problems will be explained in the following sections.</p>
<h3 id="Visibility-of-Shared-Objects"><a href="#Visibility-of-Shared-Objects" class="headerlink" title="Visibility of Shared Objects"></a>Visibility of Shared Objects</h3><p>If two or more threads are sharing an object, without the proper use of either volatile declarations or synchronization, updates to the shared object made by one thread may not be visible to other threads.</p>
<p>Imagine that the shared object is initially stored in main memory. A thread running on CPU one then reads the shared object into its CPU cache. There it makes a change to the shared object. As long as the CPU cache has not been flushed back to main memory, the changed version of the shared object is not visible to threads running on other CPUs. This way each thread may end up with its own copy of the shared object, each copy sitting in a different CPU cache.</p>
<p>The following diagram illustrates the sketched situation. One thread running on the left CPU copies the shared object into its CPU cache, and changes its count variable to 2. This change is not visible to other threads running on the right CPU, because the update to count has not been flushed back to main memory yet.</p>
<p><img src="/images/architect/concurrent-jmm-6.png" alt="JMM"></p>
<p>To solve this problem you can use <a href="http://tutorials.jenkov.com/java-concurrency/volatile.html" target="_blank" rel="noopener">Java’s volatile keyword</a>. The volatile keyword can make sure that a given variable is read directly from main memory, and always written back to main memory when updated.</p>
<h3 id="Race-Conditions"><a href="#Race-Conditions" class="headerlink" title="Race Conditions"></a>Race Conditions</h3><p>If two or more threads share an object, and more than one thread updates variables in that shared object, race conditions may occur.</p>
<p>Imagine if thread A reads the variable count of a shared object into its CPU cache. Imagine too, that thread B does the same, but into a different CPU cache. Now thread A adds one to count, and thread B does the same. Now var1 has been incremented two times, once in each CPU cache.</p>
<p>If these increments had been carried out sequentially, the variable count would be been incremented twice and had the original value + 2 written back to main memory.</p>
<p>However, the two increments have been carried out concurrently without proper synchronization. Regardless of which of thread A and B that writes its updated version of count back to main memory, the updated value will only be 1 higher than the original value, despite the two increments.</p>
<p>This diagram illustrates an occurrence of the problem with race conditions as described above: </p>
<p><img src="/images/architect/concurrent-jmm-7.png" alt="JMM"></p>
<p>To solve this problem you can use a <a href="http://tutorials.jenkov.com/java-concurrency/synchronized.html" target="_blank" rel="noopener">Java synchronized block</a>. A synchronized block guarantees that only one thread can enter a given critical section of the code at any given time. Synchronized blocks also guarantee that all variables accessed inside the synchronized block will be read in from main memory, and when the thread exits the synchronized block, all updated variables will be flushed back to main memory again, regardless of whether the variable is declared volatile or not.</p>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul>
<li><a href="http://tutorials.jenkov.com/java-concurrency/java-memory-model.html" target="_blank" rel="noopener">Java Concurrency and Multithreading Tutorial</a></li>
</ul>
]]></content>
      <categories>
        <category>architect</category>
      </categories>
      <tags>
        <tag>concurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>Concurrent - NIO vs IO</title>
    <url>/2020/05/21/architect/concurrent/nio-vs-io/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>When studying both the Java NIO and IO API’s, a question quickly pops into mind:</p>
<p>When should I use IO and when should I use NIO?</p>
<p>In this text I will try to shed some light on the differences between Java NIO and IO, their use cases, and how they affect the design of your code.</p>
<h2 id="Main-Differences-Betwen-Java-NIO-and-IO"><a href="#Main-Differences-Betwen-Java-NIO-and-IO" class="headerlink" title="Main Differences Betwen Java NIO and IO"></a>Main Differences Betwen Java NIO and IO</h2><p>The table below summarizes the main differences between Java NIO and IO. I will get into more detail about each difference in the sections following the table.</p>
<table>
<thead>
<tr>
<th><strong>IO</strong></th>
<th><strong>NIO</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Stream oriented</td>
<td>Buffer oriented</td>
</tr>
<tr>
<td>Blocking IO</td>
<td>Non blocking IO</td>
</tr>
<tr>
<td></td>
<td>Selectors</td>
</tr>
</tbody>
</table>
<h2 id="Stream-Oriented-vs-Buffer-Oriented"><a href="#Stream-Oriented-vs-Buffer-Oriented" class="headerlink" title="Stream Oriented vs. Buffer Oriented"></a>Stream Oriented vs. Buffer Oriented</h2><p>The first big difference between Java NIO and IO is that IO is stream oriented, where NIO is buffer oriented. So, what does that mean?</p>
<p>Java IO being stream oriented means that you read one or more bytes at a time, from a stream. What you do with the read bytes is up to you. They are not cached anywhere. Furthermore, you cannot move forth and back in the data in a stream. If you need to move forth and back in the data read from a stream, you will need to cache it in a buffer first.</p>
<p>Java NIO’s buffer oriented approach is slightly different. Data is read into a buffer from which it is later processed. You can move forth and back in the buffer as you need to. This gives you a bit more flexibility during processing. However, you also need to check if the buffer contains all the data you need in order to fully process it. And, you need to make sure that when reading more data into the buffer, you do not overwrite data in the buffer you have not yet processed.</p>
<h2 id="Blocking-vs-Non-blocking-IO"><a href="#Blocking-vs-Non-blocking-IO" class="headerlink" title="Blocking vs. Non-blocking IO"></a>Blocking vs. Non-blocking IO</h2><p><strong>Java IO’s various streams are blocking. That means, that when a thread invokes a read() or write(), that thread is blocked until there is some data to read, or the data is fully written. The thread can do nothing else in the meantime.</strong></p>
<p>Java NIO’s non-blocking mode enables a thread to request reading data from a channel, and only get what is currently available, or nothing at all, if no data is currently available. Rather than remain blocked until data becomes available for reading, the thread can go on with something else.</p>
<p>The same is true for non-blocking writing. A thread can request that some data be written to a channel, but not wait for it to be fully written. The thread can then go on and do something else in the mean time.</p>
<p>What threads spend their idle time on when not blocked in IO calls, is usually performing IO on other channels in the meantime. That is, a single thread can now manage multiple channels of input and output.</p>
<h2 id="Selectors"><a href="#Selectors" class="headerlink" title="Selectors"></a>Selectors</h2><p>Java NIO’s selectors allow a single thread to monitor multiple channels of input. You can register multiple channels with a selector, then use a single thread to “select” the channels that have input available for processing, or select the channels that are ready for writing. This selector mechanism makes it easy for a single thread to manage multiple channels.</p>
<h2 id="How-NIO-and-IO-Influences-Application-Design"><a href="#How-NIO-and-IO-Influences-Application-Design" class="headerlink" title="How NIO and IO Influences Application Design"></a>How NIO and IO Influences Application Design</h2><p>Whether you choose NIO or IO as your IO toolkit may impact the following aspects of your application design:</p>
<ol>
<li>The API calls to the NIO or IO classes.</li>
<li>The processing of data.</li>
<li>The number of thread used to process the data.</li>
</ol>
<h3 id="The-API-Calls"><a href="#The-API-Calls" class="headerlink" title="The API Calls"></a>The API Calls</h3><p>Of course the API calls when using NIO look different than when using IO. This is no surprise. Rather than just read the data byte for byte from e.g. an InputStream, the data must first be read into a buffer, and then be processed from there.</p>
<h3 id="The-Processing-of-Data"><a href="#The-Processing-of-Data" class="headerlink" title="The Processing of Data"></a>The Processing of Data</h3><p>The processing of the data is also affected when using a pure NIO design, vs. an IO design.</p>
<p>In an IO design you read the data byte for byte from an InputStream or a Reader. Imagine you were processing a stream of line based textual data. For instance: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Name: Anna</span><br><span class="line">Age: 25</span><br><span class="line">Email: anna@mailserver.com</span><br><span class="line">Phone: 1234567890</span><br></pre></td></tr></table></figure>
<p>This stream of text lines could be processed like this: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream input = ... ; <span class="comment">// get the InputStream from the client socket</span></span><br><span class="line">BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(input));</span><br><span class="line">String nameLine   = reader.readLine();</span><br><span class="line">String ageLine    = reader.readLine();</span><br><span class="line">String emailLine  = reader.readLine();</span><br><span class="line">String phoneLine  = reader.readLine();</span><br></pre></td></tr></table></figure>
<p>Notice how the processing state is determined by how far the program has executed. In other words, once the first reader.readLine() method returns, you know for sure that a full line of text has been read. The readLine() blocks until a full line is read, that’s why. You also know that this line contains the name. Similarly, when the second readLine() call returns, you know that this line contains the age etc.</p>
<p>As you can see, the program progresses only when there is new data to read, and for each step you know what that data is. Once the executing thread have progressed past reading a certain piece of data in the code, the thread is not going backwards in the data (mostly not). This principle is also illustrated in this diagram: </p>
<p><img src="/images/architect/concurrent-nio-vs-io-1.png" alt="NIO"></p>
<p>A NIO implementation would look different. Here is a simplified example: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line"><span class="keyword">int</span> bytesRead = inChannel.read(buffer);</span><br></pre></td></tr></table></figure>
<p>Notice the second line which reads bytes from the channel into the ByteBuffer. When that method call returns you don’t know if all the data you need is inside the buffer. All you know is that the buffer contains some bytes. This makes processing somewhat harder.</p>
<p><strong>Imagine if, after the first read(buffer) call, that all what was read into the buffer was half a line. For instance, “Name: An”. Can you process that data? Not really. You need to wait until at leas a full line of data has been into the buffer, before it makes sense to process any of the data at all.</strong></p>
<p>So how do you know if the buffer contains enough data for it to make sense to be processed? Well, you don’t. The only way to find out, is to look at the data in the buffer. The result is, that you may have to inspect the data in the buffer several times before you know if all the data is inthere. This is both inefficient, and can become messy in terms of program design. For instance: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line"><span class="keyword">int</span> bytesRead = inChannel.read(buffer);</span><br><span class="line"><span class="keyword">while</span> (!bufferFull(bytesRead)) &#123;</span><br><span class="line">    bytesRead = inChannel.read(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The bufferFull() method has to keep track of how much data is read into the buffer, and return either true or false, depending on whether the buffer is full. In other words, if the buffer is ready for processing, it is considered full.</p>
<p>The bufferFull() method scans through the buffer, but must leave the buffer in the same state as before the bufferFull() method was called. If not, the next data read into the buffer might not be read in at the correct location. This is not impossible, but it is yet another issue to watch out for.</p>
<p>If the buffer is full, it can be processed. If it is not full, you might be able to partially process whatever data is there, if that makes sense in your particular case. In many cases it doesn’t.</p>
<p>The is-data-in-buffer-ready loop is illustrated in this diagram: </p>
<p><img src="/images/architect/concurrent-nio-vs-io-2.png" alt="NIO"></p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p><strong>NIO allows you to manage multiple channels (network connections or files) using only a single (or few) threads, but the cost is that parsing the data might be somewhat more complicated than when reading data from a blocking stream.</strong></p>
<p>If you need to manage thousands of open connections simultanously, which each only send a little data, for instance a chat server, implementing the server in NIO is probably an advantage. Similarly, if you need to keep a lot of open connections to other computers, e.g. in a P2P network, using a single thread to manage all of your outbound connections might be an advantage. This one thread, multiple connections design is illustrated in this diagram: </p>
<p><img src="/images/architect/concurrent-nio-vs-io-3.png" alt="NIO"></p>
<p>If you have fewer connections with very high bandwidth, sending a lot of data at a time, perhaps a classic IO server implementation might be the best fit. This diagram illustrates a classic IO server design: </p>
<p><img src="/images/architect/concurrent-nio-vs-io-4.png" alt="NIO"></p>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul>
<li><a href="http://tutorials.jenkov.com/java-nio/nio-vs-io.html" target="_blank" rel="noopener">Java Concurrency and Multithreading Tutorial</a></li>
</ul>
]]></content>
      <categories>
        <category>architect</category>
      </categories>
      <tags>
        <tag>concurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>Concurrent - Volatile</title>
    <url>/2020/05/19/architect/concurrent/volatile/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>The Java volatile keyword is used to mark a Java variable as “being stored in main memory”. More precisely that means, that every read of a volatile variable will be read from the computer’s main memory, and not from the CPU cache, and that every write to a volatile variable will be written to main memory, and not just to the CPU cache.</p>
<p>Actually, since Java 5 the volatile keyword guarantees more than just that volatile variables are written to and read from main memory. I will explain that in the following sections.</p>
<h2 id="Variable-Visibility-Problems"><a href="#Variable-Visibility-Problems" class="headerlink" title="Variable Visibility Problems"></a>Variable Visibility Problems</h2><p>In a multithreaded application where the threads operate on non-volatile variables, each thread may copy variables from main memory into a CPU cache while working on them, for performance reasons. If your computer contains more than one CPU, each thread may run on a different CPU. That means, that each thread may copy the variables into the CPU cache of different CPUs. This is illustrated here: </p>
<p><img src="/images/architect/concurrent-volatile-1.png" alt="Volatile"></p>
<p>With non-volatile variables there are no guarantees about when the Java Virtual Machine (JVM) reads data from main memory into CPU caches, or writes data from CPU caches to main memory. This can cause several problems which I will explain in the following sections.</p>
<p>Imagine a situation in which two or more threads have access to a shared object which contains a counter variable declared like this: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SharedObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Imagine too, that only Thread 1 increments the counter variable, but both Thread 1 and Thread 2 may read the counter variable from time to time.</p>
<p>If the counter variable is not declared volatile there is no guarantee about when the value of the counter variable is written from the CPU cache back to main memory. This means, that the counter variable value in the CPU cache may not be the same as in main memory. This situation is illustrated here: </p>
<p><img src="/images/architect/concurrent-volatile-2.png" alt="Volatile"></p>
<p>The problem with threads not seeing the latest value of a variable because it has not yet been written back to main memory by another thread, is called a “visibility” problem. The updates of one thread are not visible to other threads.</p>
<h2 id="The-Java-volatile-Visibility-Guarantee"><a href="#The-Java-volatile-Visibility-Guarantee" class="headerlink" title="The Java volatile Visibility Guarantee"></a>The Java volatile Visibility Guarantee</h2><p>The Java volatile keyword is intended to address variable visibility problems. By declaring the counter variable volatile all writes to the counter variable will be written back to main memory immediately. Also, all reads of the counter variable will be read directly from main memory.</p>
<p>Here is how the volatile declaration of the counter variable looks: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SharedObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Declaring a variable volatile thus guarantees the visibility for other threads of writes to that variable.</p>
<p>In the scenario given above, where one thread (T1) modifies the counter, and another thread (T2) reads the counter (<strong>but never modifies it</strong>), declaring the counter variable volatile is enough to guarantee visibility for T2 of writes to the counter variable.</p>
<p>If, however, <strong>both T1 and T2 were incrementing the counter variable, then declaring the counter variable volatile would not have been enough</strong>. More on that later.</p>
<h3 id="Full-volatile-Visibility-Guarantee"><a href="#Full-volatile-Visibility-Guarantee" class="headerlink" title="Full volatile Visibility Guarantee"></a>Full volatile Visibility Guarantee</h3><p>Actually, the visibility guarantee of Java volatile goes beyond the volatile variable itself. The visibility guarantee is as follows:</p>
<ul>
<li>If Thread A writes to a volatile variable and Thread B subsequently reads the same volatile variable, then all variables visible to Thread A before writing the volatile variable, will also be visible to Thread B after it has read the volatile variable.</li>
<li>If Thread A reads a volatile variable, then all all variables visible to Thread A when reading the volatile variable will also be re-read from main memory.</li>
</ul>
<p>Let me illustrate that with a code example: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> years;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> months</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> days;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> years, <span class="keyword">int</span> months, <span class="keyword">int</span> days)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.years  = years;</span><br><span class="line">        <span class="keyword">this</span>.months = months;</span><br><span class="line">        <span class="keyword">this</span>.days   = days;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The udpate() method writes three variables, of which only days is volatile.</p>
<p>The full volatile visibility guarantee means, that when a value is written to days, then all variables visible to the thread are also written to main memory. That means, that when a value is written to days, the values of years and months are also written to main memory.</p>
<p>When reading the values of years, months and days you could do it like this: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> years;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> months</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> days;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">totalDays</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="keyword">this</span>.days;</span><br><span class="line">        total += months * <span class="number">30</span>;</span><br><span class="line">        total += years * <span class="number">365</span>;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> years, <span class="keyword">int</span> months, <span class="keyword">int</span> days)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.years  = years;</span><br><span class="line">        <span class="keyword">this</span>.months = months;</span><br><span class="line">        <span class="keyword">this</span>.days   = days;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Notice the totalDays() method starts by reading the value of days into the total variable. When reading the value of days, the values of months and years are also read into main memory. Therefore you are guaranteed to see the latest values of days, months and years with the above read sequence.</p>
<h2 id="Instruction-Reordering-Challenges"><a href="#Instruction-Reordering-Challenges" class="headerlink" title="Instruction Reordering Challenges"></a>Instruction Reordering Challenges</h2><p>The Java VM and the CPU are allowed to reorder instructions in the program for performance reasons, as long as the semantic meaning of the instructions remain the same. For instance, look at the following instructions: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">a++;</span><br><span class="line">b++;</span><br></pre></td></tr></table></figure>
<p>These instructions could be reordered to the following sequence without losing the semantic meaning of the program: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">a++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">b++;</span><br></pre></td></tr></table></figure>
<p>However, instruction reordering present a challenge when one of the variables is a volatile variable. Let us look at the MyClass class from the example earlier in this Java volatile tutorial: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> years;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> months</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> days;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> years, <span class="keyword">int</span> months, <span class="keyword">int</span> days)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.years  = years;</span><br><span class="line">        <span class="keyword">this</span>.months = months;</span><br><span class="line">        <span class="keyword">this</span>.days   = days;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Once the update() method writes a value to days, the newly written values to years and months are also written to main memory. But, what if the Java VM reordered the instructions, like this: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> years, <span class="keyword">int</span> months, <span class="keyword">int</span> days)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.days   = days;</span><br><span class="line">    <span class="keyword">this</span>.months = months;</span><br><span class="line">    <span class="keyword">this</span>.years  = years;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The values of months and years are still written to main memory when the days variable is modified, but this time it happens before the new values have been written to months and years. The new values are thus not properly made visible to other threads. The semantic meaning of the reordered instructions has changed.</p>
<p>Java has a solution for this problem, as we will see in the next section.</p>
<h2 id="The-Java-volatile-Happens-Before-Guarantee"><a href="#The-Java-volatile-Happens-Before-Guarantee" class="headerlink" title="The Java volatile Happens-Before Guarantee"></a>The Java volatile Happens-Before Guarantee</h2><p>To address the instruction reordering challenge, the Java volatile keyword gives a “happens-before” guarantee, in addition to the visibility guarantee. The happens-before guarantee guarantees that:</p>
<ul>
<li>Reads from and writes to other variables cannot be reordered to occur after a write to a volatile variable, if the reads / writes originally occurred before the write to the volatile variable. The reads / writes before a write to a volatile variable are guaranteed to “happen before” the write to the volatile variable. Notice that it is still possible for e.g. reads / writes of other variables located after a write to a volatile to be reordered to occur before that write to the volatile. Just not the other way around. From after to before is allowed, but from before to after is not allowed.</li>
<li>Reads from and writes to other variables cannot be reordered to occur before a read of a volatile variable, if the reads / writes originally occurred after the read of the volatile variable. Notice that it is possible for reads of other variables that occur before the read of a volatile variable can be reordered to occur after the read of the volatile. Just not the other way around. From before to after is allowed, but from after to before is not allowed.</li>
</ul>
<p>The above happens-before guarantee assures that the visibility guarantee of the volatile keyword are being enforced.</p>
<h2 id="volatile-is-Not-Always-Enough"><a href="#volatile-is-Not-Always-Enough" class="headerlink" title="volatile is Not Always Enough"></a>volatile is Not Always Enough</h2><p>Even if the volatile keyword guarantees that all reads of a volatile variable are read directly from main memory, and all writes to a volatile variable are written directly to main memory, there are still situations where it is not enough to declare a variable volatile.</p>
<p>In the situation explained earlier where only Thread 1 writes to the shared counter variable, declaring the counter variable volatile is enough to make sure that Thread 2 always sees the latest written value.</p>
<p>In fact, multiple threads could even be writing to a shared volatile variable, and still have the correct value stored in main memory, if the new value written to the variable does not depend on its previous value. In other words, if a thread writing a value to the shared volatile variable does not first need to read its value to figure out its next value.</p>
<p>As soon as a thread needs to first read the value of a volatile variable, and based on that value generate a new value for the shared volatile variable, a volatile variable is no longer enough to guarantee correct visibility. The short time gap in between the reading of the volatile variable and the writing of its new value, creates an race condition where multiple threads might read the same value of the volatile variable, generate a new value for the variable, and when writing the value back to main memory - overwrite each other’s values.</p>
<p>The situation where multiple threads are incrementing the same counter is exactly such a situation where a volatile variable is not enough. The following sections explain this case in more detail.</p>
<p>Imagine if Thread 1 reads a shared counter variable with the value 0 into its CPU cache, increment it to 1 and not write the changed value back into main memory. Thread 2 could then read the same counter variable from main memory where the value of the variable is still 0, into its own CPU cache. Thread 2 could then also increment the counter to 1, and also not write it back to main memory. This situation is illustrated in the diagram below: </p>
<p><img src="/images/architect/concurrent-volatile-3.png" alt="Volatile"></p>
<p>Thread 1 and Thread 2 are now practically out of sync. The real value of the shared counter variable should have been 2, but each of the threads has the value 1 for the variable in their CPU caches, and in main memory the value is still 0. It is a mess! Even if the threads eventually write their value for the shared counter variable back to main memory, the value will be wrong.</p>
<h2 id="When-is-volatile-Enough"><a href="#When-is-volatile-Enough" class="headerlink" title="When is volatile Enough?"></a>When is volatile Enough?</h2><p>As I have mentioned earlier, <strong>if two threads are both reading and writing to a shared variable, then using the volatile keyword for that is not enough</strong>. You need to use a <a href="http://tutorials.jenkov.com/java-concurrency/synchronized.html" target="_blank" rel="noopener">synchronized</a> in that case to guarantee that the reading and writing of the variable is atomic. Reading or writing a volatile variable does not block threads reading or writing. For this to happen you must use the synchronized keyword around critical sections.</p>
<p>As an alternative to a synchronized block you could also use one of the many atomic data types found in the <a href="http://tutorials.jenkov.com/java-util-concurrent/index.html" target="_blank" rel="noopener">java.util.concurrent</a> package. For instance, the <a href="http://tutorials.jenkov.com/java-util-concurrent/atomiclong.html" target="_blank" rel="noopener">AtomicLong</a> or <a href="http://tutorials.jenkov.com/java-util-concurrent/atomicreference.html" target="_blank" rel="noopener">AtomicReference</a> or one of the others.</p>
<p><strong>In case only one thread reads and writes the value of a volatile variable and other threads only read the variable, then the reading threads are guaranteed to see the latest value written to the volatile variable</strong>. Without making the variable volatile, this would not be guaranteed.</p>
<p>The volatile keyword is guaranteed to work on 32 bit and 64 variables.</p>
<h2 id="Performance-Considerations-of-volatile"><a href="#Performance-Considerations-of-volatile" class="headerlink" title="Performance Considerations of volatile"></a>Performance Considerations of volatile</h2><p>Reading and writing of volatile variables causes the variable to be read or written to main memory. Reading from and writing to main memory is more expensive than accessing the CPU cache. <strong>Accessing volatile variables also prevent instruction reordering which is a normal performance enhancement technique</strong>. Thus, you should only use volatile variables when you really need to enforce visibility of variables.</p>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul>
<li><a href="http://tutorials.jenkov.com/java-concurrency/volatile.html" target="_blank" rel="noopener">Java Concurrency and Multithreading Tutorial</a></li>
</ul>
]]></content>
      <categories>
        <category>architect</category>
      </categories>
      <tags>
        <tag>concurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式消息通信 - ActiveMQ</title>
    <url>/2018/11/02/architect/distributed/activemq/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>消息队列中间件是服务架构中常见的组件，可用于异步处理、应用解耦、流量削锋、消息通讯等场景，是大型分布式系统不可缺少的中间件。ActiveMQ是一个用Java编写的、完全支持JMS1.1规范的开源消息中间件，支持REST、AMQP、STOMP、WS-Notification、MQTT、XMPP、OpenWire协议。</p>
<h2 id="消息队列组成"><a href="#消息队列组成" class="headerlink" title="消息队列组成"></a>消息队列组成</h2><p><img src="/images/architect/message-queue.png" alt="消息队列组成"></p>
<ul>
<li>生产者（Producer）：负责产生消息</li>
<li>消息代理（Message Broker）：负责存储和转发消息</li>
<li>消费者（Consumer）：负责消费消息</li>
</ul>
<blockquote>
<p>Broker负责把消息从发送端传送到接收端，可以把它看成是MQ的服务端。<br>转发分为推和拉两种：拉是指Consumer主动从Message Broker获取消息，推是指Message Broker主动将Consumer感兴趣的消息推送给Consumer</p>
</blockquote>
<!--
如果prefetchACK为true，那么prefetch必须大于0；当prefetchACK为false时，你可以指定prefetch为0以及任意大小的正数。不过，当prefetch=0时，表示consumer将使用PULL(拉取)的方式从broker端获取消息，broker端将不会主动push消息给client端，直到client端发送PullCommand时；当prefetch>0时，就开启了broker push模式，此后只要当client端消费且ACK了一定的消息之后，会立即push给client端多条消息。
-->
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义broker</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrokerServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BrokerService brokerServer = <span class="keyword">new</span> BrokerService();</span><br><span class="line">        brokerServer.setUseJmx(Boolean.TRUE);</span><br><span class="line">        brokerServer.addConnector(<span class="string">"tcp://127.0.0.1:61616"</span>);</span><br><span class="line">        brokerServer.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="可靠性机制"><a href="#可靠性机制" class="headerlink" title="可靠性机制"></a>可靠性机制</h2><p>默认情况下，生产者发送的消息是持久化的（同步发送），消息发送到broker后，Producer会等待broker对这条消息的处理情况反馈。同步发送持久消息能够提供更好的可靠性，但这潜在地影响了程序的响应速度，因为在接受到 broker 的确认消息之前应用程序或线程会被阻塞。如果应用程序能够容忍一些消息的丢失，那么可以使用异步发送。</p>
<p>异步发送不会在收到 broker 的确认之前一直阻塞 MessageProducer.send(message) 方法。如果想启动异步传送可以在 brokerURL 中配置 jms.useAsyncSend=true 选项，如：<code>tcp://127.0.0.1:61616?jms.useAsyncSend=true</code>。但即使是异步发送消息，生产者也是在收到 broker 的确认应答后才把下一条消息传送给broker。当使用异步传送的时候，可以通过设置 jms.producerWindowSize（单位为字节）属性来控制发送端无节制地向 broker 发送消息，如： <code>tcp://127.0.0.1:61616?jms.useAsyncSend=true&amp;jms.producerWindowSize=1024000</code>，设置后，当达到了 producerWindowSize 上限，即使是异步调用也会被阻塞。</p>
<blockquote>
<p>非持久化消息默认就是异步发送的，且 producerWindowSize 设置只对异步发送有意义。</p>
</blockquote>
<h2 id="消息确认模式"><a href="#消息确认模式" class="headerlink" title="消息确认模式"></a>消息确认模式</h2><p>在事务性会话中，<code>acknowledgeMode</code>被JMS服务器自动设置为<code>SESSION_TRANSACTED</code>模式。在该模式下，发送端只有commit后消息才能发送出去，接收端在commit后会自动签收消息。而在非事务会话中，消息何时被确认取决于创建会话时的应答模式。</p>
<table>
<thead>
<tr>
<th>应答模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>AUTO_ACKNOWLEDGE</td>
<td>自动确认模式，当接收端成功从MessageConsumer.receive()或MessageListener.onMessage(message)方法返回后，会话会自动确认该消息</td>
</tr>
<tr>
<td>CLIENT_ACKNOWLEDGE</td>
<td>客户端手动确认，接收端通过调用Message.acknowledge()方法手动确认消息</td>
</tr>
<tr>
<td>DUPS_OK_ACKNOWLEDGE</td>
<td>延迟确认模式</td>
</tr>
</tbody>
</table>
<blockquote>
<p>说明：这三种应答模式只在接收端设置有效。</p>
</blockquote>
<h2 id="消息传送模型"><a href="#消息传送模型" class="headerlink" title="消息传送模型"></a>消息传送模型</h2><h3 id="点对点模型"><a href="#点对点模型" class="headerlink" title="点对点模型"></a>点对点模型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivemqTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BROKER_URL = <span class="string">"tcp://127.0.0.1:61616"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"my-queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ActiveMQConnectionFactory(BROKER_URL);</span><br><span class="line">        connection = factory.createConnection();</span><br><span class="line">        <span class="comment">// Starts (or restarts) a connection's delivery of incoming messages.</span></span><br><span class="line">        connection.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueueSender</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Session session = connection.createSession(Boolean.TRUE, Session.SESSION_TRANSACTED);</span><br><span class="line">        Destination queue = session.createQueue(QUEUE_NAME);</span><br><span class="line">        MessageProducer producer = session.createProducer(queue);</span><br><span class="line">        Message message = session.createTextMessage(<span class="string">"Hello ActiveMQ"</span>);</span><br><span class="line">        producer.send(message);</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueueReceiver</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Session session = connection.createSession(Boolean.TRUE, Session.SESSION_TRANSACTED);</span><br><span class="line">        Destination queue = session.createQueue(QUEUE_NAME);</span><br><span class="line">        MessageConsumer consumer = session.createConsumer(queue);</span><br><span class="line">        <span class="comment">// This call blocks indefinitely until a message is produced or until this message consumer is closed.</span></span><br><span class="line">        TextMessage message = (TextMessage) consumer.receive();</span><br><span class="line">        System.out.println(message.getText());</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="发布-订阅模型"><a href="#发布-订阅模型" class="headerlink" title="发布/订阅模型"></a>发布/订阅模型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivemqTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BROKER_URL = <span class="string">"tcp://127.0.0.1:61616"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_NAME = <span class="string">"my-topic"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ActiveMQConnectionFactory(BROKER_URL);</span><br><span class="line">        connection = factory.createConnection();</span><br><span class="line">        <span class="comment">// Starts (or restarts) a connection's delivery of incoming messages.</span></span><br><span class="line">        connection.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTopicPublisher</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Session session = connection.createSession(Boolean.TRUE, Session.SESSION_TRANSACTED);</span><br><span class="line">        Destination topic = session.createTopic(TOPIC_NAME);</span><br><span class="line">        MessageProducer producer = session.createProducer(topic);</span><br><span class="line">        Message message = session.createTextMessage(<span class="string">"Hello ActiveMQ"</span>);</span><br><span class="line">        producer.send(message);</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTopicSubscriber</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Session session = connection.createSession(Boolean.TRUE, Session.SESSION_TRANSACTED);</span><br><span class="line">        Topic topic = session.createTopic(TOPIC_NAME);</span><br><span class="line">        MessageConsumer consumer = session.createConsumer(topic);</span><br><span class="line">        <span class="comment">// This call blocks indefinitely until a message is produced or until this message consumer is closed.</span></span><br><span class="line">        TextMessage message = (TextMessage) consumer.receive();</span><br><span class="line">        System.out.println(message.getText());</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDurableSubscriber</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String clientID = <span class="string">"my-durable-news"</span>;</span><br><span class="line">        Connection connection = <span class="keyword">new</span> ActiveMQConnectionFactory(BROKER_URL).createConnection();</span><br><span class="line">        connection.setClientID(clientID);</span><br><span class="line">        connection.start();</span><br><span class="line">        Session session = connection.createSession(Boolean.TRUE, Session.SESSION_TRANSACTED);</span><br><span class="line">        Topic topic = session.createTopic(TOPIC_NAME);</span><br><span class="line">        MessageConsumer consumer = session.createDurableSubscriber(topic, clientID);</span><br><span class="line">        TextMessage message = (TextMessage) consumer.receive();</span><br><span class="line">        System.out.println(message.getText());</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--
## [消息重发策略](http://activemq.apache.org/redelivery-policy.html)

### 消息重发时机
1. 在使用事务的Session中，调用rollback()方法；
2. 在使用事务的Session中，调用commit()方法之前就关闭了Session；
3. 在Session中使用CLIENT_ACKNOWLEDGE确认模式并且调用了recover()方法。

### 消息重发配置项
-->
<h2 id="Spring整合"><a href="#Spring整合" class="headerlink" title="Spring整合"></a>Spring整合</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:application.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"activeMQConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"$&#123;activemq.brokerURL&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"$&#123;activemq.user&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;activemq.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pooledConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.pool.PooledConnectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"activeMQConnectionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxConnections"</span> <span class="attr">value</span>=<span class="string">"$&#123;activemq.pool.maxConnections&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">ref</span>=<span class="string">"pooledConnectionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在程序中根据具体业务设置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="defaultDestinationName" value="$&#123;jms.template.defaultDestination&#125;"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ActiveMQ</span><br><span class="line">activemq.brokerURL=failover:(tcp://192.168.8.88:61616,tcp://192.168.8.129:61616)?randomize=false</span><br><span class="line">activemq.user=admin</span><br><span class="line">activemq.password=admin</span><br><span class="line">activemq.pool.maxConnections=50</span><br><span class="line"># JMS</span><br><span class="line">jms.template.defaultDestination=order-notify</span><br></pre></td></tr></table></figure>
<h3 id="整合测试"><a href="#整合测试" class="headerlink" title="整合测试"></a>整合测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:spring-activemq.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringActivemqTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"my-queue"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_NAME = <span class="string">"my-topic"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.assertNotNull(jmsTemplate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueueSender</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        jmsTemplate.setPubSubDomain(Boolean.FALSE);</span><br><span class="line">        jmsTemplate.setDefaultDestinationName(QUEUE_NAME);</span><br><span class="line">        jmsTemplate.send(<span class="keyword">new</span> MessageCreator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> session.createTextMessage(<span class="string">"Hello ActiveMQ"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueueReceiver</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        jmsTemplate.setPubSubDomain(Boolean.FALSE);</span><br><span class="line">        jmsTemplate.setDefaultDestinationName(QUEUE_NAME);</span><br><span class="line">        String message = (String) jmsTemplate.receiveAndConvert();</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTopicPublisher</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        jmsTemplate.setPubSubDomain(Boolean.TRUE);</span><br><span class="line">        jmsTemplate.setDefaultDestinationName(TOPIC_NAME);</span><br><span class="line">        jmsTemplate.send(<span class="keyword">new</span> MessageCreator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> session.createTextMessage(<span class="string">"Hello ActiveMQ"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTopicSubscriber</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        jmsTemplate.setPubSubDomain(Boolean.TRUE);</span><br><span class="line">        jmsTemplate.setDefaultDestinationName(TOPIC_NAME);</span><br><span class="line">        String message = (String) jmsTemplate.receiveAndConvert();</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>为了避免意外宕机以后丢失信息，需要做到重启后可以恢复消息队列，消息系统一般都会采用持久化机制。ActiveMQ的消息持久化机制有KahaDB、LevelDB、JDBC和Memory。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">broker</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 基于文件存储（默认）--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;kahaDB directory="$&#123;activemq.data&#125;/kahadb"/&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 基于文件存储 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;levelDB directory="$&#123;activemq.data&#125;/leveldb"/&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdbcPersistenceAdapter</span> <span class="attr">dataSource</span>=<span class="string">"#dataSource"</span> <span class="attr">createTablesOnStartup</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;memoryPersistenceAdapter/&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">broker</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/test"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h2><p>如果有broker1和broker2通过networkConnector连接，consumer1连接到broker1，consumer2连接到broker2。程序往broker1上面发送10条消息，然后当consumer2连接到broker2消费了5条消息时，突然broker2挂掉了。但是还剩5条消息在broker2上，除非broker2重启，然后有消费者连接到broker2上消费消息，否则，这些消息就好像消失了。遇到这样的情况，就可以通过设置<code>replayWhenNoConsumers</code>这个选项来使得broker2上有需要转发的消息但是没有消费者时，把消息回流到它原来的broker1上。</p>
<blockquote>
<p>对于broker1来讲，broker2也是消费者，所以当consumer2连接到broker2进行消费时，broker1上的消息会被broker2消费掉，而broker2上的消息又会被consumer2消费。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">broker</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destinationPolicy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">policyMap</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">policyEntries</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 把enableAudit设置为false以防止消息回流后被当做重复消息而不被分发 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">policyEntry</span> <span class="attr">queue</span>=<span class="string">"&gt;"</span> <span class="attr">enableAudit</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">networkBridgeFilterFactory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">conditionalNetworkBridgeFilterFactory</span> <span class="attr">replayWhenNoConsumers</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">networkBridgeFilterFactory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">policyEntry</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">policyEntries</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">policyMap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">destinationPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">networkConnectors</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 静态 Network Connectors --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">networkConnector</span> <span class="attr">uri</span>=<span class="string">"static://(tcp://192.168.8.88:61616,tcp://192.168.8.129:61616)"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">networkConnectors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">broker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>容错的链接：Failover协议实现了自动重新链接的逻辑，当一个Broker链接失败时，那么会链接到其他的Broker上。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BROKER_URL = <span class="string">"failover:(tcp://192.168.8.88:61616,tcp://192.168.8.129:61616)?randomize=false"</span>;</span><br><span class="line">ConnectionFactory factory = <span class="keyword">new</span> ActiveMQConnectionFactory(BROKER_URL);</span><br></pre></td></tr></table></figure>
<h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a><a href="https://activemq.apache.org/replicated-leveldb-store.html" target="_blank" rel="noopener">高可用</a></h2><p><img src="/images/architect/replicated-leveldb-store.jpg" alt="replicated-leveldb-store"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    replicas: 集群中的节点数，集群中至少有 (replicas/2)+1 个节点是存活的以避免服务中断</span></span><br><span class="line"><span class="comment">    bind: 当该节点成为master后它将绑定已配置的地址和端口来为复制协议提供服务，只需使用tcp://0.0.0.0:0进行配置即可</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">replicatedLevelDB</span> <span class="attr">directory</span>=<span class="string">"$&#123;activemq.data&#125;/leveldb"</span> <span class="attr">replicas</span>=<span class="string">"3"</span> <span class="attr">bind</span>=<span class="string">"tcp://0.0.0.0:0"</span> <span class="attr">hostname</span>=<span class="string">"192.168.8.88"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">zkAddress</span>=<span class="string">"192.168.8.88:2181,192.168.8.129:2181,192.168.8.131:2181"</span> <span class="attr">zkPath</span>=<span class="string">"/activemq/leveldb"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;replicatedLevelDB directory="$&#123;activemq.data&#125;/leveldb" replicas="3" bind="tcp://0.0.0.0:0" hostname="192.168.8.129"</span></span><br><span class="line"><span class="comment">                       zkAddress="192.168.8.88:2181,192.168.8.129:2181,192.168.8.131:2181" zkPath="/activemq/leveldb"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;replicatedLevelDB directory="$&#123;activemq.data&#125;/leveldb" replicas="3" bind="tcp://0.0.0.0:0" hostname="192.168.8.131"</span></span><br><span class="line"><span class="comment">                       zkAddress="192.168.8.88:2181,192.168.8.129:2181,192.168.8.131:2181" zkPath="/activemq/leveldb"/&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span>               </span><br><span class="line"><span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><ol>
<li><p>Download the <a href="https://github.com/hawtio/hawtio/releases" target="_blank" rel="noopener">hawtio-app-{VERSION}.jar</a></p>
</li>
<li><p>Execute with command <code>java -jar  hawtio-app-{VERSION}.jar</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>architect</category>
      </categories>
      <tags>
        <tag>distributed</tag>
      </tags>
  </entry>
  <entry>
    <title>大型网站架构演变</title>
    <url>/2018/10/11/architect/distributed/architect/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="第一版：单机应用"><a href="#第一版：单机应用" class="headerlink" title="第一版：单机应用"></a>第一版：单机应用</h2><p>大型网站都是从小型网站发展而来，一开始的架构都比较简单，随着业务的发展和用户量的激增，才开始做很多架构上的改进。当它还是小型网站的时候，没有太多访客，一般来讲只需要一台服务器就够了，这时应用程序、数据库等所有资源都在一台服务器上。</p>
<p><img src="/images/architect/architect-v1.png" alt="architect-v1">  </p>
<h2 id="第二版：数据库服务器和应用服务器分离"><a href="#第二版：数据库服务器和应用服务器分离" class="headerlink" title="第二版：数据库服务器和应用服务器分离"></a>第二版：数据库服务器和应用服务器分离</h2><p>随着网站业务的发展和用户量的增加，一台服务器就无法再满足需求了。大量用户访问导致访问速度越来越慢，而逐渐增加的数据也会导致存储空间不足，这时就需要增加服务器的数量来将应用和数据分离。此外，应用服务器和数据库服务器对硬件资源的要求也各不相同：应用服务器处理业务逻辑需要强大的CPU，数据库服务器对磁盘读写操作多需要更快的磁盘和更大的内存。  </p>
<p><img src="/images/architect/architect-v2.png" alt="architect-v2">  </p>
<h2 id="第三版：使用缓存改善网站性能"><a href="#第三版：使用缓存改善网站性能" class="headerlink" title="第三版：使用缓存改善网站性能"></a>第三版：使用缓存改善网站性能</h2><p>随着用户再增加，网站又面临一次挑战：数据库压力太大导致整站访问效率下降，用户体验受到影响。  </p>
<p>一个网站，往往 80% 的业务访问集中在 20% 的数据上，比如微博请求量最多的肯定是那些千万级粉丝的大 V 的微博，而几乎没有人关注你的首页，除了自己想起来之外根本不会被打开。既然大部分业务访问集中在一小部分数据上，那就把这一小部分数据先提前缓存在内存中，而不是每次都去数据库读取，这样就可以减轻数据库的访问压力，从而提高整个网站的访问速度。  </p>
<p>网站使用的缓存一般分为缓存到应用服务器或者缓存在专门的分布式缓存服务器。缓存到应用服务器，自己的访问速度快很多，但是受自身内存限制，往往不太适用。远程分布式缓存使用一个集群专门负责缓存服务，当内存不够还可以轻松得动态扩容。  </p>
<p><img src="/images/architect/architect-v3.png" alt="architect-v3">  </p>
<h2 id="第四版：应用服务器做集群"><a href="#第四版：应用服务器做集群" class="headerlink" title="第四版：应用服务器做集群"></a>第四版：应用服务器做集群</h2><p>随着网站业务的发展，单一应用服务器能够处理的请求连接有限，在网站访问高峰期，应用服务器成为了整个网站的瓶颈，使用服务器集群是网站解决高并发的常用手段。  </p>
<p>当一台服务器的处理能力和存储空间不足时，不要尝试去更换更强大的服务器，对大型网站而言，多么强大的服务器，都满足不了网站持续增长的业务需求。这种情况下，更恰当的做法是增加一台服务器分担原有服务器的访问及存储压力。对网站架构而言，只要能通过增加一台服务器的方式改善负载压力，就可以以同样的方式持续增加服务器不断改善系统性能，从而实现系统的可伸缩性。应用服务器集群是网站可伸缩架构设计中较为简单成熟的一种，如下图所示：  </p>
<p><img src="/images/architect/architect-v4.png" alt="architect-v4">  </p>
<p>通过负载均衡调度服务器，可以将来自用户浏览器的访问请求分发到应用服务器集群中的任何一台服务器上，如果有更多用户，就在集群中加入更多的应用服务器，使应用服务器的压力不再成为整个网站的瓶颈。  </p>
<h2 id="第五版：数据库读写分离"><a href="#第五版：数据库读写分离" class="headerlink" title="第五版：数据库读写分离"></a>第五版：数据库读写分离</h2><p>网站在使用缓存后，使得对大部分数据读操作访问都可以不通过数据库就能完成，但仍有一部分读操作(缓存访问不命中、缓存过期)和全部的写操作都需要访问数据库，在网站的用户达到一定规模后，数据库因为负载压力过高而成为网站的瓶颈。  </p>
<p>目前大部分的主流数据库都提供主从热备功能，通过配置两台数据库主从关系，可以将一台数据库服务器的数据更新同步到另一台服务器上。网站利用数据库的这一功能，实现数据库读写分离，从而改善数据库负载压力，如下图所示： </p>
<p><img src="/images/architect/architect-v5.png" alt="architect-v5">  </p>
<p>当应用服务器在写数据的时候，访问主数据库，主数据库通过主从复制机制将数据更新同步到从数据库，这样当应用服务器读数据时，就可以通过从数据库获得数据。为了便于应用程序访问读写分离后的数据库，通常在应用服务器端使用专门的数据访问模块，使数据库读写分离对应用透明。  </p>
<h2 id="第六版：数据库拆分"><a href="#第六版：数据库拆分" class="headerlink" title="第六版：数据库拆分"></a>第六版：数据库拆分</h2><p>任何强大的单一服务器都满足不了大型网站持续增长的业务需求。数据库经过读写分离后，从一台服务器拆分成两台服务器，但是随着网站业务的发展依然不能满足需求，这时需要对数据库进行拆分。常用的数据库拆分手段是业务分库，将不同业务的数据部署在不同的物理机器上，即垂直拆分，如下图所示：   </p>
<p><img src="/images/architect/architect-v6.png" alt="architect-v6">  </p>
<p>然而，垂直切分只是把表按业务划分到不同数据库，但却没有解决单表大数据量的问题。当单表数据规模达到千万级别时，就需要把一个表中的数据按照某种规则划分到不同的表或数据库中，即水平拆分。  </p>
<h2 id="第七版：使用搜索引擎"><a href="#第七版：使用搜索引擎" class="headerlink" title="第七版：使用搜索引擎"></a>第七版：使用搜索引擎</h2><p>随着网站业务越来越复杂，对数据检索的需求也越来越复杂，网站需要采用一些非数据库查询技术，如搜索引擎。     </p>
<p><img src="/images/architect/architect-v7.png" alt="architect-v7">  </p>
<p>搜索引擎是源自互联网的技术手段，对可伸缩的分布式特性具有更好的支持。应用服务器则通过一个统一数据访问模块访问各种数据，减轻应用程序管理诸多数据源的麻烦。  </p>
<h2 id="第八版：业务拆分"><a href="#第八版：业务拆分" class="headerlink" title="第八版：业务拆分"></a>第八版：业务拆分</h2><p>大型网站为了应对日益复杂的业务场景，通过使用分而治之的手段将整个网站业务分成不同的产品线。如电商网站都会将首页、商铺、订单、买家、卖家等拆分成不同的产品线，分归不同的业务团队负责。具体到技术上，也会根据产品线划分，将一个网站拆分成许多不同的应用，每个应用独立部署。应用之间可以通过一个超链接建立关系(在首页上的每个导航链接都指向不同的应用地址)，也可以通过消息队列进行数据分发，当然最多的还是通过访问同一个数据存储系统来构成一个关联的完整系统。  </p>
<p><img src="/images/architect/architect-v8.png" alt="architect-v8">  </p>
<h2 id="第九版：分布式服务"><a href="#第九版：分布式服务" class="headerlink" title="第九版：分布式服务"></a>第九版：分布式服务</h2><p>随着业务拆分越来越小，存储系统越来越庞大，应用系统的整体复杂度呈指数级增加，部署维护越来越困难。由于所有应用要和所有数据库系统连接，在数万台服务器规模的网站中，这些连接的数目是服务器规模的平方，导致数据库连接资源不足，拒绝服务。既然每一个应用系统都需要执行许多相同的业务操作，比如用户管理、商品管理等，那么可以将这些共用的业务提取出来独立部署。由这些可复用的业务连接数据库，提供共用业务服务，而应用系统只需要管理用户界面，通过分布式服务调用共用业务服务完成具体业务操作。  </p>
<h2 id="第十版：使用-CDN-和反向代理加速"><a href="#第十版：使用-CDN-和反向代理加速" class="headerlink" title="第十版：使用 CDN 和反向代理加速"></a>第十版：使用 CDN 和反向代理加速</h2><p>随着网站业务不断发展，用户规模越来越大，由于中国复杂的网络环境，不同地区的用户访问网站时，速度差别也极大。网站访问越慢，用户越容易失去耐心而离开。为了提供更好的用户体验，留住用户，需要加快网站的访问速度，主要手段有使用 CDN 和反向代理。  </p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://dubbo.apache.org/zh/docs/v2.7/user/preface/background/" target="_blank" rel="noopener">网站应用的演进</a></li>
<li><a href="https://shardingsphere.apache.org/document/current/cn/features/sharding/" target="_blank" rel="noopener">数据分片</a></li>
</ul>
]]></content>
      <categories>
        <category>architect</category>
      </categories>
      <tags>
        <tag>distributed</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务契约测试</title>
    <url>/2021/04/01/architect/distributed/contract/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>日常开发过程中，项目的接口通常由服务提供方约定和提供，微服务模式下接口被多个消费者调用更是常态，那么提供方接口的变更如何快速、高效、无遗漏的通知给消费者呢？另外，当一个service同时被多个使用者调用，如何保证对service的修改可以让其它所有使用者造成的影响都能被感知到？这些问题契约测试可以给你答案。</p>
<h2 id="测试问题"><a href="#测试问题" class="headerlink" title="测试问题"></a>测试问题</h2><p>假设我们有一个由多个微服务组成的应用程序，如下图所示：</p>
<p><img src="https://cloud.spring.io/spring-cloud-contract/reference/html/images/Deps.png" alt="Multiple Microservices"></p>
<p>如果我们想测试服务间通信时，通常有两种方式：</p>
<ol>
<li>部署所有微服务并执行端到端测试<ul>
<li>优点：<ul>
<li>模拟生产(真实集成场景)</li>
<li>测试服务之间的真实通信</li>
</ul>
</li>
<li>缺点：<ul>
<li>要测试一个微服务，我们必须部署其他相关的微服务，数据库及其他基础设施</li>
<li>运行时间过长，当其他服务不稳定或者请求时间过长时，就会导致测试效率很低，稳定性下降</li>
<li>反馈不及时</li>
<li>难以调试</li>
</ul>
</li>
</ul>
</li>
<li>在单元/集成测试中MOCK其他微服务（构建测试替身）<ul>
<li>优点：<ul>
<li>快速反馈</li>
<li>没有基础设施要求</li>
</ul>
</li>
<li>缺点：<ul>
<li>无法确保接口变动的安全性和准确性</li>
<li>测试可以通过但到生产时会失败（当内部系统测试都通过时，如何能保证真正的外部API没有变化？）</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>Spring Cloud Contract契约测试的出现就是为了解决上述问题。主要思想是为您提供非常快速的反馈而无需建立整个微服务链路，使用存根(替身)，您唯一需要的就是您直接使用的应用程序，下图显示了存根与应用程序的关系：</p>
<p><img src="https://cloud.spring.io/spring-cloud-contract/reference/html/images/Stubs2.png" alt="SCC Stubs"></p>
<p>契约测试分两种类型，一种是消费者驱动，一种是提供者驱动，其中最常用的，是消费者驱动的契约测试（Consumer-Driven Contract Test，简称 CDC）。核心思想是从消费者业务实现的角度出发，由消费者端定义需要的数据格式以及交互细节，生成一份契约文件，然后生产者根据契约文件来实现自己的逻辑，并在持续集成环境中持续验证该实现结果是否正确。</p>
<p>对于基于Restful API的微服务来说，它的契约就是指 API 的请求和响应的规则：</p>
<ul>
<li><p>对于请求，包括请求URL、请求头、请求内容等</p>
</li>
<li><p>对于响应，包括状态码、响应头、响应内容等</p>
</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">request:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="string">POST</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/api/orders</span></span><br><span class="line">  <span class="attr">bodyFromFile:</span> <span class="string">request.json</span></span><br><span class="line"><span class="attr">response:</span></span><br><span class="line">  <span class="attr">status:</span> <span class="number">201</span></span><br><span class="line">  <span class="attr">bodyFromFile:</span> <span class="string">response.json</span></span><br><span class="line">  <span class="attr">matchers:</span></span><br><span class="line">    <span class="attr">body:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">$.retCode</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">by_equality</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">$.retData.qrCode</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">by_regex</span></span><br><span class="line">        <span class="attr">predefined:</span> <span class="string">url</span></span><br></pre></td></tr></table></figure>
<h2 id="Contract-DSL-Dynamic-properties"><a href="#Contract-DSL-Dynamic-properties" class="headerlink" title="Contract DSL Dynamic properties"></a><a href="https://cloud.spring.io/spring-cloud-contract/reference/html/project-features.html#contract-dsl-dynamic-properties" target="_blank" rel="noopener">Contract DSL Dynamic properties</a></h2><h3 id="Contract-DSL-Dynamic-properties-in-Body"><a href="#Contract-DSL-Dynamic-properties-in-Body" class="headerlink" title="Contract DSL Dynamic properties in Body"></a><a href="https://cloud.spring.io/spring-cloud-contract/reference/html/project-features.html#contract-dsl-dynamic-properties-in-body" target="_blank" rel="noopener">Contract DSL Dynamic properties in Body</a></h3><blockquote>
<p>This section is valid only for the Coded DSL (Groovy, Java etc.)</p>
</blockquote>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">org.springframework.cloud.contract.spec.Contract.make &#123;</span><br><span class="line">    request &#123;</span><br><span class="line">        method(POST())</span><br><span class="line">        url($(consumer(<span class="string">'/rest-producer/api/books'</span>), producer(<span class="string">'/api/books'</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">    response &#123;</span><br><span class="line">        status(OK())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Contract-DSL-Regex"><a href="#Contract-DSL-Regex" class="headerlink" title="Contract DSL Regex"></a><a href="https://cloud.spring.io/spring-cloud-contract/reference/html/project-features.html#contract-dsl-regex" target="_blank" rel="noopener">Contract DSL Regex</a></h3><blockquote>
<p>This section is valid only for Groovy DSL. </p>
</blockquote>
<h3 id="Contract-DSL-Matchers"><a href="#Contract-DSL-Matchers" class="headerlink" title="Contract DSL Matchers"></a><a href="https://cloud.spring.io/spring-cloud-contract/reference/html/project-features.html#contract-dsl-matchers" target="_blank" rel="noopener">Contract DSL Matchers</a></h3><h2 id="SCC契约测试集成"><a href="#SCC契约测试集成" class="headerlink" title="SCC契约测试集成"></a><a href="https://cloud.spring.io/spring-cloud-contract/reference/html/getting-started.html#getting-started-first-application" target="_blank" rel="noopener">SCC契约测试集成</a></h2><p><img src="https://cloud.spring.io/spring-cloud-contract/reference/html/images/getting-started-three-second.png" alt="SCC UML Diagram"></p>
<h2 id="契约测试能给我们带来什么？"><a href="#契约测试能给我们带来什么？" class="headerlink" title="契约测试能给我们带来什么？"></a>契约测试能给我们带来什么？</h2><ul>
<li><p>降低服务集成的难度：把服务集成这个过程分解成了更细的单元测试和接口测试，它从消费者的需求为出发点，把消费者的需求作为测试用例驱动实现一份契约，然后验证提供者端的功能；</p>
</li>
<li><p>开发并行，提高开发效率：契约隔离了消费者和提供者，双方可以并行开展工作，开发过程中就利用契约进行预集成测试，不用等到联调再来集成调通接口，一旦成熟，在保证质量的前提下，联调的成本可以减低到几乎为0；</p>
</li>
<li><p>服务接口变更快速感知，确保变动的安全性和准确性：只要有变化，契约测试即可第一时间发现，保证安全和对接的准确性。</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在微服务模式下，服务间的调用关系复杂，契约测试是保证服务提高质量的重要手段之一，因此建议充分利用。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://wiremock.org/" target="_blank" rel="noopener">WireMock</a></li>
<li><a href="https://github.com/json-path/JsonPath" target="_blank" rel="noopener">JsonPath</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-contract/reference/html/" target="_blank" rel="noopener">Spring Cloud Contract</a></li>
</ul>
]]></content>
      <categories>
        <category>architect</category>
      </categories>
      <tags>
        <tag>distributed</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP协议</title>
    <url>/2018/10/14/architect/distributed/http/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>HTTP(HyperText Transfer Protocol)是一个基于<em>请求-应答</em>模式的、无状态的应用层协议，是万维网数据通信的基础。  </p>
<p>尽管TCP/IP协议是互联网上最流行的网络协议，但是，在HTTP协议中，并没有规定必须使用它或它支持的层。事实上，HTTP可以在任何互联网协议或其他网络上实现，HTTP假定其下层协议提供可靠的传输。因此，任何能够提供这种保证的协议都可以被其使用。因此也就是其在TCP/IP协议族使用TCP作为其传输层。  </p>
<p>HTTP并不需要其底层的传输层协议是面向连接的，只需要它是可靠的或不丢失消息(至少返回错误)的。在互联网中，有两个最常用的传输层协议：TCP是可靠的，而UDP不是。因此，HTTP依赖于面向连接的TCP进行消息传递，但连接并不是必须的(一个连接是由传输层来控制的，这从根本上不属于HTTP的范围)。</p>
<p>HTTP是无状态的，即在同一个连接中，两次执行成功的请求之间是没有关系的。这就带来了一个问题，用户没有办法在同一个网站中进行连续的交互。而使用HTTP的头部扩展，HTTP Cookies 就可以解决这个问题。把Cookies添加到头部中，创建一个会话让每次请求都能共享相同的上下文信息，从而保持客户端和服务器之间的会话。  </p>
<h3 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h3><p><img src="/images/architect/protocol-http-message-format.png" alt="HTTP Message Format"> </p>
<h3 id="HTTP请求方式"><a href="#HTTP请求方式" class="headerlink" title="HTTP请求方式"></a>HTTP请求方式</h3><table>
<thead>
<tr>
<th style="text-align:left">请求方式</th>
<th>幂等性</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">GET</td>
<td>幂等</td>
<td style="text-align:left">向服务器发出指定资源的请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，原因是GET请求可能会被网络蜘蛛等随意访问</td>
</tr>
<tr>
<td style="text-align:left">HEAD</td>
<td>幂等</td>
<td style="text-align:left">与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”(元信息或称元数据)</td>
</tr>
<tr>
<td style="text-align:left">POST</td>
<td>非幂等</td>
<td style="text-align:left">向指定资源提交数据，请求服务器进行处理(例如提交表单或者上传文件)。数据被包含在请求本文中，这个请求可能会创建新的资源或修改现有资源，或二者皆有</td>
</tr>
<tr>
<td style="text-align:left">DELETE</td>
<td>幂等</td>
<td style="text-align:left">请求服务器删除Request-URI所标识的资源</td>
</tr>
<tr>
<td style="text-align:left">PUT</td>
<td>幂等</td>
<td style="text-align:left">向指定资源位置上传其最新内容</td>
</tr>
<tr>
<td style="text-align:left">PATCH</td>
<td>非幂等</td>
<td style="text-align:left">用于将局部修改应用到资源(如果对应的资源不存在，服务器可以创建一个新资源)</td>
</tr>
</tbody>
</table>
<h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><table>
<thead>
<tr>
<th>状态码</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1xx(消息)</td>
<td>请求已被服务器接收，需要继续处理(除非在某些试验条件下，否则服务器禁止向此类客户端发送1xx响应)</td>
</tr>
<tr>
<td>2xx(成功)</td>
<td>请求已成功被服务器接收、理解、并接受</td>
</tr>
<tr>
<td>3xx(重定向)</td>
<td>需要客户端后续操作才能完成请求</td>
</tr>
<tr>
<td>4xx(客户端错误)</td>
<td>客户端原因导致服务器无法处理请求</td>
</tr>
<tr>
<td>5xx(服务器错误)</td>
<td>服务器原因导致处理请求出错</td>
</tr>
</tbody>
</table>
<h3 id="HTTP长连接"><a href="#HTTP长连接" class="headerlink" title="HTTP长连接"></a>HTTP长连接</h3><p>HTTP长连接(Keep-Alive)是使用同一个TCP连接来发送和接收多个HTTP请求/应答，而不是为每一个新的请求/应答打开新的连接的方法。  </p>
<p><img src="/images/architect/protocol-http-persistent-connection.png" alt="HTTP persistent connection"> </p>
<p>在 HTTP/1.0 中，默认使用的是短连接。也就是说，浏览器和服务器每进行一次HTTP操作就建立一次连接，任务结束就中断连接。如果客户端浏览器访问的某个HTML或其他类型的 Web网页中包含有其他的Web资源(如JS、CSS、Image等)，当浏览器每遇到这样一个Web资源，就会建立一个HTTP会话。  </p>
<p>在 HTTP/1.0 中，没有官方的 Keep-Alive 的操作。通常是在现有协议上添加一个指数，如果浏览器支持 Keep-Alive，它会在请求头中添加 <em>Connection: Keep-Alive</em> 字段，然后当服务器收到请求作出响应时，它会在响应头中添加 <em>Connection: Keep-Alive</em> 字段，这样做，连接就不会中断，而是保持连接。当客户端发送另一个请求时，它会使用同一个连接。这一直持续到客户端或服务器端认为会话已经结束，其中一方中断连接。  </p>
<p>在 HTTP/1.1 中，官方规定的 Keep-Alive 使用标准和 HTTP/1.0 版本中有些不同，所有的连接默认都是长连接，除非在请求头或响应头中添加 <em>Connection: close</em> 字段指明要关闭，这也就是为什么 <em>Connection: Keep-Alive</em> 字段再没有意义的原因。然而，Apache 2.0 httpd 的默认连接过期时间是仅仅15秒，对于 Apache 2.2 只有5秒。短的过期时间的优点是能够快速的传输多个web页组件，而不会绑定多个服务器进程或线程太长时间。  </p>
<h3 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h3><p>缓存是一种保存资源副本并在下次请求时直接使用该副本的技术。当 Web 缓存发现请求的资源已经被存储，它会拦截请求，返回该资源的拷贝，而不会去源服务器重新下载。这样带来的好处有：缓解服务器端压力，提升性能(获取资源的耗时更短了)。对于网站来说，缓存是达到高性能的重要组成部分。缓存需要合理配置，因为并不是所有资源都是永久不变的，重要的是对一个资源的缓存应截止到其下一次发生改变(即不能缓存过期的资源)。<br>虽然 HTTP 缓存不是必须的，但重用缓存的资源通常是必要的。然而常见的 HTTP 缓存只能存储 GET 响应，对于其他类型的响应则无能为力(一般只有GET请求才会被缓存)。  </p>
<p>在 HTTP/1.1 中定义的 Cache-Control 头用来区分对缓存机制的支持情况，请求头和响应头都支持这个属性。通过它提供的不同的值来定义缓存策略。  </p>
<h4 id="缓存控制"><a href="#缓存控制" class="headerlink" title="缓存控制"></a>缓存控制</h4><ol>
<li><p>禁止进行缓存<br>缓存中不得存储任何关于客户端请求和服务端响应的内容，每次由客户端发起的请求都会下载完整的响应内容。  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Cache-Control:</span> <span class="literal">no</span><span class="string">-store</span></span><br><span class="line"><span class="attr">Cache-Control:</span> <span class="literal">no</span><span class="string">-cache,</span> <span class="literal">no</span><span class="string">-store,</span> <span class="string">must-revalidate</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>强制确认缓存<br>每次有请求发出时，缓存会将此请求发到服务器(该请求应该会带有与本地缓存相关的验证字段)，服务器端会验证请求中所描述的缓存是否过期，若未过期(实际就是返回304)，则缓存才使用本地缓存副本。  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Cache-Control:</span> <span class="literal">no</span><span class="string">-cache</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>私有缓存和公共缓存<br>public 指令表示该响应可以被任何中间人(比如中间代理、CDN等)缓存。若指定了 public，则一些通常不被中间人缓存的页面(因为默认是private)，比如带有HTTP验证信息(帐号密码)的页面或某些特定影响状态码的页面，将会被其缓存。而 private 则表示该响应是专用于某单个用户的，中间人不能缓存此响应，该响应只能应用于浏览器私有缓存中。  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Cache-Control:</span> <span class="string">private</span></span><br><span class="line"><span class="attr">Cache-Control:</span> <span class="string">public</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>缓存过期机制<br>过期机制中，最重要的指令是 “max-age=<seconds>“，表示资源能够被缓存(保持新鲜)的最大时间。相对Expires而言，max-age是距离请求发起的时间的秒数。针对应用中那些不会改变的文件，通常可以手动设置一定的时长以保证缓存有效，例如JS、CSS、图片等静态资源。  </seconds></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Cache-Control:</span> <span class="string">max-age=31536000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>缓存验证确认<br>当使用了 “must-revalidate” 指令，那就意味着缓存在考虑使用一个陈旧的资源时，必须先验证它的状态，已过期的缓存将不被使用。  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Cache-Control:</span> <span class="string">must-revalidate</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Pragma 头<br>Pragma 是 HTTP/1.0 标准中定义的一个header属性，请求中包含Pragma的效果跟在头信息中定义 Cache-Control: no-cache 相同，但是HTTP的响应头不支持这个属性，所以它不能拿来完全替代 HTTP/1.1 中定义的Cache-control头。通常定义Pragma以向后兼容基于 HTTP/1.0 的客户端。  </p>
</li>
</ol>
<h4 id="新鲜度"><a href="#新鲜度" class="headerlink" title="新鲜度"></a>新鲜度</h4><p>理论上来讲，当一个资源被缓存存储后，该资源应该可以被永久存储在缓存中。由于缓存只有有限的空间用于存储资源副本，所以缓存会定期地将一些副本删除，这个过程叫做缓存驱逐。另一方面，当服务器上面的资源进行了更新，那么缓存中的对应资源也应该被更新，由于HTTP是C/S模式的协议，服务器更新一个资源时，不可能直接通知客户端及其缓存，所以双方必须为该资源约定一个过期时间，在该过期时间之前，该缓存副本就是新鲜的，当过了过期时间后，该缓存副本则变为陈旧的。驱逐算法用于将陈旧的缓存副本替换为新鲜的，注意，一个陈旧的缓存副本是不会直接被清除或忽略的，当客户端发起一个请求时，缓存检索到已有一个对应的陈旧缓存副本，则缓存会先将此请求附加一个 If-None-Match 头，然后发给目标服务器，以此来检查该资源副本是否是依然还是算新鲜的，若服务器返回了 304 Not Modified(该响应不会有带有实体信息)，则表示此资源副本是新鲜的，这样一来，可以节省一些带宽。若服务器通过 If-None-Match 或 If-Modified-Since 判断后发现已过期，那么会带有该资源的实体内容返回。  </p>
<p><img src="/images/architect/protocol-http-cache-staleness.png" alt="HTTP Cache Staleness"> </p>
<p>对于含有特定头信息的请求，会去计算缓存寿命。比如 Cache-control: max-age=N 的头，相应的缓存的寿命就是N。通常情况下，对于不含这个属性的请求则会去查看是否包含Expires属性，通过比较Expires的值和头里面Date属性的值来判断是否缓存还有效。如果 max-age 和 expires 属性都没有，再找头里的 Last-Modified 信息。如果有，缓存的寿命就等于头里面Date的值减去Last-Modified的值除以10。  </p>
<p>更多地利用缓存资源，可以提高网站的性能和相应速度。为了优化缓存，过期时间设置得尽量长是一种很好的策略，但一旦要更新就会很困难。特指网页上引入的一些JS、CSS文件，当它们变动时需要尽快更新线上资源。相信有人想到了办法：通过更新页面中引用的资源路径，让浏览器主动放弃缓存,加载新资源。我们可以在URL后面(通常是文件名后面)会加上版本号(摘要算法)，加上版本号后的资源就被视作一个完全新的独立的资源了。但是这么做也存在一个弊端，所有引用这个资源的地方都需要更新链接。Web开发者们通常会采用自动化构建工具在实际工作中完成这些琐碎的工作。</p>
<h4 id="缓存验证"><a href="#缓存验证" class="headerlink" title="缓存验证"></a>缓存验证</h4><p>用户点击刷新按钮时会开始缓存验证。如果缓存的响应头信息里含有 Cache-control: must-revalidate 的定义，在浏览的过程中也会触发缓存验证。另外，在浏览器偏好设置里设置 Advanced-&gt;Cache 为强制验证缓存也能达到相同的效果。  </p>
<p>当缓存的文档过期后，需要进行缓存验证或者重新获取资源。只有在服务器返回强校验器或者弱校验器时才会进行验证。  </p>
<p>ETag 响应头作为缓存的一种强校验器，是一个对用户代理(User Agent简称UA)不透明的值。对于像浏览器这样的HTTP UA，不知道ETag代表什么，不能预测它的值是多少。如果资源请求的响应头里含有ETag，客户端可以在后续的请求的头中带上 If-None-Match 头来验证缓存。  </p>
<p>Last-Modified 响应头可以作为一种弱校验器。说它弱是因为它只能精确到一秒。如果响应头里含有这个信息，客户端可以在后续的请求中带上 If-Modified-Since 来验证缓存。  </p>
<p>当向服务端发起缓存校验的请求时，服务端会返回 200 OK 表示返回正常的结果或者 304 Not Modified(不返回body)表示浏览器可以使用本地缓存文件。304的响应头也可以同时更新缓存文档的过期时间。  </p>
<h2 id="TLS安全协议"><a href="#TLS安全协议" class="headerlink" title="TLS安全协议"></a>TLS安全协议</h2><p>TLS(Transport Layer Security)及其前身SSL(Secure Sockets Layer)是一种安全协议，目的是为互联网通信提供安全及数据完整性保障。  </p>
<p>TLS使用 <a href="https://zh.wikipedia.org/wiki/X.509" target="_blank" rel="noopener">X.509</a> 认证，之后利用非对称加密演算来对通信方做身份认证，之后交换对称密钥作为会话密钥。这个会话密钥是用来将通信两方交换的数据做加密，保证两个应用间通信的保密性和可靠性，使客户与服务器应用之间的通信不被攻击者窃听。  </p>
<p>TLS协议采用C/S架构模型，用于在两个应用程序间透过网络创建起安全的连线，防止在交换数据时受到窃听及篡改。</p>
<p>TLS协议的优势是与高层的应用层协议(如HTTP、FTP、Telnet等)无耦合。应用层协议能透明地运行在TLS协议之上，由TLS协议进行创建加密通道需要的协商和认证。应用层协议传送的数据在通过TLS协议时都会被加密，从而保证通信的私密性。  </p>
<p>TLS协议是可选的，必须配置客户端和服务器才能使用。一旦客户端和服务器都同意使用TLS协议，他们通过使用一个握手过程协商出一个有状态的连接以传输数据。通过握手，客户端和服务器协商各种参数用于创建安全连接：  </p>
<ol>
<li>当客户端连接到支持TLS协议的服务器要求创建安全连接并列出了受支持的密码组合(加密密码算法和加密哈希函数)，握手开始。</li>
<li>服务器从该列表中决定加密和散列函数，并通知客户端。</li>
<li>服务器发回其数字证书，此证书通常包含服务器的名称、受信任的证书颁发机构(CA)和服务器的公钥。</li>
<li>客户端确认其颁发的证书的有效性。</li>
<li>为了生成会话密钥用于安全连接，客户端使用服务器的公钥加密随机生成的密钥，并将其发送到服务器，只有服务器才能使用自己的私钥解密。</li>
<li>利用随机数，双方生成用于加密和解密的对称密钥。这就是TLS协议的握手，握手完毕后的连接是安全的，直到连接被关闭。如果上述任何一个步骤失败，TLS握手过程就会失败，并且断开所有的连接。</li>
</ol>
<p><img src="/images/architect/protocol-tls-authentication.png" alt="TLS Authentication">  </p>
<p>TLS利用密钥算法在互联网上提供端点身份认证与通讯保密，其基础是公钥基础设施(PKI)。不过在实现的典型例子中，只有网络服务者被可靠身份验证，而其客户端则不一定。这是因为公钥基础设施普遍商业运营，电子签名证书通常需要付费购买。协议的设计在某种程度上能够使C/S架构应用程序通讯本身预防窃听、干扰和消息伪造。</p>
<p>TLS包含三个基本阶段：</p>
<ol>
<li>对等协商支持的密钥算法</li>
<li>基于非对称密钥的信息传输加密和身份认证、基于PKI证书的身份认证</li>
<li>基于对称密钥的数据传输保密</li>
</ol>
<p>在第一阶段，客户端与服务器协商所用密码算法。当前广泛实现的算法选择如下：  </p>
<ul>
<li>公钥私钥非对称密钥保密系统：RSA、Diffie-Hellman、DSA</li>
<li>对称密钥保密系统：RC2、RC4、IDEA、DES、Triple DES、AES以及Camellia</li>
<li>单向散列函数：MD5、SHA1以及SHA256</li>
</ul>
<h3 id="会话密钥"><a href="#会话密钥" class="headerlink" title="会话密钥"></a>会话密钥</h3><p>会话密钥(Session key)是一次性用于会话中加密用的对称式密钥，所有成员使用同一把密钥来加密明文、解密密文，在此次连线结束该密钥即无效，如需重新通信则需要再重新进行一次密钥的产生及交换等步骤。  </p>
<p>在密码学中，只要消息一送离己方，就假设会遭到拦截。如果在交换密钥的过程中未经处理的会议密钥遭到拦截，则此加密形同虚设。所以在对称式加密中，如何交换密钥是一个重要的课题。  </p>
<p>非对称加密虽然相较安全且不用考虑如何交换密钥，但需要较多的资源来进行运算，对于许多需求来说太慢了；所有私密密钥(secret key)算法都要求密钥是安全分发的，通过使用非对称加密算法来加密另一个更快速的对称式加密算法的秘密密钥，可以显著提高整体性能。  </p>
<p>跟所有密钥一样，必须使用特殊的方法产生会话密钥，使其不能被攻击者预测，通常会使用随机的方式。在任何的加密系统中，没有正确选择会话密钥(或任何密钥)会是一个重大的设计缺陷。  </p>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTPS 协议可以理解为 HTTP+SSL/TLS，即 HTTP 下加入 TLS 层，HTTPS 的安全基础是 TLS，客户端和服务端的信息传输都会通过 TLS 进行加密，所以传输的数据都是加密后的数据。   </p>
<table>
<thead>
<tr>
<th>HTTP的不安全性</th>
<th>HTTPS解决方案</th>
</tr>
</thead>
<tbody>
<tr>
<td>窃听风险(攻击者可以获知消息内容)</td>
<td>消息加密</td>
</tr>
<tr>
<td>篡改风险(攻击者可以篡改消息内容)</td>
<td>消息摘要</td>
</tr>
<tr>
<td>冒充风险(攻击者可以冒充其他人参与通信)</td>
<td>CA身份认证</td>
</tr>
</tbody>
</table>
<p><img src="/images/architect/protocol-https.jpg" alt="Protocol HTTPS"></p>
<h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2><p>REST(Representational State Transfer)是一种万维网软件架构风格，目的是便于不同软件/程序在网络(如互联网)中互相传递信息。需要注意的是，REST是设计风格而不是标准。REST通常基于使用HTTP、URI、XML和HTML这些现有的广泛流行的协议和标准。  </p>
<p>要理解RESTful架构，最好的方法就是去理解 Representational State Transfer 这个词组到底是什么意思，它的每一个词代表了什么涵义。</p>
<ul>
<li>资源(Resources)：REST的名称 <em>表现层状态转化</em> 中，省略了主语，表现层其实指的是资源的表现层，而资源是由统一资源定位符(URI)来指定。  </li>
<li>表现层(Representation)：资源的表现形式可以是JSON、XML或者HTML，当然也可以是任何其他的格式。</li>
<li>状态转换(State Transfer)：状态转换是建立在表现层之上的，客户端通过操作资源的表现形式来操作资源，对资源的操作包括获取、创建、修改和删除资源，这些操作正好对应HTTP协议提供的GET、POST、PUT和DELETE方法。 </li>
</ul>
<table>
<thead>
<tr>
<th>状态码</th>
<th>请求方式</th>
<th>响应内容</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>200</td>
<td>GET/PUT</td>
<td>资源</td>
<td>操作成功</td>
</tr>
<tr>
<td>201</td>
<td>POST</td>
<td>资源</td>
<td>资源创建成功</td>
</tr>
<tr>
<td>202</td>
<td>POST/PUT/DELETE/PATCH</td>
<td>N/A</td>
<td>请求已被接受</td>
</tr>
<tr>
<td>204</td>
<td>PUT/DELETE/PATCH</td>
<td>N/A</td>
<td>操作执行成功但没有返回数据</td>
</tr>
<tr>
<td>301</td>
<td>GET</td>
<td>Link</td>
<td>资源已被移除</td>
</tr>
<tr>
<td>303</td>
<td>GET</td>
<td>Link</td>
<td>重定向</td>
</tr>
<tr>
<td>304</td>
<td>GET</td>
<td>N/A</td>
<td>资源没有被修改</td>
</tr>
<tr>
<td>400</td>
<td>GET/POST/PUT/DELETE/PATCH</td>
<td>错误提示</td>
<td>请求参数有误</td>
</tr>
<tr>
<td>401</td>
<td>GET/POST/PUT/DELETE/PATCH</td>
<td>错误提示</td>
<td>未认证</td>
</tr>
<tr>
<td>403</td>
<td>GET/POST/PUT/DELETE/PATCH</td>
<td>错误提示</td>
<td>未授权</td>
</tr>
<tr>
<td>404</td>
<td>GET/POST/PUT/DELETE/PATCH</td>
<td>错误提示</td>
<td>资源不存在</td>
</tr>
<tr>
<td>405</td>
<td>GET/POST/PUT/DELETE/PATCH</td>
<td>错误提示</td>
<td>请求方法不允许</td>
</tr>
<tr>
<td>409</td>
<td>GET/POST/PUT/DELETE/PATCH</td>
<td>错误提示</td>
<td>资源冲突</td>
</tr>
<tr>
<td>415</td>
<td>GET/POST/PUT/DELETE/PATCH</td>
<td>错误提示</td>
<td>不支持的数据（媒体）类型</td>
</tr>
<tr>
<td>429</td>
<td>GET/POST/PUT/DELETE/PATCH</td>
<td>错误提示</td>
<td>请求过多被限制</td>
</tr>
<tr>
<td>500</td>
<td>GET/POST/PUT/DELETE/PATCH</td>
<td>错误提示</td>
<td>服务器内部错误</td>
</tr>
</tbody>
</table>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview" target="_blank" rel="noopener">HyperText Transfer Protocol</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ" target="_blank" rel="noopener">HTTP caching</a></li>
<li><a href="https://en.wikipedia.org/wiki/Transport_Layer_Security" target="_blank" rel="noopener">Transport Layer Security</a></li>
</ul>
]]></content>
      <categories>
        <category>architect</category>
      </categories>
      <tags>
        <tag>distributed</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式消息通信 - JMS</title>
    <url>/2018/11/01/architect/distributed/jms/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="JMS-规范"><a href="#JMS-规范" class="headerlink" title="JMS 规范"></a><a href="https://docs.oracle.com/cd/E19688-01/817-5020-10/overview.html" target="_blank" rel="noopener">JMS 规范</a></h2><p>JMS 指定了消息结构、编程模型、和一套控制消息传送操作的规则和语义。</p>
<h3 id="JMS-消息结构"><a href="#JMS-消息结构" class="headerlink" title="JMS 消息结构"></a>JMS 消息结构</h3><p>按照 JMS 规范，一个消息包括三部分：标题、属性和主体。</p>
<ul>
<li>标题：标题指定了消息的 JMS 属性（目标、持久与否、有效期及优先级），这些属性控制了消息传送系统如何传送消息。</li>
<li>属性：属性（可以看作标题的扩充）为可选项，应用程序可以使用属性提供的值根据各种选择标准来过滤消息，属性为可选项。</li>
<li>消息主体：消息主体包括要交换的实际数据，JMS 支持六种主体类型，包括一种基本消息类型（Message）和五种子类型（BytesMessage、MapMessage、ObjectMessage、StreamMessage 和 TextMessage）。</li>
</ul>
<h3 id="JMS-编程模型"><a href="#JMS-编程模型" class="headerlink" title="JMS 编程模型"></a>JMS 编程模型</h3><p>在 JMS 编程模型中，JMS 客户机（组件或应用程序）通过 JMS 消息服务交换消息。消息生成方将消息发送至消息服务，消息使用方则从消息服务接收这些消息。这些消息传送操作是使用一组实现 JMS 应用编程接口 (API) 的对象（由 JMS 提供者提供）来执行的。</p>
<p><img src="/images/architect/distributed-jms.png" alt="JMS 编程对象"></p>
<p>在 JMS 编程模型中，JMS 客户机使用 ConnectionFactory 对象创建一个连接，向 JMS 消息服务发送消息以及从 JMS 消息服务接收消息均是通过此连接来进行。Connection 是 JMS 客户机与消息服务的活动连接。创建连接时，将分配通信资源以及验证客户机。这是一个相当重要的对象，大多数客户机均使用一个连接来进行所有的消息传送。</p>
<p>连接用于创建会话。Session 是一个用于生成和接收消息的单线程上下文。它用于创建发送和接收消息的生成方和使用方，并为所发送的消息定义发送顺序。通过大量的确认选项或事务（可由分布式事务管理器来管理），会话支持可靠的传送。</p>
<p>JMS 客户机使用 MessageProducer 向指定的物理目标（在 API 中表示为目标对象）发送消息。消息生成方可指定一个默认传送模式（持久性消息或非持久性消息）、优先级和有效期值，以控制生成方向物理目标发送的所有消息。</p>
<p>同样，JMS 客户机使用 MessageConsumer 对象从指定的物理目标（在 API 中表示为目标对象）接收消息。消息使用方可使用消息选择器，借助它，消息服务可以仅向消息使用方发送与选择标准匹配的那些消息。</p>
<p>消息使用方可以支持同步或异步消息接收。异步接收可通过向使用方注册 MessageListener 来实现。当会话线程调用 MessageListener 对象的 onMessage() 方法时，客户机将接收到消息。</p>
<h3 id="被管理对象"><a href="#被管理对象" class="headerlink" title="被管理对象"></a>被管理对象</h3><p>JMS 提供了两种通用类型的被管理对象。连接工厂对象和目标对象。虽然两者都用于封存提供者特有的信息，但在 JMS 客户机中，它们的用途却有很大的差异。连接工厂用于创建至消息服务器的连接，而目标对象用于标识 JMS 消息服务使用的物理目标。</p>
<h3 id="JMS-消息传送"><a href="#JMS-消息传送" class="headerlink" title="JMS 消息传送"></a>JMS 消息传送</h3><h4 id="消息传送模型"><a href="#消息传送模型" class="headerlink" title="消息传送模型"></a>消息传送模型</h4><p>JMS 支持两种截然不同的消息传送模型：点对点模型和发布/订阅模型。</p>
<ul>
<li>点对点（队列目标）：消息从一个生成方传送至一个使用方。在此传送模型中，目标是一个队列。消息首先被传送至队列目标，然后根据队列传送策略从此队列将消息传送至向此队列进行注册的某一个使用方，一次只传送一条消息。可以向队列目标发送消息的生成方的数量没有限制，但每条消息只能发送至、并由一个使用方成功接收。如果没有已向队列目标注册的使用方，队列将保留它收到的消息，并在某个使用方向该队列进行注册时将消息传送给该使用方。</li>
<li>发布/订阅（主题目标）：消息从一个生成方传送至任意数量的使用方。在此传送模型中，目标是一个主题。消息首先被传送至主题目标，然后传送至所有已订阅此主题的活动使用方。可以向主题目标发送消息的生成方的数量没有限制，并且每个消息可以发送至任意数量的订阅使用方。主题目标也支持长期订阅的概念。长期订阅表示使用方已向主题目标进行注册，但在消息传送时此使用方可以处于非活动状态。当此使用方再次处于活动状态时，它将接收此信息。如果没有已向主题目标注册的使用方，主题不保留其接收到的消息，除非有非活动使用方注册了长期订阅。</li>
</ul>
<table>
<thead>
<tr>
<th>统一域</th>
<th>点对点域</th>
<th>发布/订阅域</th>
</tr>
</thead>
<tbody>
<tr>
<td>Destination（Queue 或 Topic）</td>
<td>Queue</td>
<td>Topic</td>
</tr>
<tr>
<td>ConnectionFactory</td>
<td>QueueConnectionFactory</td>
<td>TopicConnectionFactory</td>
</tr>
<tr>
<td>Connection</td>
<td>QueueConnection</td>
<td>TopicConnection</td>
</tr>
<tr>
<td>Session</td>
<td>QueueSession</td>
<td>TopicSession</td>
</tr>
<tr>
<td>MessageProducer</td>
<td>QueueSender</td>
<td>TopicPublisher</td>
</tr>
<tr>
<td>MessageConsumer</td>
<td>QueueReceiver</td>
<td>TopicSubscriber</td>
</tr>
</tbody>
</table>
<h4 id="可靠消息传送"><a href="#可靠消息传送" class="headerlink" title="可靠消息传送"></a>可靠消息传送</h4><p>JMS 定义了两种传送模式：持久性消息和非持久性消息。</p>
<ul>
<li>持久性消息：保证这些消息只被传送一次和成功接收一次。对于这些消息，可靠性是优先考虑的因素。</li>
<li>非持久性消息：保证这些消息最多被传送一次。对于这些消息，可靠性并非主要的考虑因素。</li>
</ul>
<blockquote>
<p>对于持久性消息，确保可靠性有两个方面：一个是确保至目标和出自目标的持久性消息传送成功；另一个就是确保在将持久性消息传送至使用方前，消息服务没有丢失持久性消息。</p>
</blockquote>
<p>可靠的消息传送的关键在于确保至目标和出自目标的持久性消息传送成功。可通过 MQ 会话支持的两个通用机制：确认或事务（可以是本地事务或分布式事务）来实现此目的。</p>
<ul>
<li><p><strong>确认</strong>：可以将会话配置为使用确认来确保可靠传送。对于生成方，这意味着在生成方的 send() 方法返回前，消息服务确认已向其目标发送持久性消息。对于使用方，这意味着在消息服务从该目标删除持久性消息前，客户机确认从此目标发出的持久性消息已传送并已接收。</p>
</li>
<li><p><strong>本地事务</strong>：也可以将会话配置为<em>事务</em>，这样，可以将一个或多个消息的生成和/或接收组成原子单元，也就是<em>事务</em>。JMS API 提供了启动、提交或回滚事务的方法。</p>
</li>
<li><p><strong>分布式事务</strong>：支持分布式事务是指消息传送客户机可通过 JTA 定义的 XAResource 接口参与分布式事务。此接口定义了实现两阶段提交的许多方法。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>architect</category>
      </categories>
      <tags>
        <tag>distributed</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式存储 - MongoDB</title>
    <url>/2018/11/30/architect/distributed/mongodb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><em>MongoDB是基于文档存储的，文档存储一般用类似 json 的格式存储，存储的内容是文档型的，这样也就有机会对某些字段建立索引，实现关系数据库的某些功能。</em></p>
<h2 id="MongoDB-安装"><a href="#MongoDB-安装" class="headerlink" title="MongoDB 安装"></a>MongoDB 安装</h2><h3 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.11.tgz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf mongodb-linux-x86_64-4.0.11.tgz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mv mongodb-linux-x86_64-4.0.11 /usr/<span class="built_in">local</span>/mongodb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mongodb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir conf data logs</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi conf/mongod.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://docs.mongodb.com/manual/reference/configuration-options/</span></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /usr/local/mongodb/data</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  path: /usr/local/mongodb/logs/mongod.log</span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 允许远程访问(默认值为localhost即只能本地访问)</span></span><br><span class="line">  bindIp: 0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 启动服务</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/mongod --config conf/mongod.yaml</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 测试</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/mongo --host 192.168.8.128 --port 27017</span></span><br></pre></td></tr></table></figure>
<h3 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># MongoDB replica-set cluster</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 在集群的服务器上分别启动服务</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/mongod --config /usr/<span class="built_in">local</span>/mongodb/conf/mongod.yaml --replSet rs0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 连接到其中一台服务器上创建replica-set集群</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/mongo --host 192.168.8.128 --port 27017</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> rs.initiate(&#123;_id: <span class="string">'rs0'</span>, members: [</span></span><br><span class="line">      &#123;_id: 0, host: '192.168.8.128:27017'&#125;, </span><br><span class="line">      &#123;_id: 1, host: '192.168.8.129:27017'&#125;, </span><br><span class="line">      &#123;_id: 2, host: '192.168.8.130:27017'&#125;</span><br><span class="line">  ]&#125;)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> rs.status()</span></span><br></pre></td></tr></table></figure>
<h2 id="MongoDB-相关概念"><a href="#MongoDB-相关概念" class="headerlink" title="MongoDB 相关概念"></a>MongoDB 相关概念</h2><table>
<thead>
<tr>
<th>SQL术语/概念</th>
<th>MongoDB术语/概念</th>
<th>解释/说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>database</td>
<td>database</td>
<td>数据库</td>
</tr>
<tr>
<td>table</td>
<td>collection</td>
<td>数据库表 / 集合</td>
</tr>
<tr>
<td>row</td>
<td>document</td>
<td>数据记录行 / 文档</td>
</tr>
<tr>
<td>column</td>
<td>field</td>
<td>数据字段 / 域</td>
</tr>
<tr>
<td>index</td>
<td>index</td>
<td>索引</td>
</tr>
<tr>
<td>table joins</td>
<td></td>
<td>表连接 / MongoDB不支持</td>
</tr>
<tr>
<td>primary key</td>
<td>primary key</td>
<td>主键 / MongoDB自动将_id字段设置为主键</td>
</tr>
</tbody>
</table>
<blockquote>
<p>MongoDB集默认会创建admin、local、config数据库：admin数据库则主要存储MongoDB的用户、角色等信息；local数据库主要存储副本集的元数据；config 数据库在内部使用，当使用分片模式时，用于保存分片的信息。</p>
</blockquote>
<h2 id="MongoDB-事务支持"><a href="#MongoDB-事务支持" class="headerlink" title="MongoDB 事务支持"></a>MongoDB 事务支持</h2><p>在 MongoDB 4.0 之前的版本中，操作单个文档是原子性的，但操作多文档是非原子性的；从 MongoDB 4.0 版本开始支持多文档 ACID 事务，但多文档事务仅适用于副本集。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="comment"># Mongo supports transaction feature for a replica set</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">mongodb://192.168.8.128:27017,192.168.8.129:27017,192.168.8.130:27017/test?replicaSet=rs0</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Remove &#123;<span class="doctag">@link</span> DefaultMongoTypeMapper#DEFAULT_TYPE_KEY&#125; Field</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MongoConfig</span><span class="params">(MappingMongoConverter mappingMongoConverter)</span> </span>&#123;</span><br><span class="line">        mappingMongoConverter.setTypeMapper(<span class="keyword">new</span> DefaultMongoTypeMapper(<span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MongoTransactionManager <span class="title">transactionManager</span><span class="params">(MongoDbFactory dbFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MongoTransactionManager(dbFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="MongoDB-常用命令"><a href="#MongoDB-常用命令" class="headerlink" title="MongoDB 常用命令"></a>MongoDB 常用命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>show dbs</td>
<td>显示所有数据库</td>
</tr>
<tr>
<td>use [database_name]</td>
<td>如果数据库不存在则创建，否则切换到指定数据库</td>
</tr>
<tr>
<td>db.dropDatabase()</td>
<td>删除当前使用的数据库（db代表当前使用的数据库）</td>
</tr>
<tr>
<td>db</td>
<td>查看当前使用的数据库</td>
</tr>
<tr>
<td>show collections</td>
<td>查看当前数据库中的所有集合</td>
</tr>
<tr>
<td>db.createCollection(name)</td>
<td>在当前数据库中创建集合</td>
</tr>
<tr>
<td>db.getCollection(name).drop()</td>
<td>在当前数据库中删除集合</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.createCollection("distlock");</span><br><span class="line">db.getCollection("distlock").insert(&#123;</span><br><span class="line">    _id: NumberLong(<span class="string">"604797950328573952"</span>),</span><br><span class="line">    methodName: <span class="string">"createOrder"</span>,</span><br><span class="line">    updatedAt: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;);</span><br><span class="line">db.getCollection("distlock").update(&#123;</span><br><span class="line">    _id: NumberLong(<span class="string">"604797950328573952"</span>)</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    methodName: <span class="string">"createPayOrder"</span>,</span><br><span class="line">    updatedAt: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;);</span><br><span class="line">db.getCollection("distlock").find(&#123;</span><br><span class="line">    methodName: "createPayOrder"</span><br><span class="line">&#125;);</span><br><span class="line">db.getCollection("distlock").drop();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意： 在 MongoDB 中，集合只有在内容插入后才会创建，即创建集合（数据表）后要再插入一个文档（记录），集合才会真正创建；但 <em>spring-data-mongodb</em> 不支持自动创建Collection集合，故需要手动先创建Collection集合，否则会抛出 <em>Cannot create namespace xxx.xxx in multi-document transaction</em> 错误。</p>
</blockquote>
<h2 id="MongoDB-适用场景"><a href="#MongoDB-适用场景" class="headerlink" title="MongoDB 适用场景"></a>MongoDB 适用场景</h2><ul>
<li>应用不需要事务及复杂join支持</li>
<li>新应用，需求会变，数据模型无法确定，想快速迭代开发</li>
<li>应用需要2000~3000以上的读写QPS</li>
<li>应用需要TB甚至PB级别数据存储    </li>
<li>应用发展迅速，需要能快速水平扩展</li>
<li>应用要求存储的数据不丢失</li>
<li>应用需要99.999%高可用    </li>
<li>应用需要大量的地理位置查询、文本查询</li>
</ul>
]]></content>
      <categories>
        <category>architect</category>
      </categories>
      <tags>
        <tag>architect</tag>
      </tags>
  </entry>
  <entry>
    <title>反向代理 - Nginx</title>
    <url>/2018/11/28/architect/distributed/nginx/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#server_name" target="_blank" rel="noopener">虚拟主机</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  lugavin.io www.lugavin.io;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root        html;</span><br><span class="line">        index       index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="location"><a href="#location" class="headerlink" title="location"></a><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#location" target="_blank" rel="noopener">location</a></h2><p>语法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location [=|^~|~|~*] uri &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>location = /uri</td>
<td>= 表示精确匹配(只有完全匹配上才能生效)</td>
</tr>
<tr>
<td>location ^~ /uri</td>
<td>前缀匹配(在正则之前)</td>
</tr>
<tr>
<td>location ~ pattern</td>
<td>区分大小写的正则匹配</td>
</tr>
<tr>
<td>location ~* pattern</td>
<td>不区分大小写的正则匹配</td>
</tr>
<tr>
<td>location /uri</td>
<td>前缀匹配(在正则之后)</td>
</tr>
<tr>
<td>location /</td>
<td>通用匹配(相当于switch中的default)</td>
</tr>
</tbody>
</table>
<p><em>说明：使用正则定义的location在配置文件中出现的顺序很重要，因为找到第一个匹配的正则后，查找就停止了。</em></p>
<h2 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a><a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html" target="_blank" rel="noopener">rewrite</a></h2><p>语法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rewrite regex replacement [flag];</span><br></pre></td></tr></table></figure></p>
<p>flag标志位：</p>
<ul>
<li>last: 停止当前这个请求，并根据rewrite匹配的规则重新发起一个请求，新请求又从第一阶段开始执行(nginx运行分十一个执行阶段)</li>
<li>break: 相对last，break并不会重新发起一个请求，只是跳过当前的rewrite阶段，并执行本请求后续的执行阶段</li>
<li>redirect: 返回302临时重定向(地址栏会显示跳转后的地址)</li>
<li>permanent: 返回301永久重定向(地址栏会显示跳转后的地址)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen         80;</span><br><span class="line">    server_name    lugavin.io;</span><br><span class="line">    </span><br><span class="line">    rewrite ^/(.*) http://www.lugavin.io/$1 last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.lugavin.io;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root        html;</span><br><span class="line">        index       index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a><a href="http://nginx.org/en/docs/http/ngx_http_headers_module.html" target="_blank" rel="noopener">缓存</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~ \.(ico|gif|jpg|jpeg|png)$ &#123;</span><br><span class="line">    #生产环境启用缓存</span><br><span class="line">    expires     30d;</span><br><span class="line">    access_log  off; </span><br><span class="line">    #开发环境禁用缓存</span><br><span class="line">    #add_header  Cache-Control no-store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a><a href="https://nginx.org/en/docs/http/ngx_http_gzip_module.html" target="_blank" rel="noopener">压缩</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_comp_level 2;</span><br><span class="line">    gzip_types text/plain text/css text/javascript application/javascript application/xml;</span><br><span class="line">    #根据客户端的HTTP头来判断是否需要压缩(有的浏览器不支持压缩)</span><br><span class="line">    gzip_vary on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a><a href="http://nginx.org/en/docs/http/ngx_http_referer_module.html" target="_blank" rel="noopener">防盗链</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~ \.(ico|gif|jpg|jpeg|png)$ &#123;</span><br><span class="line">    #生产环境启用缓存</span><br><span class="line">    expires     30d;</span><br><span class="line">    access_log  off; </span><br><span class="line">    #开发环境禁用缓存</span><br><span class="line">    #add_header  Cache-Control no-store;</span><br><span class="line">    #防盗链</span><br><span class="line">    valid_referers none blocked lugavin.io *.lugavin.io;</span><br><span class="line">    if ($invalid_referer) &#123;</span><br><span class="line">        return 403;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a><a href="https://nginx.org/en/docs/http/ngx_http_proxy_module.html" target="_blank" rel="noopener">反向代理</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ^~ /api/ &#123;</span><br><span class="line">    proxy_pass            http://localhost:3000;</span><br><span class="line">    proxy_redirect        off;</span><br><span class="line">    proxy_set_header      Host $http_host;</span><br><span class="line">    proxy_set_header      X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a><a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html" target="_blank" rel="noopener">负载均衡</a></h2><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a><a href="http://nginx.org/en/docs/http/load_balancing.html" target="_blank" rel="noopener">负载均衡策略</a></h3><p>在nginx中默认支持三种负载均衡策略：轮询(round-robin)、最少连接数(least-connected)、IP哈希(ip-hash)。</p>
<ul>
<li>轮询(默认)：对应用服务器的请求以循环方式分发</li>
<li>最少连接数：下一个请求被分配给具有最少活动连接数的服务器</li>
<li>IP哈希：用基于客户端IP地址的哈希函数确定应为下一个请求选择哪个服务器</li>
</ul>
<h3 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    upstream express_cluster &#123;</span><br><span class="line">        #weight: 设置权重(值越大被访问到的几率越大)</span><br><span class="line">        #max_fails: 与服务器通信失败后进行几次重试(默认为1)</span><br><span class="line">        #fail_timeout: 超过失败重试次数后在多长时间内不可用(默认为10秒)</span><br><span class="line">        server localhost:3001 weight=5 max_fails=1 fail_timeout=10;  </span><br><span class="line">        server localhost:3002 weight=1 max_fails=1 fail_timeout=10;</span><br><span class="line">        #备份服务器(当所有主服务器全都不可用时才会起作用)</span><br><span class="line">        server localhost:3000 backup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  lugavin.io www.lugavin.io;</span><br><span class="line"></span><br><span class="line">        location ^~ /api/ &#123;</span><br><span class="line">            proxy_pass            http://express_cluster;</span><br><span class="line">            proxy_redirect        off;</span><br><span class="line">            proxy_set_header      Host $http_host;</span><br><span class="line">            proxy_set_header      X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            #proxy_connect_timeout: 与代理服务器建立连接的超时时间，注意，此超时通常不会超过75秒，默认为60秒</span><br><span class="line">            #proxy_send_timeout: 将请求传输到代理服务器的超时时间，是设置两个连续写操作之间的超时而不是整个请求的传输超时，默认为60秒</span><br><span class="line">            #proxy_read_timeout: 从代理服务器读取响应的超时时间，是设置两个连续读操作之间的超时而不是整个响应的传输超时，默认为60秒</span><br><span class="line">            proxy_connect_timeout 60s; </span><br><span class="line">            proxy_send_timeout    60s;</span><br><span class="line">            proxy_read_timeout    60s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a><a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html" target="_blank" rel="noopener">HTTPS</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  lugavin.io www.lugavin.io;</span><br><span class="line">    #配置http强制跳转到https</span><br><span class="line">    rewrite      ^/(.*)  https://$host/$1  last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       443;</span><br><span class="line">    server_name  lugavin.io www.lugavin.io;</span><br><span class="line"></span><br><span class="line">    ssl                  on;</span><br><span class="line">    ssl_certificate      ./conf/ca/cert.pem;</span><br><span class="line">    ssl_certificate_key  ./conf/ca/key.pem;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root        html;</span><br><span class="line">        index       index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>解决Windows下443端口被其他进程占用导致Nginx无法启动的问题</p>
</blockquote>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="comment">REM 需要以管理员身份在命令窗口下执行以下dos命令</span></span><br><span class="line"><span class="function">C:\&gt; <span class="title">netstat</span> -<span class="title">aon</span>|<span class="title">findstr</span> 443</span></span><br><span class="line"><span class="function"><span class="title">TCP</span>     0.0.0.0:443     0.0.0.0:0     <span class="title">LISTENING</span>     3092</span></span><br><span class="line"><span class="function"><span class="title">C</span>:\&gt; <span class="title">taskkill</span> /<span class="title">F</span> /<span class="title">pid</span> 3092</span></span><br></pre></td></tr></table></figure>
<!--
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"># 解决Windows下无法找到openssl.cnf文件的问题</span><br><span class="line">$ <span class="built_in">set</span> OPENSSL_CONF=$&#123;OPENSSL_HOME&#125;/ssl/openssl.cnf</span><br><span class="line"></span><br><span class="line"># 生成一个<span class="number">2048</span>位的私钥</span><br><span class="line">$ openssl genrsa -out cert.key <span class="number">2048</span></span><br><span class="line"></span><br><span class="line"># 生成CSR证书请求文件(可以拿着这个文件向CA申请数字证书)</span><br><span class="line">$ openssl req -new -key cert.key -out cert.csr</span><br><span class="line"></span><br><span class="line"># 生成自签名证书</span><br><span class="line">$ openssl x509 -req -days <span class="number">365</span> -<span class="keyword">in</span> cert.csr -signkey cert.key -out cert.pem</span><br></pre></td></tr></table></figure>
<p>–&gt;</p>
<!--
## Nginx+Keepalived实现高可用
## 日志切割
-->]]></content>
      <categories>
        <category>architect</category>
      </categories>
      <tags>
        <tag>distributed</tag>
      </tags>
  </entry>
  <entry>
    <title>NIO</title>
    <url>/2018/10/25/architect/distributed/nio/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="准备知识"><a href="#准备知识" class="headerlink" title="准备知识"></a>准备知识</h2><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><p>同步和异步其实指的是，请求发起方对消息结果的获取是主动发起的还是等被动通知的。如果是请求方主动发起的，一直在等待应答结果（同步阻塞），或者可以先去处理其他的事情，但要不断轮询查看发起的请求是否有应答结果（同步非阻塞），因为不管如何都要发起方主动获取消息结果，所以形式上还是同步操作。如果是由服务方通知的，也就是请求方发出请求后，要么在一直等待通知（异步阻塞），要么就先去干自己的事情（异步非阻塞），当请求处理完成之后，服务方会主动通知请求方，这就是异步。异步通知的方式一般是通过状态改变、消息通知或者回调函数来完成，大多数时候采用的都是回调函数。 </p>
<blockquote>
<p>同步和异步指的是对于消息结果的获取是客户端主动获取还是由服务端推送的。</p>
</blockquote>
<h3 id="阻塞和非阻塞"><a href="#阻塞和非阻塞" class="headerlink" title="阻塞和非阻塞"></a>阻塞和非阻塞</h3><p>阻塞和非阻塞通常指的是针对IO的读写操作，如网络IO和磁盘IO等。那么什么是阻塞和非阻塞呢？简单地说就是我们调用了一个函数之后，在等待这个函数返回结果之前，当前的线程是处于挂起状态还是运行状态。如果是挂起状态，就意味着当前线程什么都不能干，就等着获取结果，这就叫同步阻塞；如果是运行状态，就意味当前线程是可以的继续处理其他任务，但要时不时地去看下是否有结果了，这就是同步非阻塞。</p>
<blockquote>
<p>阻塞和非阻塞指的是客户端等待消息处理时本身的状态（是挂起的还是继续运行的）。</p>
</blockquote>
<h2 id="设计原理"><a href="#设计原理" class="headerlink" title="设计原理"></a>设计原理</h2><p><img src="/images/architect/io-model.png" alt="BIO VS NIO">  </p>
<h3 id="BIO设计原理"><a href="#BIO设计原理" class="headerlink" title="BIO设计原理"></a>BIO设计原理</h3><p>服务器通过一个Acceptor线程负责监听客户端请求和为每个客户端创建一个新的线程进行链路处理，典型的一请求一应答模式，若客户端数量增多，频繁地创建和销毁线程会给服务器带来很大的压力，后改良为采用线程池的方式来减少线程创建和回收的成本，被称为伪异步IO。</p>
<blockquote>
<p>BIO模型之所以需要多线程，主要原因在于socket.accept()、socket.read()、socket.write()三个主要函数都是同步阻塞的，当一个连接在处理IO的时候，系统是阻塞的，如果是单线程的话必然就挂死在那里，但CPU是被释放出来的，开启多线程，就可以让CPU去处理更多的事情。其实这也是所有使用多线程的本质：（1）利用多核；（2）当IO阻塞系统，但CPU空闲的时候，可以利用多线程使用CPU资源。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerSocket serverSocket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TCPServer</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">        <span class="keyword">this</span>.serverSocket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        log.debug(<span class="string">"Server started listening on port &#123;&#125;"</span>, port);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Socket socket = serverSocket.accept(); <span class="comment">// 阻塞</span></span><br><span class="line">            <span class="comment">// new WorkerThread(socket).start();</span></span><br><span class="line">            threadPool.execute(<span class="keyword">new</span> WorkerThread(socket));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Socket socket;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WorkerThread</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.socket = socket;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 读取客户端数据</span></span><br><span class="line">                DataInputStream in = <span class="keyword">new</span> DataInputStream(socket.getInputStream());</span><br><span class="line">                <span class="comment">// 向客户端发送数据</span></span><br><span class="line">                DataOutputStream out = <span class="keyword">new</span> DataOutputStream(socket.getOutputStream());</span><br><span class="line">                <span class="keyword">while</span> (!socket.isClosed()) &#123;</span><br><span class="line">                    String line = in.readUTF(); <span class="comment">// 阻塞</span></span><br><span class="line">                    out.writeUTF(line);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                closeQuietly(socket);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeQuietly</span><span class="params">(<span class="keyword">final</span> Socket sock)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (sock != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sock.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// ignored</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> TCPServer(<span class="number">8888</span>).listen();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOST = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Socket socket = <span class="keyword">new</span> Socket(HOST, PORT)) &#123;</span><br><span class="line">            <span class="comment">// 读取服务端数据</span></span><br><span class="line">            DataInputStream in = <span class="keyword">new</span> DataInputStream(socket.getInputStream());</span><br><span class="line">            <span class="comment">// 向服务端发送数据</span></span><br><span class="line">            DataOutputStream out = <span class="keyword">new</span> DataOutputStream(socket.getOutputStream());</span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            log.info(<span class="string">"Type your message here to send..."</span>);</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                out.writeUTF(line);</span><br><span class="line">                String ret = in.readUTF();</span><br><span class="line">                log.debug(<span class="string">"Receive messages from the server: &#123;&#125;"</span>, ret);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="NIO设计原理"><a href="#NIO设计原理" class="headerlink" title="NIO设计原理"></a>NIO设计原理</h3><p>NIO的读写函数可以立刻返回，这就给了我们不开线程利用CPU的最好机会：如果一个连接不能读写（socket.read()返回0或者socket.write()返回0），我们可以把它记下来，记录的方式通常是在Selector上注册标记位，然后切换到其它就绪的连接（Channel）继续进行读写。</p>
<p>NIO由原来的阻塞读写（占用线程）变成了单线程轮询事件，找到可以进行读写的网络描述符进行读写。除了事件的轮询（selector.select()）是阻塞的（没有可干的事情必须要阻塞），剩余的IO操作都是纯CPU操作，没有必要开启多线程。</p>
<blockquote>
<p>客户端和服务器之间通过Channel通信，NIO可以在Channel进行读写操作，这些Channel都会被注册在Selector多路复用器上，Selector通过一个线程不停地轮询这些Channel，找出已经准备就绪的Channel执行IO操作。NIO的主要事件有几个：读就绪、写就绪、有新连接到来。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Selector selector;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NIOServer</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">        <span class="keyword">this</span>.selector = Selector.open();</span><br><span class="line">        ServerSocketChannel ssc = ServerSocketChannel.open();</span><br><span class="line">        ssc.configureBlocking(<span class="keyword">false</span>); <span class="comment">// 设置通道为非阻塞</span></span><br><span class="line">        ssc.socket().bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line">        ssc.register(selector, SelectionKey.OP_ACCEPT); <span class="comment">// 注册监听的事件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"Server started listening on port &#123;&#125;"</span>, port);</span><br><span class="line">        <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">            <span class="keyword">int</span> readyChannels = selector.select(); <span class="comment">// 阻塞直到至少有一个事件发生</span></span><br><span class="line">            <span class="keyword">if</span> (readyChannels == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys(); <span class="comment">// 取得所有key集合</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                SelectionKey key = iterator.next();</span><br><span class="line">                iterator.remove(); <span class="comment">// 该事件已经处理可以丢弃</span></span><br><span class="line">                handleAccept(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleAccept</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">            ServerSocketChannel ssc = (ServerSocketChannel) key.channel();</span><br><span class="line">            SocketChannel sc = ssc.accept(); <span class="comment">// 接受到客户端的请求</span></span><br><span class="line">            sc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            sc.register(selector, SelectionKey.OP_READ); <span class="comment">// 注册下次轮询执行的事件</span></span><br><span class="line">            log.debug(<span class="string">"A connection was accepted: &#123;&#125;"</span>, sc.getRemoteAddress());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">            SocketChannel sc = (SocketChannel) key.channel();</span><br><span class="line">            ByteBuffer readBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (sc.read(readBuffer) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    readBuffer.flip();</span><br><span class="line">                    sc.write(readBuffer);</span><br><span class="line">                    readBuffer.compact(); <span class="comment">// 以防写入不完整</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (key.channel() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    key.channel().close();</span><br><span class="line">                &#125;</span><br><span class="line">                key.cancel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> NIOServer(<span class="number">8888</span>).listen();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOST = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line">        SocketChannel channel = SocketChannel.open();</span><br><span class="line">        channel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        channel.connect(<span class="keyword">new</span> InetSocketAddress(HOST, PORT));</span><br><span class="line">        channel.register(selector, SelectionKey.OP_CONNECT);</span><br><span class="line"></span><br><span class="line">        ByteBuffer readBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> readyChannels = selector.select(); <span class="comment">// 阻塞直到至少有一个事件发生</span></span><br><span class="line">            <span class="keyword">if</span> (readyChannels == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                SelectionKey key = iterator.next();</span><br><span class="line">                iterator.remove();  <span class="comment">// 该事件已经处理可以丢弃</span></span><br><span class="line">                <span class="keyword">if</span> (key.isConnectable()) &#123;</span><br><span class="line">                    SocketChannel sc = (SocketChannel) key.channel();</span><br><span class="line">                    <span class="keyword">if</span> (sc.isConnectionPending()) &#123;</span><br><span class="line">                        sc.finishConnect();</span><br><span class="line">                    &#125;</span><br><span class="line">                    sc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                    sc.register(selector, SelectionKey.OP_WRITE);</span><br><span class="line">                    log.debug(<span class="string">"A connection was established with remote server"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;  <span class="comment">// a channel is ready for reading</span></span><br><span class="line">                    SocketChannel sc = (SocketChannel) key.channel();</span><br><span class="line">                    sc.register(selector, SelectionKey.OP_WRITE);</span><br><span class="line">                    readBuffer.clear();</span><br><span class="line">                    StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    <span class="keyword">while</span> (sc.read(readBuffer) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        readBuffer.flip();</span><br><span class="line">                        builder.append(<span class="keyword">new</span> String(readBuffer.array(), <span class="number">0</span>, readBuffer.limit()));</span><br><span class="line">                    &#125;</span><br><span class="line">                    log.debug(<span class="string">"Receive messages from the server: &#123;&#125;"</span>, builder.toString());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;  <span class="comment">// a channel is ready for writing</span></span><br><span class="line">                    SocketChannel sc = (SocketChannel) key.channel();</span><br><span class="line">                    sc.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                    log.info(<span class="string">"Type your message here to send..."</span>);</span><br><span class="line">                    sc.write(ByteBuffer.wrap(in.readLine().getBytes()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="NIO和BIO的区别"><a href="#NIO和BIO的区别" class="headerlink" title="NIO和BIO的区别"></a>NIO和BIO的区别</h2><ol>
<li>面向流和面向缓冲区<ul>
<li>BIO是面向流的，面向流意味着每次从流中读一个或多个字节直至读取所有字节，它们没有被缓存在任何地方。此外，它不能前后移动流中的数据。如果需要前后移动从流中读取的数据，需要先将它缓存到一个缓冲区。</li>
<li>NIO是面向缓冲区的，这有些细微差异。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。这就增加了处理过程中的灵活性。当然，在使用数据前，我们仍然需要检查该缓冲区中是否包含我们需要处理的所有数据。另外，需要确保当更多的数据读入缓冲区时，不要覆盖缓冲区里尚未处理的数据。</li>
</ul>
</li>
<li>阻塞和非阻塞IO<ul>
<li>BIO的各种流是阻塞的，这意味着，当一个线程调用 read() 或 write() 方法时，该线程被阻塞，直到读取到数据或者数据完全写入，在此期间，该线程不能做其他任何事情。</li>
<li>NIO的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取，而不是保持线程阻塞，所以直至数据变得可以读取之前，该线程可以继续做其他的事情。非阻塞写也是如此，一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。在非阻塞模式下，线程通常将在IO调用中未被阻塞的空闲时间用于在其它通道上执行IO操作，也就是说，一个线程现在可以管理多个输入和输出通道。</li>
</ul>
</li>
</ol>
<h2 id="NIO核心组件"><a href="#NIO核心组件" class="headerlink" title="NIO核心组件"></a>NIO核心组件</h2><p><img src="/images/architect/nio-class-diagram.jpg" alt="NIO相关类图"></p>
<h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><p>在NIO中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的；在写入数据时，它也是写入到缓冲区中的。任何时候访问NIO中的数据，都是将它放到缓冲区中。而在面向流IO系统中，所有数据都是直接写入或者直接将数据读取到Stream对象中。</p>
<p>Buffer缓冲区对象本质上是一个数组，但它其实是一个特殊的数组，缓冲区对象内置了一些机制，能够跟踪和记录缓冲区的状态变化情况，当我们使用 get() 方法从缓冲区获取数据<br>或者使用 put() 方法把数据写入缓冲区时，都会引起缓冲区状态的变化。</p>
<h4 id="Buffer的几个重要属性"><a href="#Buffer的几个重要属性" class="headerlink" title="Buffer的几个重要属性"></a>Buffer的几个重要属性</h4><ul>
<li>position：指定了下一个将要被写入或者读取的元素索引，它的值由 get()/put() 方法自动更新，在新创建一个 Buffer 对象时，position 被初始化为0。</li>
<li>limit：缓冲区数组中不可操作的下一个元素的位置</li>
<li>capacity：缓冲区数组的总长度</li>
<li>mark：用于记录当前 position 的前一个位置</li>
</ul>
<blockquote>
<p>属性值之间的关系：mark &lt;= position &lt;= limit &lt;= capacity</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    limit = capacity;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">flip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    limit = position;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">rewind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasRemaining</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> position &lt; limit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">remaining</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> limit - position;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Buffer的基本用法"><a href="#Buffer的基本用法" class="headerlink" title="Buffer的基本用法"></a>Buffer的基本用法</h4><p>利用Buffer读写数据，通常遵循四个步骤：</p>
<ol>
<li>把数据写入buffer</li>
<li>调用buffer.flip()</li>
<li>从buffer中读取数据</li>
<li>调用buffer.clear()或者buffer.compact()</li>
</ol>
<p>当写入数据到buffer中时，buffer会记录已经写入的数据大小。当需要读数据时，通过flip()方法把buffer从写模式调整为读模式；在读模式下，可以读取所有已经写入的数据。当读取完数据后，需要清空buffer，以满足后续写入操作。清空buffer有两种方式：调用clear()或compact()方法。clear会清空整个buffer，compact则只清空已读取的数据，未被读取的数据会被移动到buffer的开始位置，写入位置则近跟着未读数据之后。</p>
<h4 id="缓冲区的分配"><a href="#缓冲区的分配" class="headerlink" title="缓冲区的分配"></a>缓冲区的分配</h4><p>在创建一个缓冲区对象时，会调用静态方法 allocate() 来指定缓冲区的容量，其实调用 allocate() 相当于创建了一个指定大小的数组，并把它包装为缓冲区对象，我们也可以直接将一个现有的数组包装为缓冲区对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">byte</span>[] array = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">ByteBuffer wrap = ByteBuffer.wrap(array);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在HTTP协议中，通过请求头 <code>Content-Length</code> 规定了发送给接收方的消息主体的大小，服务端可通过该值来进行缓冲区大小的分配，以防止缓冲区分配过大而浪费或分配过小而导致消息内容丢失。</p>
</blockquote>
<ol>
<li>缓冲区分片</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferSlice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = buffer.capacity(); i &lt; j; i++) &#123;</span><br><span class="line">            buffer.put((<span class="keyword">byte</span>) i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建子缓冲区</span></span><br><span class="line">        buffer.position(<span class="number">3</span>);</span><br><span class="line">        buffer.limit(<span class="number">7</span>);</span><br><span class="line">        ByteBuffer slice = buffer.slice();</span><br><span class="line">        <span class="comment">// 改变子缓冲区的内容(两个缓冲区的位置、界限和标记值是相互独立的)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = slice.capacity(); i &lt; j; i++) &#123;</span><br><span class="line">            <span class="keyword">byte</span> b = slice.get(i);</span><br><span class="line">            b *= <span class="number">10</span>;</span><br><span class="line">            slice.put(i, b);</span><br><span class="line">        &#125;</span><br><span class="line">        buffer.position(<span class="number">0</span>);</span><br><span class="line">        buffer.limit(buffer.capacity());</span><br><span class="line">        <span class="comment">// 原缓冲区和子缓冲区内容的更改都是彼此可见的</span></span><br><span class="line">        <span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">            System.out.println(buffer.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>只读缓冲区</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadOnlyBuffer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = buffer.capacity(); i &lt; j; i++) &#123;</span><br><span class="line">            buffer.put((<span class="keyword">byte</span>) i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建只读缓冲区</span></span><br><span class="line">        ByteBuffer readonly = buffer.asReadOnlyBuffer();</span><br><span class="line">        <span class="comment">// 改变原缓冲区的内容</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = buffer.capacity(); i &lt; j; i++) &#123;</span><br><span class="line">            <span class="keyword">byte</span> b = buffer.get(i);</span><br><span class="line">            b *= <span class="number">10</span>;</span><br><span class="line">            buffer.put(i, b);</span><br><span class="line">        &#125;</span><br><span class="line">        readonly.position(<span class="number">0</span>);</span><br><span class="line">        readonly.limit(buffer.capacity());</span><br><span class="line">        <span class="comment">// 原缓冲区内容的更改在只读缓冲区中是可见的</span></span><br><span class="line">        <span class="keyword">while</span> (readonly.hasRemaining()) &#123;</span><br><span class="line">            System.out.println(readonly.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>直接缓冲区</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectBuffer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String source = <span class="string">"D:\\Test.txt"</span>;</span><br><span class="line">        String destination = <span class="string">"D:\\TestCopy.txt"</span>;</span><br><span class="line">        <span class="comment">// Files.copy(Paths.get(source), Paths.get(destination));</span></span><br><span class="line"></span><br><span class="line">        FileChannel fromChannel = <span class="keyword">new</span> RandomAccessFile(source, <span class="string">"rw"</span>).getChannel();</span><br><span class="line">        FileChannel toChannel = <span class="keyword">new</span> RandomAccessFile(destination, <span class="string">"rw"</span>).getChannel();</span><br><span class="line">        <span class="comment">// fromChannel.transferTo(0, fromChannel.size(), toChannel);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 分配直接缓冲区需要调用 allocateDirect() 而不是 allocate()</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocateDirect(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">while</span> (fromChannel.read(buffer) != -<span class="number">1</span>) &#123;</span><br><span class="line">            buffer.flip();</span><br><span class="line">            toChannel.write(buffer);</span><br><span class="line">            buffer.compact();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>内存映射文件</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MappedBuffer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(<span class="string">"D:\\Test.txt"</span>, <span class="string">"rw"</span>)) &#123;</span><br><span class="line">            FileChannel fileChannel = raf.getChannel();</span><br><span class="line">            MappedByteBuffer mbb = fileChannel.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line">            mbb.put(<span class="number">0</span>, (<span class="keyword">byte</span>) <span class="number">97</span>);</span><br><span class="line">            mbb.put(<span class="number">1023</span>, (<span class="keyword">byte</span>) <span class="number">122</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>NIO采用内存映射文件的方式来处理输入输出，NIO将文件或文件的一段区域映射到内存中，这样就可以像访问内存一样访问文件了。</p>
</blockquote>
<h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><p>标准的IO编程接口是面向字节流和字符流的，而NIO是面向通道和缓冲区的。通常来说NIO中的所有IO都是从Channel开始的，数据总是从Channel读到Buffer中或者从Buffer写到Channel。</p>
<p>Channel和传统IO中的Stream非常相似，虽然很相似，但是有很大的区别：</p>
<ul>
<li>Channel是双向的（通道可以读也可以写），而Stream只能进行单向操作（只能读或者写），比如InputStream只能进行读取操作，OutputStream只能进行写操作</li>
<li>通道总是基于缓冲区Buffer来读写</li>
<li>通道可以异步读写</li>
</ul>
<p>NIO中几个常用的Channel实现类：</p>
<ul>
<li>基于网络操作：ServerSocketChannel、SocketChannel、DatagramChannel</li>
<li>基于磁盘操作：FileChannel</li>
</ul>
<blockquote>
<p>FileChannel用于文件的数据读写，它只能在阻塞模式下运行，不可以设置为非阻塞模式。<br>ServerSocketChannel允许我们监听TCP连接请求，每个请求会创建会一个SocketChannel，SocketChannel用于TCP的数据读写，DatagramChannel用于UDP的数据读写。</p>
</blockquote>
<h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><p><img src="/images/architect/nio-socket.png" alt="基于NIO的Socket请求的处理过程"></p>
<p>Selector能够检测多个注册的通道上是否有事件发生，如果有事件发生，便获取事件然后针对每个事件进行相应的响应处理。这样一来，只是用一个单线程就可以管理多个通道，也就是管理多个连接。这样使得只有在连接真正有读写事件发生时，才会调用函数来进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程，还避免了多线程之间的上下文切换导致的开销。</p>
<p>与Selector有关的一个关键类是SelectionKey，一个SelectionKey表示一个到达的事件，这两个类构成了服务端处理业务的关键逻辑。</p>
<!-- 
Selector 可以同时监听一组通信信道（Channel）上的IO状态，前提是这个 Selector 要已经注册到这些通信信道中。选择器 Selector 可以调用 select() 方法检查已经注册的通信信道上的是否有IO已经准备好，如果没有至少一个信道IO状态有变化，那么 select() 方法会阻塞等待或在超时时间后会返回 0。如果有多个信道有数据，那么将会将这些数据分配到对应的数据 Buffer 中。所以关键的地方是有一个线程来处理所有连接的数据交互，每个连接的数据交互都不是阻塞方式，所以可以同时处理大量的连接请求。

用单线程处理多个channels的好处是您需要更少的线程来处理channel。实际上，你甚至可以用一个线程来处理所有的channels。从操作系统的角度来看，在线程之间切换开销是比较昂贵的，并且每个线程都需要占用操作系统的一些资源（存储器），因此您使用的线程越少越好。当然，现代操作系统和CPU在多任务处理上已经越来越好，所以多线程带来的影响也越来越小。如果一个CPU是多核的，如果不执行多任务反而是浪费了机器的性能。不过这些设计讨论是另外的话题了。简而言之，通过Selector我们可以实现单线程管理多个channels，也就是可以管理多个网络连接。
-->
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>BIO<br>一个客户端的连接意味着需要服务器启动一个线程来读取客户端请求中携带的IO操作，由于线程是JVM非常宝贵的系统资源，当线程膨胀后，系统的性能急剧下降，随着并发访问量的继续增大，系统会发生线程堆栈溢出，创建新线程失败等问题，并导致进程宕机或者僵死，最终导致不能对外服务。后改良为用线程池的方式代替新增线程，被称为伪异步IO。服务器端使用线程池来处理客户端发起的IO请求，虽然，可以避免产生大量的线程导致JVM内存溢出，但是，当一个线程调用 read() 或 write() 方法时会发生阻塞，这样，当新的连接请求过来时，会导致线程池中的阻塞队列满，客户端也会出现连接超时现象。</p>
</li>
<li><p>NIO<br>NIO相比于BIO的优点在于，采用一种基于通道和缓存区的IO方式，它可以使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆的 DirectByteBuffer 对象作为这块内存的引用进行操作，避免了在 Java 堆和 Native 堆中来回复制数据，是一种同步非阻塞的IO模型。</p>
</li>
<li><p>AIO<br>一种完全异步非阻塞的IO模型，JDK1.7版本推出的，是最理想最快速的IO解决方案。</p>
</li>
</ol>
<blockquote>
<p>如果你需要同时管理成千上万的连接，这些连接只发送少量数据，例如聊天服务器，用NIO来实现这个服务器是有优势的。类似的，如果你需要维持大量的连接，例如P2P网络，用单线程来管理这些连接也是有优势的。如果连接数不是很多，但是每个连接的占用较大带宽，每次都要发送大量数据，那么使用传统的IO设计服务器可能是最好的选择。</p>
</blockquote>
]]></content>
      <categories>
        <category>architect</category>
      </categories>
      <tags>
        <tag>distributed</tag>
      </tags>
  </entry>
  <entry>
    <title>通信协议</title>
    <url>/2018/10/12/architect/distributed/protocol/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="TCP-IP简介"><a href="#TCP-IP简介" class="headerlink" title="TCP/IP简介"></a>TCP/IP简介</h2><p>TCP/IP(Transmission Control Protocol/Internet Protocol)协议由网络层的IP协议和传输层的TCP协议组成。<br>TCP/IP提供点对点的链接机制，将数据应该如何封装、定址、传输、路由以及在目的地如何接收，都加以标准化。它将软件通信过程抽象化为四个抽象层，采取协议堆栈的方式，分别实现出不同通信协议。协议族下的各种协议，依其功能不同，被分别归属到这四个层次结构之中，常被视为是简化的七层OSI模型。<br>通俗而言：TCP负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地，而IP是给因特网的每一台联网设备规定一个地址。    </p>
<p><img src="/images/architect/protocol-tcp-ip-model.png" alt="TCP/IP参考模型"> </p>
<h2 id="TCP建立连接为什么是三次握手？"><a href="#TCP建立连接为什么是三次握手？" class="headerlink" title="TCP建立连接为什么是三次握手？"></a>TCP建立连接为什么是三次握手？</h2><p>在谢希仁著《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”。书的例子是这样的：<br>“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络节点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段，但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”  </p>
<p><img src="/images/architect/protocol-tcp-three-way-handshake.png" alt="TCP three-way handshake">  </p>
<p>在Google Groups的TopLanguage中看到一帖讨论TCP“三次握手”觉得很有意思。贴主提出“TCP建立连接为什么是三次握手？”的问题，在众多回复中，有一条回复写道：“这个问题的本质是，信道不可靠，但是通信双方需要就某个问题达成一致。而要解决这个问题，无论你在消息中包含什么信息，三次通信是理论上的最小值。所以三次握手不是TCP本身的要求，而是为了满足“在不可靠信道上可靠地传输信息”这一需求所导致的。请注意这里的本质需求：信道不可靠，数据传输要可靠。三次达到了，那后面你想接着握手也好，发数据也好，跟进行可靠信息传输的需求就没关系了。因此，如果信道是可靠的，即无论什么时候发出消息，对方一定能收到，或者你不关心是否要保证对方收到你的消息，那就能像UDP那样直接发送消息就可以了”。这可视为对“三次握手”目的的另一种解答思路。</p>
<p><img src="/images/architect/protocol-tcp-three-way-handshake.jpg" alt="TCP three-way handshake">  </p>
<p>下面我们通过 Wireshark 工具分析三次握手过程：<br>打开 Wireshark 软件，在浏览器中访问 <a href="http://www.12306.cn/mormhweb/" target="_blank" rel="noopener">http://www.12306.cn/mormhweb/</a> 网站，在 Wireshark 中输入http过滤，然后选中 <em>GET /mormhweb/ HTTP/1.1</em> 那条记录，右键选择 Follow-&gt;TCP Stream 就能看到浏览器打开网站相关的数据包了，如下图所示：  </p>
<p><img src="/images/architect/protocol-tcp-three-way-handshake-analysis.png" alt="TCP three-way handshake analysis">  </p>
<p>第一次握手：客户端发送连接请求报文段，标志位为SYN(Synchronize Sequence Numbers是建立连接时使用的握手信号)，序列号Seq为0，然后，客户端进入SYN_SEND状态，等待服务器的确认；  </p>
<p>第二次握手：服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，将确认序号ACK(Acknowledgement Number)设置为Seq+1，同时自己也发送一个SYN包，即SYN+ACK包，此时服务器进入SYN_RECV状态；  </p>
<p>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK，此包发送完毕，客户端和服务器进入ESTABLISHED(TCP连接成功)状态，完成三次握手。    </p>
<h2 id="TCP释放连接为什么是四次挥手？"><a href="#TCP释放连接为什么是四次挥手？" class="headerlink" title="TCP释放连接为什么是四次挥手？"></a>TCP释放连接为什么是四次挥手？</h2><p>由于TCP连接是全双工的，因此每个方向都必须单独进行关闭：  </p>
<ol>
<li><p>第一次挥手：当客户端发送断开连接的请求(即FIN报文)给服务端时，仅仅代表客户端不会再发送数据报文了，但仍可以接收数据报文，此时客户端处于FIN_WAIT_1状态。</p>
</li>
<li><p>第二次挥手：服务端收到了客户端的FIN报文，然后发送一个ACK确认(这样客户端便不会因为没有收到应答而继续发送断开连接的请求)，表明自己接收到了客户端关闭连接的请求，但是还没准备好关闭(可能还有相应的数据报文需要发送)。服务端发送完毕之后，进入CLOSE_WAIT状态，客户端收到这个包的时候进入FIN_WAIT_2状态。</p>
</li>
<li><p>第三次挥手：当服务端处理完数据报文准备好关闭连接的时候，向客户端发送FIN报文，表明自己准备好关闭连接了，这样可以保证数据通信正常可靠地完成。发送完毕之后服务端进入LASK_ACK状态，等待客户端的最后一个ACK确认。</p>
</li>
<li><p>第四次挥手：客户端接收到了服务端的的关闭请求之后，发送最后一个ACK确认包，然后进入到TIME_WAIT状态，等待可能出现的ACK包。服务器收到最后一个ACK之后，确认关闭连接，进入CLOSE状态。客户端在等待了某个固定时间之后，没有收到服务端的ACK，就认为服务端已经正常关闭连接了，于是也将自己的连接关闭了，进入CLOSE状态。</p>
</li>
</ol>
<h2 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h2><p>单工通信：消息只能单方向传输的工作方式(如遥控、广播)。<br>半双工通信：可以实现双向的通信，但不能在两个方向上同时进行，必须轮流交替地进行(如对讲机)。<br>全双工通信：通信的双方可以同时发送和接收信息的信息交互方式(如电话通信)。  </p>
<h2 id="通讯模式"><a href="#通讯模式" class="headerlink" title="通讯模式"></a>通讯模式</h2><p>单播(Unicast)：指数据包在计算器网络的传输中，目的地址为单一目标的一种传输方式。它是现今网络应用最为广泛，通常所使用的网络协议或服务大多采用单播传输，例如基于TCP的协议。<br>组播(Multicast)：指把信息同时传递给一组目的地址。组播的应用主要在于实时流量，如在线视频、炒股等，对时间敏感要求强(REAL TIME)。若基于TCP，丢包会重传，若是看电影，画面会出现倒退，因为重传了，若是基于UDP，则直接跳过了。<br>广播(Broadcast)：指将信息数据包发往指定网络范围内的所有设备。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MulticastSocketServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String INET_ADDR = <span class="string">"224.0.0.3"</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> PORT = <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// Get the address that we are going to connect to.</span></span><br><span class="line">        InetAddress addr = InetAddress.getByName(INET_ADDR);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Open a new DatagramSocket, which will be used to send the data.</span></span><br><span class="line">        <span class="keyword">try</span> (DatagramSocket serverSocket = <span class="keyword">new</span> MulticastSocket()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                String msg = <span class="string">"Sent message no "</span> + i;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Create a packet that will contain the data</span></span><br><span class="line">                <span class="comment">// (in the form of bytes) and send it.</span></span><br><span class="line">                DatagramPacket msgPacket = <span class="keyword">new</span> DatagramPacket(msg.getBytes(),</span><br><span class="line">                        msg.getBytes().length, addr, PORT);</span><br><span class="line">                serverSocket.send(msgPacket);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"Server sent packet with msg: "</span> + msg);</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MulticastSocketClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String INET_ADDR = <span class="string">"224.0.0.3"</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> PORT = <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        <span class="comment">// Get the address that we are going to connect to.</span></span><br><span class="line">        InetAddress address = InetAddress.getByName(INET_ADDR);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a buffer of bytes, which will be used to store</span></span><br><span class="line">        <span class="comment">// the incoming bytes containing the information from the server.</span></span><br><span class="line">        <span class="comment">// Since the message is small here, 256 bytes should be enough.</span></span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a new Multicast socket (that will allow other sockets/programs</span></span><br><span class="line">        <span class="comment">// to join it as well.</span></span><br><span class="line">        <span class="keyword">try</span> (MulticastSocket clientSocket = <span class="keyword">new</span> MulticastSocket(PORT)) &#123;</span><br><span class="line">            <span class="comment">//Joint the Multicast group.</span></span><br><span class="line">            clientSocket.joinGroup(address);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                DatagramPacket msgPacket = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line">                clientSocket.receive(msgPacket);</span><br><span class="line"></span><br><span class="line">                String msg = <span class="keyword">new</span> String(buf, <span class="number">0</span>, buf.length);</span><br><span class="line">                System.out.println(<span class="string">"Socket 1 received msg: "</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="I-O模型"><a href="#I-O模型" class="headerlink" title="I/O模型"></a>I/O模型</h3><p>BIO(同步阻塞)：用户进程发起一个IO操作以后，必须等待IO操作真正完成后，才能继续运行。</p>
<p>NIO(同步非阻塞)：用户进程发起一个IO操作以后，可以去做其它事情，但用户进程需要经常询问IO操作是否完成，这样造成不必要的CPU资源浪费。</p>
<p>AIO(异步非阻塞)：用户进程发起一个IO操作然后，立即返回，等IO操作真正的完成以后，应用程序会得到IO操作完成的通知。</p>
<blockquote>
<p>同步和异步指的是对于消息结果的获取是客户端主动获取还是由服务端推送的，而阻塞和非阻塞指的是客户端等待消息处理时本身的状态（是挂起的还是继续运行的）。</p>
</blockquote>
<p><img src="/images/architect/io-model.png" alt="BIO VS NIO">  </p>
<p>BIO设计原理：服务器通过一个Acceptor线程负责监听客户端请求和为每个客户端创建一个新的线程进行链路处理，典型的一请求一应答模式，若客户端数量增多，频繁地创建和销毁线程会给服务器带来很大的压力，后改良为用线程池的方式代替新增线程，被称为伪异步IO。服务器端使用线程池来处理客户端发起的IO请求，虽然，可以避免产生大量的线程导致JVM内存溢出，但是，当一个线程调用 read() 或 write() 方法时会发生阻塞，这样，当新的连接请求过来时，会导致线程池中的阻塞队列满，客户端也会出现连接超时现象。</p>
<p>NIO设计原理：客户端和服务器之间通过Channel通信，NIO可以在Channel进行读写操作，这些Channel都会被注册在Selector多路复用器上，Selector通过一个线程不停的轮询这些Channel，找出已经准备就绪的Channel执行IO操作。  </p>
<!--
## TCP通信原理
发送/接收缓冲区、滑动窗口协议之间的关系
-->
<h2 id="Scoket网络编程"><a href="#Scoket网络编程" class="headerlink" title="Scoket网络编程"></a>Scoket网络编程</h2><ul>
<li>TCP(Transport Control Protocol)是一个可靠(可靠通信的含义是指有确认)的、面向连接的协议。    </li>
<li>UDP(User Datagram Protocol)是一个不可靠的、面向无连接的协议。  </li>
<li>面向连接的服务是按照电话系统建模的，面向无连接的服务是按照邮政系统建模的。 </li>
<li>Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口；在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。  </li>
</ul>
<p><img src="/images/architect/socket-programming.jpg" alt="Socket编程"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerSocket serverSocket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TCPServer</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">        <span class="keyword">this</span>.serverSocket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        log.debug(<span class="string">"Server started listening on port &#123;&#125;"</span>, port);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Socket socket = serverSocket.accept(); <span class="comment">// 阻塞</span></span><br><span class="line">            <span class="comment">// new WorkerThread(socket).start();</span></span><br><span class="line">            threadPool.execute(<span class="keyword">new</span> WorkerThread(socket));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Socket socket;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WorkerThread</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.socket = socket;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 读取客户端数据</span></span><br><span class="line">                DataInputStream in = <span class="keyword">new</span> DataInputStream(socket.getInputStream());</span><br><span class="line">                <span class="comment">// 向客户端发送数据</span></span><br><span class="line">                DataOutputStream out = <span class="keyword">new</span> DataOutputStream(socket.getOutputStream());</span><br><span class="line">                <span class="keyword">while</span> (!socket.isClosed()) &#123;</span><br><span class="line">                    String line = in.readUTF(); <span class="comment">// 阻塞</span></span><br><span class="line">                    out.writeUTF(line);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                closeQuietly(socket);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeQuietly</span><span class="params">(<span class="keyword">final</span> Socket sock)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (sock != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sock.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// ignored</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> TCPServer(<span class="number">8888</span>).listen();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOST = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Socket socket = <span class="keyword">new</span> Socket(HOST, PORT)) &#123;</span><br><span class="line">            <span class="comment">// 读取服务端数据</span></span><br><span class="line">            DataInputStream in = <span class="keyword">new</span> DataInputStream(socket.getInputStream());</span><br><span class="line">            <span class="comment">// 向服务端发送数据</span></span><br><span class="line">            DataOutputStream out = <span class="keyword">new</span> DataOutputStream(socket.getOutputStream());</span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            log.info(<span class="string">"Type your message here to send..."</span>);</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                out.writeUTF(line);</span><br><span class="line">                String ret = in.readUTF();</span><br><span class="line">                log.debug(<span class="string">"Receive messages from the server: &#123;&#125;"</span>, ret);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOST = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DatagramSocket socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">            InetAddress inetAddress = InetAddress.getByName(HOST);</span><br><span class="line">            BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            log.info(<span class="string">"Type your message here to send"</span>);</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = in.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] buf = line.getBytes();</span><br><span class="line">                socket.send(<span class="keyword">new</span> DatagramPacket(buf, buf.length, inetAddress, PORT));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(PORT);</span><br><span class="line">            <span class="keyword">while</span> (!socket.isClosed()) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line">                socket.receive(packet);</span><br><span class="line">                log.info(<span class="keyword">new</span> String(buf, <span class="number">0</span>, packet.getLength()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>architect</category>
      </categories>
      <tags>
        <tag>distributed</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式消息通信 - RabbitMQ</title>
    <url>/2019/03/11/architect/distributed/rabbitmq/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a><a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">RabbitMQ</a></h2><p>AMQP，即 Advanced Message Queuing Protocol，高级消息队列协议是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP 的主要特征是面向消息、队列和路由，可靠且安全。RabbitMQ 是一个开源的 AMQP 实现，服务器端用 Erlang 语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP 等，支持 Ajax。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。</p>
<h2 id="RabbitMQ相关概念"><a href="#RabbitMQ相关概念" class="headerlink" title="RabbitMQ相关概念"></a>RabbitMQ相关概念</h2><table>
<thead>
<tr>
<th>概念</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>VHost</td>
<td>Virtual Host只是起到一个命名空间的作用</td>
</tr>
<tr>
<td>Broker</td>
<td>消息队列服务器的实体，用于存储转发消息，可以把它看成MQ的Server端</td>
</tr>
<tr>
<td>Exchange</td>
<td>接收消息并将其路由到一个或多个队列，路由算法决定消息按什么规则、路由到哪个队列</td>
</tr>
<tr>
<td>Queue</td>
<td>用来存储消息，是消息的容器，它只受主机内存和磁盘的限制，是消息弹出之前的最终目的地</td>
</tr>
<tr>
<td>Binding</td>
<td>把 Exchange 和 Queue 按照路由算法绑定起来</td>
</tr>
<tr>
<td>RoutingKey</td>
<td>路由规则，Exchange 根据这个规则进行消息路由</td>
</tr>
<tr>
<td>Producter</td>
<td>消息生产者，产生消息的程序</td>
</tr>
<tr>
<td>Consumer</td>
<td>消息消费者，消费消息的程序</td>
</tr>
<tr>
<td>Channel</td>
<td>Channel 是进行消息读写的通道，在客户端的每个连接里可建立多个 Channel，每个 Channel 代表一个会话</td>
</tr>
</tbody>
</table>
<!--
Message: 消息，消息队列中信息或数据的传递载体
Producer: 消息生产者，即投递消息的程序
Consumer: 消息的消费者，即接受消息的程序
Broker: 简单来说就是消息队列服务器实体，即Rabbitmq Server
Binding: 绑定，它的作用就是把exchange和queue按照路由规则绑定起来
Queue: 队列，负责保存消息和发放消息
RoutingKey: 路由关键字，Exchange根据这个关键字进行消息投递
Exchange: 接收消息，并转发到绑定的队列
VHost: 虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离
Channel: 消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务
-->
<blockquote>
<p><strong>Exchange:</strong> Takes a message and routes it to one or more queues. Routing algorithms decides where to send the message from the exchange. Routing algorithms depends on the exchange type and rules called “bindings”.</p>
</blockquote>
<table>
<thead>
<tr>
<th>Exchange Type</th>
<th>Routing Algorithms</th>
<th>Purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td>Direct</td>
<td>It routes messages with a routing key equal to the routing key declared by the binding queue</td>
<td>This is a Default exchange type. It is used when a message needs to send to a queue</td>
</tr>
<tr>
<td>Fanout</td>
<td>It routes messages to all the queues from the bound exchange. If routing key is provided then it will be ignored</td>
<td>Useful for broadcast feature using publish subscribe pattern</td>
</tr>
<tr>
<td>Topic</td>
<td>It routes messages to queues based on either full or a portion of routing key matches</td>
<td>Useful for broadcast to specific queues based on some criteria</td>
</tr>
</tbody>
</table>
<p><img src="/images/architect/rabbitmq-message-flow.jpg" alt="RabbitMQ消息处理流程"></p>
<h2 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a><a href="https://github.com/rabbitmq/rabbitmq-server/releases/" target="_blank" rel="noopener">RabbitMQ安装</a></h2><p>RabbitMQ 是基于 Erlang 语言开发的，所以首先必须安装 Erlang 运行时环境。</p>
<ol>
<li><p>下载安装 <a href="http://erlang.org/download/" target="_blank" rel="noopener">Erlang</a></p>
</li>
<li><p>下载安装 <a href="https://www.rabbitmq.com/releases/rabbitmq-server/" target="_blank" rel="noopener">RabbitMQ</a></p>
</li>
<li><p>修改 RabbitMQ 配置文件</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> $&#123;RABBITMQ_HOME&#125;/etc</span><br><span class="line">$ <span class="built_in">copy</span> rabbitmq.config.example rabbitmq.config</span><br></pre></td></tr></table></figure>
</li>
<li><p>启用相关插件</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ rabbitmq-plugins enable rabbitmq_management rabbitmq_web_stomp rabbitmq_stomp</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 RabbitMQ 服务</p>
</li>
<li><p>通过访问 <a href="http://127.0.0.1:15672" target="_blank" rel="noopener">http://127.0.0.1:15672</a> 用 guest/guest 登录验证是否安装成功</p>
</li>
</ol>
<blockquote>
<p>默认情况下，RabbitMQ的默认的guest用户只允许本机访问，如果想让guest用户能够远程访问的话，只需要将配置文件中的<code>loopback_users</code>列表置为空即可<code>{loopback_users, []}</code>；另外关于新添加的用户，直接就可以从远程访问的，如果想让新添加的用户只能本地访问，可以将用户名添加到上面的列表，如只允许admin用户本机访问<code>{loopback_users, [&quot;admin&quot;]}</code></p>
</blockquote>
<h2 id="五种消息模型"><a href="#五种消息模型" class="headerlink" title="五种消息模型"></a>五种消息模型</h2><h3 id="基本消息模型"><a href="#基本消息模型" class="headerlink" title="基本消息模型"></a>基本消息模型</h3><p>一个生产者，一个消费者，生产者生产的消息直接被消费者消费。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//factory.setHost(ConnectionFactory.DEFAULT_HOST);</span></span><br><span class="line">        <span class="comment">//factory.setPort(ConnectionFactory.DEFAULT_AMQP_PORT);</span></span><br><span class="line">        <span class="comment">//factory.setVirtualHost(ConnectionFactory.DEFAULT_VHOST);</span></span><br><span class="line">        <span class="comment">//factory.setUsername(ConnectionFactory.DEFAULT_USER);</span></span><br><span class="line">        <span class="comment">//factory.setPassword(ConnectionFactory.DEFAULT_PASS);</span></span><br><span class="line">        connection = factory.newConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        String message = <span class="string">"Hello RabbitMQ!"</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">        channel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRecv</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">" [*] Waiting for messages..."</span>);</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123; <span class="comment">// autoAck为true时则消息一收到立马会确认</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String message = <span class="keyword">new</span> String(body, StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">" [x] Received '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);  <span class="comment">// 手动ACK</span></span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        latch.await();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Work消息模型"><a href="#Work消息模型" class="headerlink" title="Work消息模型"></a>Work消息模型</h3><p>在基本消息模型中，当消息处理比较耗时的时候，生产者生产消息的速度会远远快于消费者消费的速度，那就可能出现消息的堆积。此时就可以使用Work模型：<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。队列中的消息一旦消费就会消失，因此任务是不会被重复执行的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"work_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connection = factory.newConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">50</span>; i++) &#123;</span><br><span class="line">            String message = <span class="string">"task_"</span> + i;</span><br><span class="line">            channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        channel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRecv</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">" [*] Waiting for messages..."</span>);</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String message = <span class="keyword">new</span> String(body, StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">" [x] Received '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread.currentThread().join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="订阅模型-Fanout-广播"><a href="#订阅模型-Fanout-广播" class="headerlink" title="订阅模型 - Fanout(广播)"></a>订阅模型 - Fanout(广播)</h3><p>生产者发送的消息，没有直接发送到队列，而是发送到了交换机，交换机把消息发送给绑定过的所有队列，队列的消费者都能拿到消息，生产者发送的消息经过交换机到达队列，实现一条消息被多个消费者消费。需要注意的是，如果将消息发送到一个没有队列绑定的Exchange上面，那么该消息将会丢失，这是因为在RabbitMQ中Exchange只负责转发消息不具备存储消息的能力，只有队列具备存储消息的能力。</p>
<p><strong>Fanout 完全不关心key，直接采取<code>广播</code>的方式进行消息投递，任何发送到Fanout Exchange的消息都会被转发到与该Exchange绑定(Binding)的所有Queue上。</strong></p>
<blockquote>
<p>在基本消息模型和Work消息模型中，一条消息只能被一个消息者消费；在<code>Fanout</code>模型中，一条消息会被所有订阅的队列消费(一个生产者多个消费者)。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"fanout_exchange"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"fanout_exchange_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connection = factory.newConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.FANOUT);</span><br><span class="line">        String message = <span class="string">"Hello RabbitMQ!"</span>;</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">""</span>, <span class="keyword">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">        channel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRecv</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">""</span>); <span class="comment">// 绑定Queue到Exchange</span></span><br><span class="line">        System.out.println(<span class="string">" [*] Waiting for messages..."</span>);</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String message = <span class="keyword">new</span> String(body, StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">" [x] Received '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        latch.await();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="订阅模型-Direct-定向"><a href="#订阅模型-Direct-定向" class="headerlink" title="订阅模型 - Direct(定向)"></a>订阅模型 - Direct(定向)</h3><p>在Fanout模型中，一条消息会被所有订阅的队列都消费，但是，在某些场景下，我们希望不同的消息被不同的队列消费，这时就要用到Direct Exchange模型：</p>
<ul>
<li>Queue与Exchange的绑定，不能是任意绑定了，而是要指定一个RoutingKey；</li>
<li>消息的发送方在向Exchange发送消息时，也必须指定消费的RoutingKey；</li>
<li>Exchange不再把消息投递给每一个绑定的队列，而是根据消息的RoutingKey来进行判断，只有队列的RoutingKey与消息的RoutingKey完全一致，才会接收到消息。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"direct_exchange"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"direct_exchange_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connection = factory.newConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);</span><br><span class="line">        String message = <span class="string">"Hello RabbitMQ!"</span>;</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">"order.create"</span>, <span class="keyword">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">        channel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRecv</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"order.create"</span>); <span class="comment">// 使用routingKey绑定queue与exchange</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"order.update"</span>);</span><br><span class="line">        System.out.println(<span class="string">" [*] Waiting for messages..."</span>);</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String message = <span class="keyword">new</span> String(body, StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">" [x] Received '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        latch.await();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="订阅模型-Topic-通配符"><a href="#订阅模型-Topic-通配符" class="headerlink" title="订阅模型 - Topic(通配符)"></a>订阅模型 - Topic(通配符)</h3><p>Topic与Direct非常相似，只不过Topic Exchange可以让队列在绑定RoutingKey时使用通配符。符号 <code>#</code> 表示匹配一个或多个词，符号 <code>*</code> 表示仅匹配一个词。</p>
<blockquote>
<p>RoutingKey一般是由一个或多个单词组成，多个单词之间以<code>.</code>分割。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"topic_exchange"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"topic_exchange_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connection = factory.newConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC);</span><br><span class="line">        String message = <span class="string">"Hello RabbitMQ!"</span>;</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">"order.create"</span>, <span class="keyword">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">        channel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRecv</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"order.#"</span>);</span><br><span class="line">        System.out.println(<span class="string">" [*] Waiting for messages..."</span>);</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String message = <span class="keyword">new</span> String(body, StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">" [x] Received '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        latch.await();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="交换机持久化"><a href="#交换机持久化" class="headerlink" title="交换机持久化"></a>交换机持久化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">// 第三个参数durable设置为true</span></span><br><span class="line">channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>
<h3 id="队列持久化"><a href="#队列持久化" class="headerlink" title="队列持久化"></a>队列持久化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">// 第二个参数durable设置为true</span></span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<h3 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String message = <span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="comment">// 第三个参数BasicProperties设置为MessageProperties.PERSISTENT_TEXT_PLAIN</span></span><br><span class="line">channel.basicPublish(EXCHANGE_NAME, <span class="string">"order.create"</span>, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes(StandardCharsets.UTF_8));</span><br></pre></td></tr></table></figure>
<h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><h3 id="生产者确认"><a href="#生产者确认" class="headerlink" title="生产者确认"></a>生产者确认</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PublisherCallbackTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connection = factory.newConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Confirm模式只能保证消息到达Exchange却不能保证消息准确投递到目标Queue中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConfirmCallback</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.confirmSelect(); <span class="comment">// 启用生产者确认</span></span><br><span class="line">        channel.addConfirmListener(<span class="keyword">new</span> ConfirmListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleAck</span><span class="params">(<span class="keyword">long</span> deliveryTag, <span class="keyword">boolean</span> multiple)</span> </span>&#123;</span><br><span class="line">                log.debug(<span class="string">"=== Ack ==="</span>);</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleNack</span><span class="params">(<span class="keyword">long</span> deliveryTag, <span class="keyword">boolean</span> multiple)</span> </span>&#123;</span><br><span class="line">                log.debug(<span class="string">"=== Nack ==="</span>);</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        channel.exchangeDeclare(<span class="string">"order.exch"</span>, DIRECT);</span><br><span class="line">        String msg = <span class="string">"Test confirm callback"</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">"order.exch"</span>, <span class="string">"order.create"</span>, <span class="keyword">null</span>, msg.getBytes());</span><br><span class="line">        latch.await();</span><br><span class="line">        channel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return模式用于处理一些不可路由的消息, 配合mandatory使用(值为true表示接收路由不可达的消息, 为false表示broker自动删除不可路由的消息而不会触发ReturnCallback)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReturnCallback</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.addReturnListener((replyCode, replyText, exchange, routingKey, properties, body) -&gt; &#123;</span><br><span class="line">            log.error(<span class="string">"消息无法从交换机路由到队列, 原因: &#123;&#125;"</span>, replyText);</span><br><span class="line">            latch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line">        channel.exchangeDeclare(<span class="string">"order.exch"</span>, DIRECT);</span><br><span class="line">        String msg = <span class="string">"Test confirm callback"</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">"order.exch"</span>, <span class="string">"order.create.err"</span>, <span class="keyword">true</span>, <span class="keyword">null</span>, msg.getBytes());</span><br><span class="line">        latch.await();</span><br><span class="line">        channel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="消费端限流策略"><a href="#消费端限流策略" class="headerlink" title="消费端限流策略"></a>消费端限流策略</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QosTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"order.exch"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTING_KEY = <span class="string">"order.create"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"order-create-queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connection = factory.newConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQos</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">5</span>);</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, DIRECT);</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, ROUTING_KEY);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            String msg = <span class="string">"Hello RabbitMQ "</span> + i;</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, ROUTING_KEY, <span class="keyword">null</span>, msg.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        channel.basicQos(<span class="number">0</span>, <span class="number">1</span>, <span class="keyword">false</span>); <span class="comment">// 手动确认模式下限流才生效</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                log.debug(<span class="string">" [x] Received '&#123;&#125;'"</span>, <span class="keyword">new</span> String(body));</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        latch.await();</span><br><span class="line">        channel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="消费端ACK与重回队列"><a href="#消费端ACK与重回队列" class="headerlink" title="消费端ACK与重回队列"></a>消费端ACK与重回队列</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequeueTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"order.exch"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTING_KEY = <span class="string">"order.create"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"order-create-queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connection = factory.newConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRequeue</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">5</span>);</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, DIRECT);</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, ROUTING_KEY);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            String msg = <span class="string">"Hello RabbitMQ "</span> + i;</span><br><span class="line">            AMQP.BasicProperties prop = <span class="keyword">new</span> AMQP.BasicProperties().builder()</span><br><span class="line">                    .headers(Collections.singletonMap(<span class="string">"x-counter"</span>, i))</span><br><span class="line">                    .build();</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, ROUTING_KEY, prop, msg.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                log.debug(<span class="string">" [x] Received '&#123;&#125;'"</span>, <span class="keyword">new</span> String(body));</span><br><span class="line">                Integer count = (Integer) properties.getHeaders().get(<span class="string">"x-counter"</span>);</span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(), <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                    latch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        latch.await();</span><br><span class="line">        channel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="TTL消息"><a href="#TTL消息" class="headerlink" title="TTL消息"></a>TTL消息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TTLTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"order.exch"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTING_KEY = <span class="string">"order.create"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"order-create-queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connection = factory.newConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTTL</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, DIRECT);</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, ROUTING_KEY);</span><br><span class="line">        String msg = <span class="string">"Hello RabbitMQ"</span>;</span><br><span class="line">        AMQP.BasicProperties prop = <span class="keyword">new</span> AMQP.BasicProperties().builder()</span><br><span class="line">                .expiration(<span class="string">"5000"</span>)</span><br><span class="line">                .build();</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, ROUTING_KEY, prop, msg.getBytes());</span><br><span class="line">        channel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DLXTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DLX_EXCHANGE_NAME = <span class="string">"dlx.exch"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DLX_ROUTING_KEY = <span class="string">"#"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DLX_QUEUE_NAME = <span class="string">"dlx-queue"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"order.exch"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTING_KEY = <span class="string">"order.create"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"order-create-queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connection = factory.newConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDLX</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, DIRECT);</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,</span><br><span class="line">                Collections.singletonMap(<span class="string">"x-dead-letter-exchange"</span>, DLX_EXCHANGE_NAME)); </span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, ROUTING_KEY);</span><br><span class="line">        <span class="comment">// 死信队列声明</span></span><br><span class="line">        channel.exchangeDeclare(DLX_EXCHANGE_NAME, TOPIC);</span><br><span class="line">        channel.queueDeclare(DLX_QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueBind(DLX_QUEUE_NAME, DLX_EXCHANGE_NAME, DLX_ROUTING_KEY);</span><br><span class="line">        <span class="comment">// 消息变成死信的情况: (1)TTL过期 (2)消息被拒绝(basicReject/basicNack)且requeue为false (3)队列达到最大值</span></span><br><span class="line">        String msg = <span class="string">"Hello RabbitMQ"</span>;</span><br><span class="line">        AMQP.BasicProperties prop = <span class="keyword">new</span> AMQP.BasicProperties().builder()</span><br><span class="line">                .expiration(<span class="string">"5000"</span>)</span><br><span class="line">                .build();</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, ROUTING_KEY, prop, msg.getBytes());</span><br><span class="line">        channel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayedPluginTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connection = factory.newConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelayedMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(<span class="string">"order-exchange"</span>, <span class="string">"x-delayed-message"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>,</span><br><span class="line">                Collections.singletonMap(<span class="string">"x-delayed-type"</span>, DIRECT.getType()));</span><br><span class="line">        channel.queueDeclare(<span class="string">"order-create-queue"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueBind(<span class="string">"order-create-queue"</span>, <span class="string">"order-exchange"</span>, <span class="string">"order.create"</span>);</span><br><span class="line">        AMQP.BasicProperties prop = <span class="keyword">new</span> AMQP.BasicProperties().builder()</span><br><span class="line">                .headers(Collections.singletonMap(<span class="string">"x-delay"</span>, <span class="number">5000</span>))</span><br><span class="line">                .build();</span><br><span class="line">        String msg = <span class="string">"Test delayed message"</span>;</span><br><span class="line">        log.debug(<span class="string">" [x] Send '&#123;&#125;'"</span>, msg);</span><br><span class="line">        channel.basicPublish(<span class="string">"order-exchange"</span>, <span class="string">"order.create"</span>, prop, msg.getBytes());</span><br><span class="line">        channel.basicConsume(<span class="string">"order-create-queue"</span>, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                log.debug(<span class="string">" [x] Received '&#123;&#125;'"</span>, <span class="keyword">new</span> String(body));</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        latch.await();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h2><p>所谓幂等性，数学上定义为<code>f(n)=f(1)</code>，表示n被函数f作用一次和作用多次的结果是一样的。在软件系统中，表示某个接口使用相同参数调用一次或者多次其造成的后果是一样的。</p>
<h3 id="消息表"><a href="#消息表" class="headerlink" title="消息表"></a>消息表</h3><p>在数据库里面，添加一张消息消费记录表，表字段加上唯一约束条件，消费完之后就往表里写入一条数据，因为加了唯一约束条件，第二次保存时，数据库就会报错回滚事务，这样通过数据库唯一索引就可以防止重复消费。</p>
<h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>乐观锁，大多是基于数据版本（version）记录机制实现。何谓数据版本？即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个 <code>version</code> 字段来实现。读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。</p>
<h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>如果你的数据库将来不会分库分表，那么可以在业务表字段加上唯一约束，这样相同的数据就不会保存多份；如果你的数据库做了分库分表，那么可以使用 Redis 或 Zookeeper 对消息id加锁来防止消息被重复消费。</p>
<h2 id="可靠性投递方案"><a href="#可靠性投递方案" class="headerlink" title="可靠性投递方案"></a>可靠性投递方案</h2><p>生产者：</p>
<ul>
<li>保证消息成功发出</li>
<li>保证Broker成功接收</li>
<li>生产者收到Broker确认应答</li>
<li>完善的消息补偿机制</li>
</ul>
<p>消费者：</p>
<ul>
<li>手动确认</li>
</ul>
<blockquote>
<p>生产者：生产者向Broker发送消息，但由于网络波动，Broker可能会没收到该条消息，所以当Broker收到消息后需要向生产者发送回执（如果是失败的回执，生产者需要进行重发）。需要注意的是，生产者确认只能保证消息到达Exchange却不能保证消息准确投递到目标Queue中，即如果RabbitMQ找不到任何需要投递的Queue队列，那么RabbitMQ依然后发ack给生产者，此时生产者可以认为消息已经正确投递，而不用关心消息没有Queue接收的问题（这是RabbitMQ和消息的接收方需要考虑的事情），生产者只需要保证消息能够发送到Exchange即可。在实际生产中，很难保障前三点的完全可靠，在某些极端的情况下，比如生产者向Broker发送消息过程中失败了，或者在Broker在返回确认应答过程中出现网络闪断等现象，所以要保障消息可靠性投递还需要有完善的消息补偿机制。</p>
<p>消费者：在RabbitMQ中，消息默认是自动ack的，即消息到达消费端立即ack而不管消费端业务是否处理成功，在自动ack模式下，如果业务处理失败或者出现突然宕机现象就会导致消息丢失，因此可以开启手动确认模式由消费端自行决定何时ack。</p>
</blockquote>
<p>可靠性投递方案：</p>
<ol>
<li>消息落库</li>
</ol>
<p><img src="/images/architect/mq-reliable-delivery.png" alt="消息可靠性投递方案之消息落库"></p>
<ol start="2">
<li>延迟投递做二次确认</li>
</ol>
<p><img src="/images/architect/mq-reliable-delivery-delay.png" alt="消息可靠性投递方案之延迟投递"></p>
<h2 id="Spring整合RabbitMQ"><a href="#Spring整合RabbitMQ" class="headerlink" title="Spring整合RabbitMQ"></a>Spring整合RabbitMQ</h2><h3 id="整合配置"><a href="#整合配置" class="headerlink" title="整合配置"></a>整合配置</h3><h4 id="XML配置"><a href="#XML配置" class="headerlink" title="XML配置"></a>XML配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:rabbit</span>=<span class="string">"http://www.springframework.org/schema/rabbit"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/task</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/task/spring-task.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/rabbit</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/rabbit/spring-rabbit.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:application.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ==================== RabbitMQ Common Config ==================== --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">task:executor</span> <span class="attr">id</span>=<span class="string">"taskExecutor"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">pool-size</span>=<span class="string">"8"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">keep-alive</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">queue-capacity</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">rejection-policy</span>=<span class="string">"CALLER_RUNS"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">task:scheduler</span> <span class="attr">id</span>=<span class="string">"taskScheduler"</span> <span class="attr">pool-size</span>=<span class="string">"8"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">host</span>=<span class="string">"$&#123;rabbitmq.host:localhost&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">port</span>=<span class="string">"$&#123;rabbitmq.port:5672&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">virtual-host</span>=<span class="string">"$&#123;rabbitmq.vhost:/&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">username</span>=<span class="string">"$&#123;rabbitmq.username:guest&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">password</span>=<span class="string">"$&#123;rabbitmq.password:guest&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">publisher-confirms</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">executor</span>=<span class="string">"taskExecutor"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- The default exchange and routingKey are empty. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">"amqpTemplate"</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:admin</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ==================== Queues ==================== --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明Queue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">"directExchangeQueue"</span> <span class="attr">name</span>=<span class="string">"direct_exchange_queue"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ==================== Bindings ==================== --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 绑定Queue到Exchange --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:direct-exchange</span> <span class="attr">name</span>=<span class="string">"direct_exchange"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">queue</span>=<span class="string">"directExchangeQueue"</span> <span class="attr">key</span>=<span class="string">"order.create"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">queue</span>=<span class="string">"directExchangeQueue"</span> <span class="attr">key</span>=<span class="string">"order.update"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:direct-exchange</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ==================== Listener ==================== --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 绑定Queue和Listener --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:listener-container</span> <span class="attr">type</span>=<span class="string">"direct"</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">task-executor</span>=<span class="string">"taskExecutor"</span> <span class="attr">task-scheduler</span>=<span class="string">"taskScheduler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">"messageListener"</span> <span class="attr">queues</span>=<span class="string">"directExchangeQueue"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:listener-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageListener"</span> <span class="attr">class</span>=<span class="string">"com.gavin.ssm.msg.core.mq.MessageHandler"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageHandler</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="keyword">new</span> String(message.getBody(), StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:rabbit</span>=<span class="string">"http://www.springframework.org/schema/rabbit"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/task</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/task/spring-task.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/rabbit</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/rabbit/spring-rabbit.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:application.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ==================== RabbitMQ Common Config ==================== --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">task:executor</span> <span class="attr">id</span>=<span class="string">"taskExecutor"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">pool-size</span>=<span class="string">"8"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">keep-alive</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">queue-capacity</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">rejection-policy</span>=<span class="string">"CALLER_RUNS"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">task:scheduler</span> <span class="attr">id</span>=<span class="string">"taskScheduler"</span> <span class="attr">pool-size</span>=<span class="string">"8"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">host</span>=<span class="string">"$&#123;rabbitmq.host:localhost&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">port</span>=<span class="string">"$&#123;rabbitmq.port:5672&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">virtual-host</span>=<span class="string">"$&#123;rabbitmq.vhost:/&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">username</span>=<span class="string">"$&#123;rabbitmq.username:guest&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">password</span>=<span class="string">"$&#123;rabbitmq.password:guest&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">publisher-confirms</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">executor</span>=<span class="string">"taskExecutor"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- The default exchange and routingKey are empty. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">"amqpTemplate"</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:admin</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ==================== @RabbitListener Support ==================== --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用@RabbitListener注解方式若不指定containerFactory则默认为rabbitListenerContainerFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:annotation-driven</span> <span class="attr">container-factory</span>=<span class="string">"rabbitListenerContainerFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"rabbitListenerContainerFactory"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.amqp.rabbit.config.DirectRabbitListenerContainerFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"taskExecutor"</span> <span class="attr">ref</span>=<span class="string">"taskExecutor"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"taskScheduler"</span> <span class="attr">ref</span>=<span class="string">"taskScheduler"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- The container acknowledge the message automatically unless MessageListener throws an exception --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acknowledgeMode"</span> <span class="attr">value</span>=<span class="string">"AUTO"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefetchCount"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"directExchangeQueue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(value = <span class="string">"direct_exchange"</span>, type = ExchangeTypes.DIRECT),</span><br><span class="line">            key = <span class="string">"order.create"</span></span><br><span class="line">    ))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"====== &#123;&#125; ======"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="整合测试"><a href="#整合测试" class="headerlink" title="整合测试"></a>整合测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:spring-rabbitmq.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringRabbitmqTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"order.exch"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTING_KEY = <span class="string">"order.create"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"order-queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitAdmin rabbitAdmin;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertNotNull(rabbitAdmin);</span><br><span class="line">        Assert.assertNotNull(amqpTemplate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testManage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        rabbitAdmin.declareExchange(<span class="keyword">new</span> DirectExchange(EXCHANGE_NAME));</span><br><span class="line">        rabbitAdmin.declareQueue(<span class="keyword">new</span> Queue(QUEUE_NAME));</span><br><span class="line">        rabbitAdmin.declareBinding(<span class="keyword">new</span> Binding(QUEUE_NAME, DestinationType.QUEUE, EXCHANGE_NAME, ROUTING_KEY, <span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        amqpTemplate.convertAndSend(EXCHANGE_NAME, ROUTING_KEY, <span class="string">"订单创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">RabbitMQ Tutorials</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-rabbit-mq/index.html" target="_blank" rel="noopener">俞 超. <em>基于 RabbitMQ 的实时消息推送</em></a></li>
</ul>
]]></content>
      <categories>
        <category>architect</category>
      </categories>
      <tags>
        <tag>architect</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式缓存 - Redis</title>
    <url>/2018/11/07/architect/distributed/redis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Redis 是开源的、高性能的 key-value 数据库。Redis 与其他 key-value 缓存产品有以下三个特点：</p>
<ul>
<li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启时可以再次加载进行使用。</li>
<li>Redis不仅仅支持简单的 key-value 类型的数据，同时还提供 list(列表)、hash(哈希)、set(集合)、zset(有序集合) 数据结构的存储。</li>
<li>Redis支持数据的备份，即 master-slave 模式的数据备份。</li>
</ul>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul>
<li>性能极高：Redis速度非常快，读的速度是110000次/s，写的速度是81000/s。</li>
<li>支持丰富的数据类型：Redis支持 string、hash、list、set、zset 五种数据类型。</li>
<li>原子性：Redis的所有操作都是原子性的，这可确保在多个客户端同时访问时的线程安全问题(单线程)，单个操作是原子性的，多个操作也支持事务(即原子性)，通过MULTI和EXEC指令包起来。</li>
<li>丰富的特性：Redis可用于许多应用场景，如缓存(注意缓存的添加不能影响正常的业务逻辑)、消息队列(Redis本身支持发布/订阅)、应用程序中的任何短期数据(如Web应用程序会话)、网页命中数等。</li>
</ul>
<h2 id="数据存储类型"><a href="#数据存储类型" class="headerlink" title="数据存储类型"></a>数据存储类型</h2><p>Redis支持 string、hash、list、set、zset 五种数据类型。</p>
<table>
<thead>
<tr>
<th>Data Type</th>
<th>Java Data Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td>Map&lt;String, String&gt;</td>
</tr>
<tr>
<td>hash</td>
<td>Map&lt;String, Map&lt;String, String&gt;&gt;</td>
</tr>
<tr>
<td>list</td>
<td>Map&lt;String, List<string>&gt;</string></td>
</tr>
<tr>
<td>set</td>
<td>Map&lt;String, Set<string>&gt;</string></td>
</tr>
<tr>
<td>zset</td>
<td>Map&lt;String, SortedSet<string>&gt;</string></td>
</tr>
</tbody>
</table>
<h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>字符串类型是Redis中最为基础的数据存储类型，它在Redis中是二进制安全的，这便意味着该类型可以接受任何格式的数据，如JPEG图像数据或Json对象描述信息等，在Redis中字符串类型的value最多可以容纳的数据长度是512M。</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>SET key value</td>
<td>This command sets the value at the specified key.</td>
</tr>
<tr>
<td>GET key</td>
<td>Gets the value of a key.</td>
</tr>
<tr>
<td>GETRANGE key start end</td>
<td>Gets a substring of the string stored at a key.</td>
</tr>
<tr>
<td>GETSET key value</td>
<td>Sets the string value of a key and return its old value.</td>
</tr>
<tr>
<td>GETBIT key offset</td>
<td>Returns the bit value at the offset in the string value stored at the key.</td>
</tr>
<tr>
<td>MGET key1 [key2..]</td>
<td>Gets the values of all the given keys.</td>
</tr>
<tr>
<td>SETBIT key offset value</td>
<td>Sets or clears the bit at the offset in the string value stored at the key.</td>
</tr>
<tr>
<td>SETEX key seconds value</td>
<td>Sets the value with the expiry of a key.</td>
</tr>
<tr>
<td>SETNX key value</td>
<td>Sets the value of a key, only if the key does not exist.</td>
</tr>
<tr>
<td>SETRANGE key offset value</td>
<td>Overwrites the part of a string at the key starting at the specified offset.</td>
</tr>
<tr>
<td>STRLEN key</td>
<td>Gets the length of the value stored in a key.</td>
</tr>
<tr>
<td>MSET key value [key value …]</td>
<td>Sets multiple keys to multiple values.</td>
</tr>
<tr>
<td>MSETNX key value [key value …]</td>
<td>Sets multiple keys to multiple values, only if none of the keys exist.</td>
</tr>
<tr>
<td>PSETEX key milliseconds value</td>
<td>Sets the value and expiration in milliseconds of a key.</td>
</tr>
<tr>
<td>INCR key</td>
<td>Increments the integer value of a key by one.</td>
</tr>
<tr>
<td>INCRBY key increment</td>
<td>Increments the integer value of a key by the given amount.</td>
</tr>
<tr>
<td>INCRBYFLOAT key increment</td>
<td>Increments the float value of a key by the given amount.</td>
</tr>
<tr>
<td>DECR key</td>
<td>Decrements the integer value of a key by one.</td>
</tr>
<tr>
<td>DECRBY key decrement</td>
<td>Decrements the integer value of a key by the given number.</td>
</tr>
<tr>
<td>APPEND key value</td>
<td>Appends a value to a key.</td>
</tr>
</tbody>
</table>
<h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>Redis中的hash类型是具有string field和string value的map容器，所以它是表示对象的完美数据类型。在Redis中，每个hash可以存储多达40亿个字段值对。</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>HDEL key field2 [field2]</td>
<td>Deletes one or more hash fields.</td>
</tr>
<tr>
<td>HEXISTS key field</td>
<td>Determines whether a hash field exists or not.</td>
</tr>
<tr>
<td>HGET key field</td>
<td>Gets the value of a hash field stored at the specified key.</td>
</tr>
<tr>
<td>HGETALL key</td>
<td>Gets all the fields and values stored in a hash at the specified key.</td>
</tr>
<tr>
<td>HINCRBY key field increment</td>
<td>Increments the integer value of a hash field by the given number.</td>
</tr>
<tr>
<td>HINCRBYFLOAT key field increment</td>
<td>Increments the float value of a hash field by the given amount.</td>
</tr>
<tr>
<td>HKEYS key</td>
<td>Gets all the fields in a hash.</td>
</tr>
<tr>
<td>HLEN key</td>
<td>Gets the number of fields in a hash.</td>
</tr>
<tr>
<td>HMGET key field1 [field2]</td>
<td>Gets the values of all the given hash fields.</td>
</tr>
<tr>
<td>HMSET key field1 value1 [field2 value2 ]</td>
<td>Sets multiple hash fields to multiple values.</td>
</tr>
<tr>
<td>HSET key field value</td>
<td>Sets the string value of a hash field.</td>
</tr>
<tr>
<td>HSETNX key field value</td>
<td>Sets the value of a hash field, only if the field does not exist.</td>
</tr>
<tr>
<td>HVALS key</td>
<td>Gets all the values in a hash.</td>
</tr>
<tr>
<td>HSCAN key cursor [MATCH pattern] [COUNT count]</td>
<td>Incrementally iterates hash fields and associated values.</td>
</tr>
</tbody>
</table>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>在Redis中，list类型是按照插入顺序排序的字符串链表，和数据结构中的普通链表一样，我们可以在其头部和尾部添加新的元素。List中可以包含的最大元素数量是4294967295(2^32-1)。<br>在插入时，如果该键并不存在，Redis将为该键创建一个新的链表。与此相反，如果链表中所有的元素均被移除，那么该键也将会被从数据库中删除。<br>从元素插入和删除的效率来看，如果我们是在链表的两头插入或删除元素，这将会是非常高效的操作，即使链表中已经存储了百万条记录，该操作也可以在常量时间内完成；然而需要说明的是，如果元素插入或删除操作是作用于链表中间，那将会是非常低效的(因为需要进行移动操作)。  </p>
<table>
<thead>
<tr>
<th>Command</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>BLPOP key1 [key2 ] timeout</td>
<td>Removes and gets the first element in a list, or blocks until one is available.</td>
</tr>
<tr>
<td>BRPOP key1 [key2 ] timeout</td>
<td>Removes and gets the last element in a list, or blocks until one is available.</td>
</tr>
<tr>
<td>BRPOPLPUSH source destination timeout</td>
<td>Pops a value from a list, pushes it to another list and returns it; or blocks until one is available.</td>
</tr>
<tr>
<td>LINDEX key index</td>
<td>Gets an element from a list by its index.</td>
</tr>
<tr>
<td>LINSERT key BEFORE(AFTER) pivot value</td>
<td>Inserts an element before or after another element in a list.</td>
</tr>
<tr>
<td>LLEN key</td>
<td>Gets the length of a list.</td>
</tr>
<tr>
<td>LPOP key</td>
<td>Removes and gets the first element in a list.</td>
</tr>
<tr>
<td>LPUSH key value1 [value2]</td>
<td>Prepends one or multiple values to a list.</td>
</tr>
<tr>
<td>LPUSHX key value</td>
<td>Prepends a value to a list, only if the list exists.</td>
</tr>
<tr>
<td>LRANGE key start stop</td>
<td>Gets a range of elements from a list.</td>
</tr>
<tr>
<td>LREM key count value</td>
<td>Removes elements from a list.</td>
</tr>
<tr>
<td>LSET key index value</td>
<td>Sets the value of an element in a list by its index.</td>
</tr>
<tr>
<td>LTRIM key start stop</td>
<td>Trims a list to the specified range.</td>
</tr>
<tr>
<td>RPOP key</td>
<td>Removes and gets the last element in a list.</td>
</tr>
<tr>
<td>RPOPLPUSH source destination</td>
<td>Removes the last element in a list, appends it to another list and returns it.</td>
</tr>
<tr>
<td>RPUSH key value1 [value2]</td>
<td>Appends one or multiple values to a list.</td>
</tr>
<tr>
<td>RPUSHX key value</td>
<td>Appends a value to a list, only if the list exists.</td>
</tr>
</tbody>
</table>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>在Redis中，set类型是没有排序的字符串集合。set可包含的最大元素数量是4294967295(2^32-1)。<br>和list类型一样，我们也可以在该类型的数据值上执行添加、删除或判断某一元素是否存在等操作。需要说明的是，这些操作的时间复杂度为O(1)(无论set集合中包含的元素数量是多少都是常量时间)。<br>和list类型不同的是，set集合中不允许出现重复的元素，换句话说，如果多次添加相同元素，set中将仅保留该元素的一份拷贝。<br>和list类型相比，set类型在功能上还存在着一个非常重要的特性，即在服务器端完成多个sets之间的聚合计算操作，如unions、intersections和differences操作，由于这些操作均在服务端完成，因此效率极高，并且也节省了大量的网络IO开销。  </p>
<table>
<thead>
<tr>
<th>Command</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>SADD key member1 [member2]</td>
<td>Adds one or more members to a set.</td>
</tr>
<tr>
<td>SCARD key</td>
<td>Gets the number of members in a set.</td>
</tr>
<tr>
<td>SDIFF key1 [key2]</td>
<td>Subtracts multiple sets.</td>
</tr>
<tr>
<td>SDIFFSTORE destination key1 [key2]</td>
<td>Subtracts multiple sets and stores the resulting set in a key.</td>
</tr>
<tr>
<td>SINTER key1 [key2]</td>
<td>Intersects multiple sets.</td>
</tr>
<tr>
<td>SINTERSTORE destination key1 [key2]</td>
<td>Intersects multiple sets and stores the resulting set in a key.</td>
</tr>
<tr>
<td>SISMEMBER key member</td>
<td>Determines if a given value is a member of a set.</td>
</tr>
<tr>
<td>SMEMBERS key</td>
<td>Gets all the members in a set.</td>
</tr>
<tr>
<td>SMOVE source destination member</td>
<td>Moves a member from one set to another.</td>
</tr>
<tr>
<td>SPOP key</td>
<td>Removes and returns a random member from a set.</td>
</tr>
<tr>
<td>SRANDMEMBER key [count]</td>
<td>Gets one or multiple random members from a set.</td>
</tr>
<tr>
<td>SREM key member1 [member2]</td>
<td>Removes one or more members from a set.</td>
</tr>
<tr>
<td>SUNION key1 [key2]</td>
<td>Adds multiple sets.</td>
</tr>
<tr>
<td>SUNIONSTORE destination key1 [key2]</td>
<td>Adds multiple sets and stores the resulting set in a key.</td>
</tr>
<tr>
<td>SSCAN key cursor [MATCH pattern] [COUNT count]</td>
<td>Incrementally iterates set elements.</td>
</tr>
</tbody>
</table>
<h3 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h3><p>和set类型极为相似，它们都是字符串的集合，都不允许重复的成员出现在一个set中。它们之间的主要差别是zset中的每一个成员都会有一个分数(score)与之关联，Redis正是通过score来为集合中的成员进行从小到大的排序。然而需要说明的是，尽管zset中的成员必须是唯一的，但是score却是可以重复的。<br>在zset中，添加、删除或测试成员是否存在都是非常快速的操作，其时间复杂度为O(1)(无论set集合中包含的元素数量是多少都是常量时间)。<br>由于zset中的成员在集合中的位置是有序的，因此，即便是访问位于集合中部的成员也仍然是非常高效的。事实上，Redis所具有的这一特征在很多其它类型的数据库中是很难实现的，换句话说，在这点上要想达到和Redis同样的高效，在其它数据库中进行建模是非常困难的。  </p>
<table>
<thead>
<tr>
<th>Command</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>ZADD key score1 member1 [score2 member2]</td>
<td>Adds one or more members to a sorted set, or updates its score, if it already exists.</td>
</tr>
<tr>
<td>ZCARD key</td>
<td>Gets the number of members in a sorted set.</td>
</tr>
<tr>
<td>ZCOUNT key min max</td>
<td>Counts the members in a sorted set with scores within the given values.</td>
</tr>
<tr>
<td>ZINCRBY key increment member</td>
<td>Increments the score of a member in a sorted set.</td>
</tr>
<tr>
<td>ZINTERSTORE destination numkeys key [key …]</td>
<td>Intersects multiple sorted sets and stores the resulting sorted set in a new key.</td>
</tr>
<tr>
<td>ZLEXCOUNT key min max</td>
<td>Counts the number of members in a sorted set between a given lexicographical range.</td>
</tr>
<tr>
<td>ZRANGE key start stop [WITHSCORES]</td>
<td>Returns a range of members in a sorted set, by index.</td>
</tr>
<tr>
<td>ZRANGEBYLEX key min max [LIMIT offset count]</td>
<td>Returns a range of members in a sorted set, by lexicographical range.</td>
</tr>
<tr>
<td>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</td>
<td>Returns a range of members in a sorted set, by score.</td>
</tr>
<tr>
<td>ZRANK key member</td>
<td>Determines the index of a member in a sorted set.</td>
</tr>
<tr>
<td>ZREM key member [member …]</td>
<td>Removes one or more members from a sorted set.</td>
</tr>
<tr>
<td>ZREMRANGEBYLEX key min max</td>
<td>Removes all members in a sorted set between the given lexicographical range.</td>
</tr>
<tr>
<td>ZREMRANGEBYRANK key start stop</td>
<td>Removes all members in a sorted set within the given indexes.</td>
</tr>
<tr>
<td>ZREMRANGEBYSCORE key min max</td>
<td>Removes all members in a sorted set within the given scores.</td>
</tr>
<tr>
<td>ZREVRANGE key start stop [WITHSCORES]</td>
<td>Returns a range of members in a sorted set, by index, with scores ordered from high to low.</td>
</tr>
<tr>
<td>ZREVRANGEBYSCORE key max min [WITHSCORES]</td>
<td>Returns a range of members in a sorted set, by score, with scores ordered from high to low.</td>
</tr>
<tr>
<td>ZREVRANK key member</td>
<td>Determines the index of a member in a sorted set, with scores ordered from high to low.</td>
</tr>
<tr>
<td>ZSCORE key member</td>
<td>Gets the score associated with the given member in a sorted set.</td>
</tr>
<tr>
<td>ZUNIONSTORE destination numkeys key [key …]</td>
<td>Adds multiple sorted sets and stores the resulting sorted set in a new key.</td>
</tr>
<tr>
<td>ZSCAN key cursor [MATCH pattern] [COUNT count]</td>
<td>Incrementally iterates sorted sets elements and associated scores.</td>
</tr>
</tbody>
</table>
<h2 id="key操作"><a href="#key操作" class="headerlink" title="key操作"></a>key操作</h2><table>
<thead>
<tr>
<th>Command</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>DEL key</td>
<td>This command deletes the key, if it exists.</td>
</tr>
<tr>
<td>DUMP key</td>
<td>This command returns a serialized version of the value stored at the specified key.</td>
</tr>
<tr>
<td>EXISTS key</td>
<td>This command checks whether the key exists or not.</td>
</tr>
<tr>
<td>EXPIRE key seconds</td>
<td>Sets the expiry of the key after the specified time.</td>
</tr>
<tr>
<td>EXPIREAT key timestamp</td>
<td>Sets the expiry of the key after the specified time. Here time is in Unix timestamp format.</td>
</tr>
<tr>
<td>PEXPIRE key milliseconds</td>
<td>Set the expiry of key in milliseconds.</td>
</tr>
<tr>
<td>PEXPIREAT key milliseconds-timestamp</td>
<td>Sets the expiry of the key in Unix timestamp specified as milliseconds.</td>
</tr>
<tr>
<td>KEYS pattern</td>
<td>Finds all keys matching the specified pattern.</td>
</tr>
<tr>
<td>MOVE key db</td>
<td>Moves a key to another database.</td>
</tr>
<tr>
<td>PERSIST key</td>
<td>Removes the expiration from the key.</td>
</tr>
<tr>
<td>PTTL key</td>
<td>Gets the remaining time in keys expiry in milliseconds.</td>
</tr>
<tr>
<td>TTL key</td>
<td>Gets the remaining time in keys expiry.</td>
</tr>
<tr>
<td>RANDOMKEY</td>
<td>Returns a random key from Redis.</td>
</tr>
<tr>
<td>RENAME key newkey</td>
<td>Changes the key name.</td>
</tr>
<tr>
<td>RENAMENX key newkey</td>
<td>Renames the key, if a new key doesn’t exist.</td>
</tr>
<tr>
<td>TYPE key</td>
<td>Returns the data type of the value stored in the key.</td>
</tr>
</tbody>
</table>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>在事务中的所有命令都将会被串行化顺序执行，事务执行期间，Redis不会再为其它客户端的请求提供任何服务，从而保证了事务的原子性。</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>DISCARD</td>
<td>Discards all commands issued after MULTI.</td>
</tr>
<tr>
<td>EXEC</td>
<td>Executes all commands issued after MULTI.</td>
</tr>
<tr>
<td>MULTI</td>
<td>Marks the start of a transaction block.</td>
</tr>
<tr>
<td>UNWATCH</td>
<td>Forgets about all watched keys.</td>
</tr>
<tr>
<td>WATCH key [key …]</td>
<td>Watches the given keys to determine the execution of the MULTI/EXEC block.</td>
</tr>
</tbody>
</table>
<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>从Redis 2.6版本开始通过内嵌支持 Lua 环境，用于执行脚本的常用命令是EVAL。</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>EVAL script numkeys key [key …] arg [arg …]</td>
<td>Executes a Lua script.</td>
</tr>
<tr>
<td>EVALSHA sha1 numkeys key [key …] arg [arg …]</td>
<td>Executes a Lua script.</td>
</tr>
<tr>
<td>SCRIPT EXISTS script [script …]</td>
<td>Checks the existence of scripts in the script cache.</td>
</tr>
<tr>
<td>SCRIPT FLUSH</td>
<td>Removes all the scripts from the script cache.</td>
</tr>
<tr>
<td>SCRIPT KILL</td>
<td>Kills the script currently in execution.</td>
</tr>
<tr>
<td>SCRIPT LOAD script</td>
<td>Loads the specified Lua script into the script cache.</td>
</tr>
</tbody>
</table>
<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><ul>
<li>无持久化：我们可以通过配置的方式禁用Redis的持久化功能，这样我们就可以将Redis视为一个功能加强版的memcached了。</li>
<li>RDB(Relational Data Base)持久化：该机制是指在指定的时间间隔内将内存中的数据集快照写入磁盘。</li>
<li>AOF(Append Only File)持久化：该机制将以日志的形式记录服务器所处理的每一个写操作，在Redis服务器启动之初会读取该文件来重新构建数据库，以保证启动后数据库中的数据是完整的。</li>
<li>同时应用AOF和RDB：AOF和RDB两种持久化方式是可以同时存在的，但是当Redis重启时，AOF文件会被优先用于重建数据。</li>
</ul>
<h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>Redis提供了几种集群的方式：主从（Master-Slave）复制、哨兵（Sentinel）机制、Redis-Cluster集群模式</p>
<p><img src="/images/architect/redis-cluster.png" alt="Redis集群几种模式"></p>
<h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><h4 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h4><p>当Slave启动后，主动向Master发送SYNC命令。Master接收到SYNC命令后在后台保存快照（RDB持久化）和缓存保存快照这段时间的命令，然后将保存的快照文件和缓存的命令发送给Slave。Slave接收到快照文件和命令后加载快照文件和缓存的执行命令。</p>
<p>复制初始化后，Master每次接收到的写命令都会同步发送给Slave，保证主从数据一致性。</p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>Master可以进行读写操作，当读写操作导致数据变化时会自动将数据同步给Slave</li>
<li>Slave一般都是只读的，并且接收Master同步过来的数据</li>
<li>一个Master可以拥有多个Slave，但是一个Slave只能对应一个Master</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#bind 127.0.0.1</span><br><span class="line"></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line">slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure>
<h3 id="哨兵机制"><a href="#哨兵机制" class="headerlink" title="哨兵机制"></a>哨兵机制</h3><p>Redis主从复制的缺点：没有办法对 Master 进行动态选举，需要使用 Sentinel 机制完成动态选举。</p>
<h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul>
<li>监控Master和Slave是否正常运行</li>
<li>Master出现故障时，自动将Slave转化为Master</li>
<li>多哨兵配置的时候，哨兵之间也会自动监控</li>
<li>多个哨兵可以监控同一个redis</li>
</ul>
<blockquote>
<p>无论是主从模式还是哨兵模式，这两个模式都有一个问题，不能水平扩容，并且这两个模式的高可用特性都会受到Master主节点内存的限制。</p>
</blockquote>
<h3 id="Cluster集群模式"><a href="#Cluster集群模式" class="headerlink" title="Cluster集群模式"></a><a href="https://redis.io/topics/cluster-tutorial" target="_blank" rel="noopener">Cluster集群模式</a></h3><p>Redis 的哨兵模式基本已经可以实现高可用，读写分离 ，但是在这种模式下每台 Redis 服务器都存储相同的数据，很浪费内存，所以在 redis3.0上加入了 Cluster 集群模式，Redis Cluster是一种服务器 Sharding 技术，实现了 Redis 的分布式存储，<strong>也就是说每台 Redis 节点上存储不同的内容</strong>。</p>
<ul>
<li>Redis集群的键空间被分割为16384个槽(slot)，集群的最大节点数量也是16384个。</li>
<li>Redis集群把所有的物理节点映射到[0-16383]槽上，Cluster负责维护 node <-> slot <-> value。</-></-></li>
<li>Redis集群中内置了16384个哈希槽，当需要在Redis集群中放置一个 key-value 时，Redis通过 <em>CRC16(key) mod 16384</em> 算法将键映射到指定的槽上。  </li>
</ul>
<blockquote>
<p>哈希槽机制一个很明显的优势就是在处理并发的场景，因为它将数据集进行了分割，实际上减小了锁的粒度，从而扩大了并发度。Java中的ConcurrentHashMap容器就是应用这种机制来实现并发的典型例子。</p>
</blockquote>
<h4 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h4><ol>
<li>修改配置文件 <a href="http://download.redis.io/redis-stable/redis.conf" target="_blank" rel="noopener">redis.conf</a> 中的端口号并将cluster-enabled设置为yes来启用集群</li>
<li>启动所有redis实例</li>
<li>将ruby脚本 <a href="http://download.redis.io/redis-stable/src/redis-trib.rb" target="_blank" rel="noopener">redis-trib.rb</a> 拷贝到redis-cluster目录下</li>
<li>执行ruby脚本创建集群</li>
</ol>
<figure class="highlight rb"><table><tr><td class="code"><pre><span class="line">./redis-trib.rb create --replicas <span class="number">1</span> <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">7001</span> <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">7002</span> <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">7003</span> <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">7004</span> <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">7005</span> <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">7006</span></span><br></pre></td></tr></table></figure>
<h4 id="容错"><a href="#容错" class="headerlink" title="容错"></a>容错</h4><ol>
<li>节点检测(投票机制)<br> 每一个节点都存有这个集群所有主节点以及从节点的信息，它们之间通过互相的PING-PONG判断是否节点可以连接上，如果有一半以上的节点去PING一个节点的时候没有回应，集群就认为这个节点宕机了，然后去连接它的备用节点(集群中一个节点的Master挂掉，从节点会提升为主节点)。</li>
<li>集群进入fail状态的必要条件<ul>
<li>如果集群任意Master挂掉且当前Master没有Slave，集群进入fail状态(即集群的slot映射[0-16383]不完成时进入fail状态)。</li>
<li>如果集群有超过半数以上Master挂掉，无论是否有Slave，集群进入fail状态。</li>
</ul>
</li>
</ol>
<h2 id="使用Redis需要注意的问题"><a href="#使用Redis需要注意的问题" class="headerlink" title="使用Redis需要注意的问题"></a>使用Redis需要注意的问题</h2><h3 id="缓存使用原则"><a href="#缓存使用原则" class="headerlink" title="缓存使用原则"></a>缓存使用原则</h3><blockquote>
<p>缓存的添加不应该影响原有业务。</p>
</blockquote>
<h3 id="缓存更新"><a href="#缓存更新" class="headerlink" title="缓存更新"></a>缓存更新</h3><p>如果先让缓存失效再更新数据库，可能在让缓存失效后的瞬间，其他线程刚好去访问缓存，这时发现数据不存在就会去查询DB（脏数据）后再回设到缓存中，这样就会导致脏数据的出现。</p>
<blockquote>
<p>解决方案：先更新数据库，再让缓存失效。当然，在更新完数据库，未来得及让缓存失效的瞬间，其他线程访问到的缓存中的数据依然是脏数据，不过概率相对较小。</p>
</blockquote>
<h3 id="缓存击穿-缓存穿透"><a href="#缓存击穿-缓存穿透" class="headerlink" title="缓存击穿/缓存穿透"></a>缓存击穿/缓存穿透</h3><p>一般的缓存系统，都是按照key去缓存查询，如果不存在对应的value就会去DB查找。如果key对应的value是一定不存在的，并且对该key并发请求量很大，就会对DB造成很大的压力，这就叫做缓存穿透。</p>
<blockquote>
<p>解决方案：业界比较常用的做法是使用使用互斥锁（mutex）。简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db而是先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX或者Memcache的ADD）去set一个mutex key，当操作返回成功时，再进行load db的操作并回设缓存，否则，就重试整个get缓存的方法。</p>
</blockquote>
<!-- 解决方案：对查询结果为空的情况也进行缓存，如设置key对应对象为NULL，缓存时间设置短一点，当从DB获取到数据后及时更新。 -->
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(key)</span> </span>&#123;</span><br><span class="line">    String value = redis.get(key);</span><br><span class="line">    <span class="comment">// 代表缓存值未过期</span></span><br><span class="line">    <span class="keyword">if</span>(value != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置3min的超时，防止del操作失败的时候，下次缓存过期一直不能load db</span></span><br><span class="line">    <span class="comment">// SETNX，是「SET if Not eXists」的缩写，也就是只有不存在的时候才设置，可以利用它来实现锁的效果</span></span><br><span class="line">    <span class="keyword">if</span> (redis.setnx(key_mutex, <span class="number">1</span>, <span class="number">3</span> * <span class="number">60</span>) == <span class="number">1</span>) &#123;  <span class="comment">// 代表设置成功</span></span><br><span class="line">        value = db.get(key);</span><br><span class="line">        redis.set(key, value, expire_secs); </span><br><span class="line">        redis.del(key_mutex); <span class="comment">// 避免极端情况下，锁设置失效时间失败，导致了死锁发生，如果锁太久没被释放就主动删除锁</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 这个时候代表同时候的其他线程已经load db并回设到缓存了，这时候重试获取缓存值即可</span></span><br><span class="line">        sleep(<span class="number">50</span>);</span><br><span class="line">        value = get(key);  <span class="comment">// 重试</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存雪崩是指在我们设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重雪崩。</p>
<blockquote>
<p>解决方案：将缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值。</p>
</blockquote>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a><a href="https://redis.io/topics/faq" target="_blank" rel="noopener">常见问题</a></h2><h3 id="为什么Redis是单线程的？"><a href="#为什么Redis是单线程的？" class="headerlink" title="为什么Redis是单线程的？"></a>为什么Redis是单线程的？</h3><blockquote>
<p>因为Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了（单线程下已经很快了，没有必要再使用多线程了，并且使用单线程还省去了多线程之间的上下文切换导致的开销）；但是，使用单线程的方式就无法发挥多核CPU性能，不过我们可以通过在单机开多个Redis实例来完善。</p>
</blockquote>
<h3 id="单线程的Redis为什么快？"><a href="#单线程的Redis为什么快？" class="headerlink" title="单线程的Redis为什么快？"></a>单线程的Redis为什么快？</h3><blockquote>
<p>Redis使用的是非阻塞IO，IO多路复用技术，使用了单线程来轮询事件，将IO的读、写、连接都转换成了事件，这样使得只有在连接真正有读写事件发生时，才会调用函数来进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程，还避免了多线程之间的上下文切换导致的开销。</p>
</blockquote>
]]></content>
      <categories>
        <category>architect</category>
      </categories>
      <tags>
        <tag>distributed</tag>
      </tags>
  </entry>
  <entry>
    <title>序列化</title>
    <url>/2018/10/13/architect/distributed/serialization/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="序列化概述"><a href="#序列化概述" class="headerlink" title="序列化概述"></a>序列化概述</h2><p>对象的序列化主要有两种用途：  </p>
<ul>
<li>把对象序列化成字节码保存到指定介质上(如磁盘)</li>
<li>用于网络传输</li>
</ul>
<h2 id="对象序列化需要注意的几个情境"><a href="#对象序列化需要注意的几个情境" class="headerlink" title="对象序列化需要注意的几个情境"></a>对象序列化需要注意的几个情境</h2><h3 id="serialVersionUID-的作用"><a href="#serialVersionUID-的作用" class="headerlink" title="serialVersionUID 的作用"></a>serialVersionUID 的作用</h3><p>虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，一个非常重要的一点是两个类的 serialVersionUID 是否一致。  </p>
<p>serialVersionUID 在 Eclipse 下提供了两种生成策略，一个是固定的 1L，一个是随机生成一个不重复的 long 类型数据，在这里有一个建议，如果没有特殊需求，就是用默认的 1L 就可以，这样可以确保代码一致时反序列化成功。那么随机生成的 serialVersionUID 有什么作用呢，有些时候，通过改变 serialVersionUID 可以用来限制某些用户的使用。  </p>
<p><img src="/images/architect/io-serialization.png" alt="IO Serialization"> </p>
<p>Client 端通过 Façade Object 才可以与业务逻辑对象进行交互。而 Façade Object 不能直接由 Client 生成，而是需要 Server 端生成，然后序列化后通过网络将二进制对象数据传给 Client，Client 负责反序列化得到 Façade 对象。该模式可以使得 Client 端程序的使用需要服务器端的许可，同时 Client 端和服务器端的 Façade Object 类需要保持一致。当服务器端想要进行版本更新时，只要将服务器端的 Façade Object 类的 serialVersionUID 再次生成，当 Client 端反序列化 Façade Object 就会失败，也就是强制 Client 端从服务器端获取最新程序。  </p>
<p>注意，当未显式定义 serialVersionUID 的值时，Java 根据类的多个方面动态生成一个默认值，尽管这样，还是建议你在每一个序列化的类中显式指定 serialVersionUID 的值，因为不同的 jdk 编译很可能会生成不同的 serialVersionUID 默认值，进而导致在反序列化时抛出 InvalidClassExceptions 异常。所以，为了保证在不同的 jdk 编译实现中，其 serialVersionUID 的值也一致，可序列化的类必须显式指定 serialVersionUID 的值。另外，serialVersionUID 的修饰符最好是 private，因为 serialVersionUID 不能被继承，所以建议使用 private 修饰 serialVersionUID。  </p>
<h3 id="静态变量序列化"><a href="#静态变量序列化" class="headerlink" title="静态变量序列化"></a>静态变量序列化</h3><p>序列化保存的是对象的状态，静态变量属于类的状态，因此序列化并不保存静态变量。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> staticVar = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"result.obj"</span>));</span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> Test());</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            Test.staticVar = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"result.obj"</span>));</span><br><span class="line">            Test t = (Test) ois.readObject();</span><br><span class="line">            ois.close();</span><br><span class="line"></span><br><span class="line">            System.out.println(t.staticVar); <span class="comment">// 10</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="父类的序列化"><a href="#父类的序列化" class="headerlink" title="父类的序列化"></a>父类的序列化</h3><p>情境：一个子类实现了 Serializable 接口，它的父类都没有实现 Serializable 接口，序列化该子类对象，然后反序列化后输出父类定义的某变量的数值，该变量数值与序列化时的数值不同。<br>解决：要想将父类对象也序列化，就需要让父类也实现 Serializable 接口。在父类没有实现 Serializable 接口时，虚拟机是不会序列化父对象的。<br>一个 Java 对象的构造必须先有父对象才有子对象，反序列化也不例外。所以反序列化时，为了构造父对象，只能调用父类的无参构造函数作为默认的父对象。因此当我们取父对象的变量值时，它的值是调用父类无参构造函数后的值。如果你考虑到这种序列化的情况，在父类无参构造函数中对变量进行初始化，否则的话，父类变量值都是默认声明的值，如 int 类型的默认是 0，String 类型的默认是 null。  </p>
<h3 id="Transient-关键字"><a href="#Transient-关键字" class="headerlink" title="Transient 关键字"></a>Transient 关键字</h3><p>Transient 关键字的作用是控制变量的序列化，在变量声明前加上该关键字，可以阻止该变量被序列化到文件中，在被反序列化后，transient 变量的值被设为初始值，如 int 类型的是 0，对象类型的是 null。  </p>
<p>当然，除了使用 Transient 关键字可以使得字段不被序列化外，我们也可以根据父类对象序列化的规则，将不需要被序列化的字段抽取出来放到父类中，子类实现 Serializable 接口，父类不实现，根据父类序列化规则，父类的字段数据将不被序列化，从而使得代码更加简洁。  </p>
<h3 id="对敏感字段加密"><a href="#对敏感字段加密" class="headerlink" title="对敏感字段加密"></a>对敏感字段加密</h3><p>情境：服务器端给客户端发送序列化对象数据，对象中有一些数据是敏感的，比如密码字符串等，希望对该密码字段在序列化时进行加密，而客户端如果拥有解密的密钥，只有在客户端进行反序列化时，才可以对密码进行读取，这样可以一定程度保证序列化对象的数据安全。  </p>
<p>解决：在序列化过程中，虚拟机会试图调用对象类里的 writeObject 和 readObject 方法，进行用户自定义的序列化和反序列化，如果没有这样的方法，则默认调用是 ObjectOutputStream 的 defaultWriteObject 方法以及 ObjectInputStream 的 defaultReadObject 方法。用户自定义的 writeObject 和 readObject 方法可以允许用户控制序列化的过程，比如可以在序列化的过程中动态改变序列化的数值。基于这个原理，可以在实际应用中得到使用，用于敏感字段的加密工作。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">"pass"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(ObjectOutputStream out)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream.PutField putFields = out.putFields();</span><br><span class="line">            System.out.println(<span class="string">"原密码: "</span> + password);</span><br><span class="line">            password = <span class="string">"encryption"</span>; <span class="comment">// 模拟加密</span></span><br><span class="line">            putFields.put(<span class="string">"password"</span>, password);</span><br><span class="line">            System.out.println(<span class="string">"加密后的密码: "</span> + password);</span><br><span class="line">            out.writeFields();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectInputStream.GetField readFields = in.readFields();</span><br><span class="line">            Object object = readFields.get(<span class="string">"password"</span>, <span class="string">""</span>);</span><br><span class="line">            System.out.println(<span class="string">"要解密的字符串: "</span> + object.toString());</span><br><span class="line">            password = <span class="string">"pass"</span>;<span class="comment">// 模拟解密</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"result.obj"</span>));</span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> Test());</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"result.obj"</span>));</span><br><span class="line">            Test t = (Test) ois.readObject();</span><br><span class="line">            ois.close();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"解密后的字符串: "</span> + t.getPassword());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>RMI 技术是完全基于 Java 序列化技术的，服务器端接口调用所需要的参数对象来至于客户端，它们通过网络相互传输，这就涉及 RMI 的安全传输的问题。一些敏感的字段，如用户名密码(用户登录时需要对密码进行传输)，我们希望对其进行加密，这时，就可以采用本节介绍的方法在客户端对密码进行加密，服务器端进行解密，确保数据传输的安全性。  </p>
<h3 id="序列化存储规则"><a href="#序列化存储规则" class="headerlink" title="序列化存储规则"></a>序列化存储规则</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"result.obj"</span>));</span><br><span class="line">            Test test = <span class="keyword">new</span> Test();</span><br><span class="line">            <span class="comment">// 试图将对象两次写入文件</span></span><br><span class="line">            oos.writeObject(test);</span><br><span class="line">            oos.flush();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> File(<span class="string">"result.obj"</span>).length()); <span class="comment">// 47</span></span><br><span class="line">            oos.writeObject(test);</span><br><span class="line">            oos.close();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> File(<span class="string">"result.obj"</span>).length()); <span class="comment">// 52</span></span><br><span class="line"></span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"result.obj"</span>));</span><br><span class="line">            <span class="comment">// 从文件依次读出两个文件</span></span><br><span class="line">            Test t1 = (Test) ois.readObject();</span><br><span class="line">            Test t2 = (Test) ois.readObject();</span><br><span class="line">            ois.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断两个引用是否指向同一个对象</span></span><br><span class="line">            System.out.println(t1 == t2); <span class="comment">// true</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Java 序列化机制为了节省磁盘空间，具有特定的存储规则，当写入文件的为同一对象时，并不会再将对象的内容进行存储，而只是再次存储一份引用，上面代码输出结果增加的 5 字节的存储空间就是新增引用和一些控制信息的空间。反序列化时，恢复引用关系，使得 t1 和 t2 指向唯一的对象，二者相等，输出 true。该存储规则极大的节省了存储空间。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"result.obj"</span>));</span><br><span class="line">            Test test = <span class="keyword">new</span> Test();</span><br><span class="line">            test.i = <span class="number">1</span>;</span><br><span class="line">            out.writeObject(test);</span><br><span class="line">            out.flush();</span><br><span class="line">            test.i = <span class="number">2</span>;</span><br><span class="line">            out.writeObject(test);</span><br><span class="line">            out.close();</span><br><span class="line"></span><br><span class="line">            ObjectInputStream oin = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"result.obj"</span>));</span><br><span class="line">            Test t1 = (Test) oin.readObject();</span><br><span class="line">            Test t2 = (Test) oin.readObject();</span><br><span class="line"></span><br><span class="line">            System.out.println(t1.i + <span class="string">":"</span> + t2.i);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码目的是希望将 test 对象写入一次以后修改对象属性值再次保存第二次，然后从 result.obj 中再依次读出两个对象，输出这两个对象的 i 属性值，结果两个输出的都是 1。原因就是第一次写入对象以后，第二次再试图写的时候，虚拟机根据引用关系知道已经有一个相同对象已经写入文件，因此只保存第二次写的引用，所以读取时，都是第一次保存的对象。所以在使用一个文件多次 writeObject 时需要特别注意这个问题。  </p>
<h2 id="序列化实现深克隆"><a href="#序列化实现深克隆" class="headerlink" title="序列化实现深克隆"></a>序列化实现深克隆</h2><p>浅克隆：复制出来的对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。<br>深克隆：复制出来的所有变量都含有与原来的对象相同的值，那些引用其他对象的变量将指向复制出来的新对象，而不再是原有的那些被引用的对象，换言之，深复制把要复制的对象所引用的对象都复制了一遍。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Foo foo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.foo = <span class="keyword">new</span> Foo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写该方法(让持有的引用foo不再指向原来的对象)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Test test = (Test) <span class="keyword">super</span>.clone();</span><br><span class="line">        test.foo = (Foo) <span class="keyword">this</span>.foo.clone();</span><br><span class="line">        <span class="keyword">return</span> test;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Test orig = <span class="keyword">new</span> Test();</span><br><span class="line">        Test clone = (Test) orig.clone();</span><br><span class="line">        System.out.println(orig.foo == clone.foo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Foo foo = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                foo = (Foo) <span class="keyword">super</span>.clone();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> foo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过实现 Cloneable 接口并重写 clone 方法虽然能实现深克隆，但是，如果要克隆的对象继承链比较长的话，要实现深克隆，就必须逐层地实现 Cloneable 接口，比较麻烦。<br>Java可以把对象序列化写进一个流里面，反之也可以把对象从序列化流里面读取出来，但这一进一出，这个对象就不再是原来的对象了，这样就可以简便地实现深克隆了。    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Foo foo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.foo = <span class="keyword">new</span> Foo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Test <span class="title">serializableClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Test clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">            oos.writeObject(<span class="keyword">this</span>);</span><br><span class="line">            ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">            clone = (Test) ois.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Test orig = <span class="keyword">new</span> Test();</span><br><span class="line">        Test clone = orig.serializableClone();</span><br><span class="line">        System.out.println(orig.foo == clone.foo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="序列化技术"><a href="#序列化技术" class="headerlink" title="序列化技术"></a>序列化技术</h2><p>由于 Java 本身的序列化机制存在着序列化结果比较大、传输效率低、不能跨语言的问题，所以出现了基于 XML 和 JSON 以及基于二进制协议的序列化机制，基于二进制协议的比较主流的有 Hessian、MessagePack、Thrift、Protobuf、Avro、Kryo。  </p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-serial/index.html" target="_blank" rel="noopener">杨硕, 魏强. <em>Java序列化的高级认识</em></a></li>
</ul>
]]></content>
      <categories>
        <category>architect</category>
      </categories>
      <tags>
        <tag>distributed</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式事务</title>
    <url>/2018/12/27/architect/distributed/transaction/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在微服务架构中，随着服务的逐步拆分，数据库私有已经成为共识，这也导致所面临的分布式事务问题成为微服务落地过程中一个非常难以逾越的障碍，但是目前尚没有一个完整通用的解决方案。</p>
<p>其实不仅仅是在微服务架构中，随着用户访问量的逐渐上涨，数据库甚至是服务的分片、分区、水平拆分、垂直拆分已经逐渐成为较为常用的提升瓶颈的解决方案，因此越来越多的原子操作变成了<code>跨库</code>甚至是<code>跨服务</code>的事务操作，最终结果是在对高性能、高扩展性、高可用性的追求的道路上，我们开始逐渐放松对一致性的追求，但是在很多场景下，尤其是账务、电商等业务中，不可避免的存在着一致性问题，使得我们不得不去探寻一种机制，用以在分布式环境中保证事务的一致性。</p>
<p>微服务使得单体架构扩展为分布式架构，在扩展的过程中，逐渐丧失了单体架构中数据源单一、可以直接依赖于数据库进行事务操作的能力。而关系型数据库中，提供了强大的事务处理能力，可以满足<code>ACID</code>特性，这种特性保证了数据操作的强一致性，这也是分布式环境中弱一致性以及最终一致性能够得以实现的基础。</p>
<p>在讨论分布式事务之前，我们得先弄清楚本地事务和全局事务的概念以及它们的使用场景。</p>
<h3 id="本地事务"><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h3><blockquote>
<p>本地事务：在单个数据库的本地并且限制在单个进程内的事务（本地事务不涉及多个数据来源），事务由资源管理器（如DBMS）本地管理，而Spring为我们提供了非常方便的声明式事务管理，但是默认的Spring事务只支持单数据源，而实际上一个应用往往需要进行<code>跨库</code>甚至是<code>跨服务</code>的事务操作，这个时候就要依靠分布式事务。</p>
</blockquote>
<ul>
<li>优点<ol>
<li>支持严格的ACID属性</li>
<li>可靠</li>
<li>高效</li>
<li>状态可以只在资源管理器中维护</li>
<li>应用编程模型简单</li>
</ol>
</li>
<li>缺点<ol>
<li>不具备分布式事务处理能力</li>
<li>隔离的最小单位由资源管理器决定，如数据库中的一条记录</li>
</ol>
</li>
</ul>
<h3 id="全局事务"><a href="#全局事务" class="headerlink" title="全局事务"></a>全局事务</h3><blockquote>
<p>全局事务：由全局事务管理器管理和协调的事务，可以跨越多个资源（如数据库或JMS队列）和进程，全局事务管理器一般使用XA二阶段提交协议与数据库进行交互，事务由全局事务管理器全局管理。</p>
</blockquote>
<ul>
<li>优点：严格的ACID</li>
<li>缺点：效率非常低（微服务架构下已不太适用）<ol>
<li>全局事务方式下，全局事务管理器（TM）通过XA接口使用二阶段提交协议（2PC）与资源层（如数据库）进行交互，使用全局事务，数据被Lock的时间跨整个事务，直到全局事务结束。</li>
<li>2PC是反可伸缩模式，在事务处理过程中，参与者需要一直持有资源直到整个分布式事务结束。这样，当业务规模越来越大的情况下，2PC的局限性就越来越明显，系统可伸缩性会变得很差。</li>
<li>与本地事务相比，XA协议的系统开销相当大，因而应当慎重考虑是否确实需要分布式事务，而且只有支持XA协议的资源才能参与分布式事务。</li>
</ol>
</li>
</ul>
<p>全局事务，作为一种标准的分布式事务解决方案，它解决了本地事务无法满足分布式场景中数据的ACID的要求，但由于其存在效率底下的致命缺点，在微服务架构下已不太适用。</p>
<p>在业内，主要用来解决分布式事务的方案是使用柔性事务，柔性事务包括几种类型：两阶段型、补偿型、异步确保型和最大努力通知型。</p>
<h2 id="基于可靠消息最终一致性（异步确保型）"><a href="#基于可靠消息最终一致性（异步确保型）" class="headerlink" title="基于可靠消息最终一致性（异步确保型）"></a>基于可靠消息最终一致性（异步确保型）</h2><p>数据一致性分为三个种类型：强一致性、弱一致性以及最终一致性，数据库实现的就是强一致性，能够保证在写入一份新的数据库，立即使其可见。最终一致性是弱一致性的强化版，系统保证在没有后续更新的前提下，系统最终返回上一次更新操作的值。在最终一致性的实现过程中，最基本的操作就是保证事务参与者的幂等性，所谓的幂等性，就是业务方能够使用相关的手段，保证单个事务多次提交依然能够保证达到同样的目的。</p>
<p>在分布式系统中，服务之间通常会通过RPC来进行网络通讯，而远程调用最郁闷的地方就是结果有三种：成功、失败和超时（成功失败都有可能），从而导致了数据传输的不确定性，如何确保消息发送的一致性是可靠消息的前提保障。</p>
<ul>
<li>RPC同步调用：RPC的同步调用确保请求送达对方并收到对方响应，若没有收到响应，则抛出<code>Timeout</code>异常，这种情况下调用方是无法确定调用是成功还是失败的，需要根据业务场景（是否可重入、幂等）选择重试和补偿策略。</li>
<li>消息发送一致性：如果业务操作成功，那么由这个业务操作所产生的消息一定要成功投递出去，否则就会丢失消息。在设计范式里通常不允许消费下游业务失败，不然后面失败了前面也不好回滚。但消费端消费失败时该怎么办？消费失败了，重试，还一直失败怎么办？是不是要自动回滚整个流程？答案是人工介入。从工程实践角度讲，这种整个流程自动回滚的代价是非常巨大的，不但实现复杂，还会引入新的问题，比如自动回滚失败，又怎么处理？针对这种极低概率的情况，采取人工处理会比实现一个高复杂的自动化回滚系统更加可靠也更加简单。</li>
<li>最终一致性：主要是用<code>记录</code>和<code>补偿</code>的方式。在做所有的不确定的事情之前，先把事情记录下来，然后去做不确定的事情，结果可能是：成功、失败或是不确定，<code>不确定</code>（例如超时等）可以等价为失败。成功就可以把记录的东西清理掉了，对于失败和不确定，可以依靠<code>定时任务</code>等方式把所有失败的事情重新执行一遍，直到成功为止。</li>
</ul>
<p>以购物场景为例，张三购买物品，账户扣款 100 元的同时，需要在下游的会员服务给该账户增加 100 积分，如何保证原子性？</p>
<p>一般的思路都是通过消息中间件来实现最终一致性：资金账户服务扣钱，然后发消息给中间件，会员积分服务接收此消息，进行增加积分。</p>
<p>但这里面有个问题：在资金账户服务中，是先更新DB后发送消息呢？ 还是先发送消息后更新DB？</p>
<p>假设先更新DB成功，发送消息网络异常，重发又失败，怎么办？假设先发送消息成功，更新DB失败，消息已经发出去了，又不能撤回，怎么办？</p>
<p>当然，你可能已经想到了，我可以把发送消息这个网络调用和更新DB放在同一个本地事务中，如果发送消息失败，更新DB自动回滚，这样不就保证两个操作的原子性了吗？这个方案看似正确，但其实是错误的，原因有：</p>
<ol>
<li>把网络调用放在DB事务里面，可能会因为网络的延时，导致DB长事务，严重地会Block住整个DB，风险很大。</li>
<li>网络的两军问题：发送消息失败，发送方并不知道消息中间件是真的没有收到消息还是消息已经收到了只是返回的时候失败了，如果是已经收到消息了，而发送端认为没有收到而执行事务回滚操作，从而无法保证数据的一致性。</li>
</ol>
<p>所以，这里得出结论：只要发送消息和更新DB这两个操作不是原子的，无论谁先谁后都是有问题的。</p>
<p>事务消息的本质就是为了解决此类问题，即解决本地事务执行与消息发送的原子性问题。</p>
<p><img src="/images/architect/distributed-transaction.png" alt="基于可靠消息最终一致性的分布式事务解决方案"></p>
<p>消息发送基本流程如下：</p>
<ol>
<li>上游业务系统首先预发送（同步发送）消息到可靠消息服务</li>
<li>在预发送消息成功返回后执行本地事务（在返回过程中出现死机、超时等异常情况的消息将由消息状态确认子系统处理）</li>
<li>上游业务系统将本地事务执行结果发送（异步发送）到可靠消息服务（在发送过程中出现死机、超时等异常情况的消息将由消息状态确认子系统处理）</li>
<li>如果业务处理成功，可靠消息服务则更新消息状态并将消息投放到实时消息服务(消息中间件)；如果业务处理失败，则将该消息进行删除</li>
</ol>
<p>消息消费基本流程如下：</p>
<ol>
<li>投放到实时消息服务的消息会被消息业务消费端监听并调用（同步）下游业务系统进行消费</li>
<li>如果下游业务系统业务处理成功，消息业务消费端则和实时消息服务、可靠消息服务进行确认（确认结果就是将消息删除）；如果业务处理失败，则由消息恢复子系统进行处理</li>
</ol>
<ul>
<li>优点<ol>
<li>消息服务独立部署、独立维护、独立伸缩；</li>
<li>消息存储可以按需选择不同的数据库来集成实现；</li>
<li>消息服务可以被相同的使用场景共用，降低重复建设消息服务的成本；</li>
<li>从应用（分布式服务）设计开发的角度实现了消息数据的可靠性，消息数据的可靠性不依赖于MQ中间件，弱化了对MQ中间件特性的依赖；</li>
<li>降低了业务系统与消息系统间的耦合，有利于系统的扩展维护。</li>
</ol>
</li>
<li>弊端<ol>
<li>一次消息发送需要两次请求；</li>
<li>上游业务系统需要提供一个事务状态查询接口供可靠消息服务调用；</li>
<li>当下游业务处理成功时，下游业务系统需要调用可靠消息服务相关接口进行确认。</li>
</ol>
</li>
</ul>
<p><em>相关说明：</em></p>
<ul>
<li><p>上游业务系统预发送消息操作为何是同步的？</p>
<blockquote>
<p>因为我们需要获取消息预发送成功后返回的信息(消息ID)，否则后面就无法进行后续的消息更新(确认)或删除操作了。但消息预发送可能会有三种结果：成功、失败、超时(成功或失败都有可能)。然而，这个不要紧，因为消息必须要确认后才会进行投递。如果出现超时现象，我们尽可以把这个<strong>待确认</strong>的消息丢弃。此外，上游业务系统如果收到的不是<strong>消息预发送成功</strong>的反馈结果，就不会执行下一步业务处理操作，从而仍可以保证整个系统的一致性。</p>
</blockquote>
</li>
<li><p>上游业务系统发送业务处理结果为何是异步的？</p>
<blockquote>
<p>首先，上游系统和消息中间件之间采用异步通信是为了提高系统并发度。业务系统直接和用户打交道，用户体验尤为重要，因为这种异步通信方式能够极大程度地降低用户等待问题。此外，异步通信相对于同步通信，没有了长时间的阻塞等待，因此系统的并发性也大大增加。对于异步通信可能引起信息的丢失问题，可以由消息服务的超时询问机制来弥补。</p>
</blockquote>
</li>
<li><p>消息中间件投递消息失败后，为何是不断尝试重投而不是进行业务回滚？ </p>
<blockquote>
<p>这就涉及到分布式事务系统的实现成本问题。我们知道，当上游业务系统向消息中间件发送业务处理结果后，并不获取任何反馈结果便直接去做别的事情了。如果此时消息投递失败，我们就可以进行重试(下游业务系统需要保证幂等)。如果不断重试(超过了最大重试次数)还是失败了，那么就可以发通知，然后人工介入处理了。而如果是进行业务回滚的话，则需要让上游业务系统事先提供回滚接口，这无疑增加了额外的开发成本，业务系统的复杂度也将提高，为了这种小概率事件而设计这个复杂的流程反而得不偿失。对于一个业务系统的设计目标是：在保证性能的前提下，最大限度地降低系统的复杂度，从而降低系统的运维成本。</p>
</blockquote>
</li>
<li><p>消息中间件和下游业务系统之间为什么要采用同步通信？</p>
<blockquote>
<p>上游业务系统发送完业务处理结果后，并不获取任何反馈结果便直接去做别的事情，接下来提交或回滚操作就完全交给消息中间件来完成，并且完全信任消息中间件，认为它一定能正确地完成事务的提交或回滚。然而，消息中间件向下游系统投递消息的过程是同步的，也就是消息中间件将消息投递给下游系统后，它会阻塞等待，等下游系统成功处理完任务返回确认应答后才取消阻塞等待，为什么这两者在设计上是不一致的呢？</p>
<p>异步通信能提升系统性能，但随之会增加系统复杂度；而同步虽然降低系统并发度，但实现成本较低。因此，在对并发度要求不是很高或者服务器资源较为充裕的情况下，我们可以选择同步来降低系统的复杂度。我们知道，消息中间件是一个独立于业务系统的第三方中间件，它不和任何业务系统产生直接的耦合，它也不和用户产生直接的关联，它一般部署在独立的服务器集群上，具有良好的可扩展性，所以不必太过于担心它的性能，如果处理速度无法满足我们的要求，可以增加机器来解决。而且，即使消息中间件处理速度有一定的延迟也是可以接受的，因为我们追求的是最终一致性而非实时一致性，因此消息中间件产生的延时导致事务短暂的不一致是可以接受的。</p>
</blockquote>
</li>
</ul>
<h3 id="可靠消息服务"><a href="#可靠消息服务" class="headerlink" title="可靠消息服务"></a>可靠消息服务</h3><p>对消息进行预存储和转发以确保消息不丢失。</p>
<blockquote>
<p>尽管我们可以尽量地确保MQ可靠，让MQ可靠地持久化消息，但是网络是不可靠的，几乎没有办法确保网络可靠。所以，我们期望有一个可靠消息，能够避免任何问题，包括网络问题。如果消息不可靠，那么我们就需要采取其他的措施，比如本地消息表。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tx_message (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'消息ID'</span>,</span><br><span class="line">  <span class="keyword">version</span> <span class="built_in">int</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'版本号'</span>,</span><br><span class="line">  msg_status <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'消息状态：待确认、发送中'</span>,</span><br><span class="line">  msg_body <span class="built_in">text</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'消息内容'</span>,</span><br><span class="line">  content_type <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'JSON'</span> <span class="keyword">COMMENT</span> <span class="string">'消息数据类型'</span>,</span><br><span class="line">  dead_letter <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'死信'</span>,</span><br><span class="line">  retry_times <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'重试次数(超过最大重试次数将成为死信)'</span>,</span><br><span class="line">  biz_id <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'业务ID'</span>,</span><br><span class="line">  queue <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'消息队列'</span>,</span><br><span class="line">  callback <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'业务状态回查接口'</span>,</span><br><span class="line">  remark <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'备注'</span>,</span><br><span class="line">  created_at <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  created_by <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建者'</span>,</span><br><span class="line">  updated_at <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">  updated_by <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新者'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'事务消息表'</span>;</span><br></pre></td></tr></table></figure>
<h3 id="消息状态确认子系统"><a href="#消息状态确认子系统" class="headerlink" title="消息状态确认子系统"></a>消息状态确认子系统</h3><p>用于定时从可靠消息服务中查询状态为<code>待确认</code>的消息，然后和上游业务系统进行确认，并根据确认结果进行处理：如果确认上游业务已处理成功，则更新消息状态并将消息投递到实时消息服务；如果确认上游业务处理失败，则将该消息删除；如果上游业务正在处理中，则继续等待(下次处理)。</p>
<h3 id="消息恢复子系统"><a href="#消息恢复子系统" class="headerlink" title="消息恢复子系统"></a>消息恢复子系统</h3><p>用于定时从可靠消息服务中查询状态为<code>发送中</code>的消息并进行重新投递到实时消息服务(消息中间件)。</p>
<blockquote>
<p>由于可靠消息服务存在重投机制，所以下游业务系统必须保证相关业务接口的幂等性（即<code>f(n)=f(1)</code>），以确保消息不会被重复消费。</p>
</blockquote>
<h3 id="消息管理子系统"><a href="#消息管理子系统" class="headerlink" title="消息管理子系统"></a>消息管理子系统</h3><p>主要用于对已死亡的消息进行人工干预。</p>
<h3 id="实时消息服务（消息中间件）"><a href="#实时消息服务（消息中间件）" class="headerlink" title="实时消息服务（消息中间件）"></a>实时消息服务（消息中间件）</h3><p>主要用于消息存储和转发。</p>
<h2 id="RocketMQ事务消息"><a href="#RocketMQ事务消息" class="headerlink" title="RocketMQ事务消息"></a><a href="http://rocketmq.apache.org/docs/transaction-example/" target="_blank" rel="noopener">RocketMQ事务消息</a></h2><p>在RocketMQ中实现了分布式事务，实际上其实是对本地消息表的一个封装，将本地消息表移动到了MQ内部，其基本流程如下：</p>
<ol>
<li>事务发起方首先发送prepare消息到MQ</li>
<li>在发送prepare消息成功后执行本地事务</li>
<li>根据本地事务执行结果返回commit或者rollback</li>
<li>如果是rollback消息，MQ将删除该prepare消息不进行投递；如果是commit消息，MQ将会把这个消息投递给consumer端</li>
<li>如果执行本地事务过程中，出现死机、超时等异常情况导致消息确认失败，那么MQ将会不停地询问其同组的其它producer来获取状态</li>
<li>consumer端的消费成功机制由MQ保证</li>
</ol>
<blockquote>
<p>RocketMQ的事务消息主要是通过消息的异步处理，可以保证 <code>本地事务</code> 和 <code>消息发送</code> 同时成功或失败，从而保证数据的最终一致性。</p>
</blockquote>
<p><img src="/images/architect/distributed-transaction-rocketmq.png" alt="RocketMQ事务消息"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TransactionMQProducer producer = <span class="keyword">new</span> TransactionMQProducer(<span class="string">"TransactionGroup"</span>);</span><br><span class="line">        producer.setNamesrvAddr(<span class="string">"127.0.0.1:9876"</span>);</span><br><span class="line">        producer.setTransactionListener(<span class="keyword">new</span> TransactionListenerImpl());</span><br><span class="line">        producer.setExecutorService(ForkJoinPool.commonPool());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            producer.start();</span><br><span class="line">            <span class="comment">// 发送事务消息, 此消息不可见</span></span><br><span class="line">            TransactionSendResult sendResult = producer.sendMessageInTransaction(<span class="keyword">new</span> Message(</span><br><span class="line">                    <span class="string">"TransactionTopic"</span>,</span><br><span class="line">                    <span class="string">"事务消息"</span>.getBytes(StandardCharsets.UTF_8)</span><br><span class="line">            ), <span class="string">"tx"</span>);</span><br><span class="line">            log.debug(<span class="string">"====== &#123;&#125; ======"</span>, sendResult);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            producer.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionListenerImpl</span> <span class="keyword">implements</span> <span class="title">TransactionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储当前线程对应的事务状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, LocalTransactionState&gt; localTrans = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送prepare消息成功后回调该方法用于执行本地事务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 回传的消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arg 调用send方法时传递的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">executeLocalTransaction</span><span class="params">(Message msg, Object arg)</span> </span>&#123;</span><br><span class="line">        String transactionId = msg.getTransactionId();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            localTrans.put(transactionId, UNKNOW);</span><br><span class="line">            log.debug(<span class="string">"====== 开始执行本地事务: transactionId=&#123;&#125; ======"</span>, transactionId);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">60</span>);</span><br><span class="line">            log.debug(<span class="string">"====== 执行本地事务成功 ======"</span>);</span><br><span class="line">            localTrans.put(transactionId, COMMIT_MESSAGE);</span><br><span class="line">            <span class="keyword">return</span> COMMIT_MESSAGE;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            localTrans.put(transactionId, ROLLBACK_MESSAGE);</span><br><span class="line">            <span class="keyword">return</span> ROLLBACK_MESSAGE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息回查, 当本地事务超时, broker会做消息回查操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">checkLocalTransaction</span><span class="params">(MessageExt msg)</span> </span>&#123;</span><br><span class="line">        String transactionId = msg.getTransactionId();</span><br><span class="line">        LocalTransactionState transactionState = localTrans.get(transactionId);</span><br><span class="line">        log.debug(<span class="string">"====== 执行消息回查: transactionId=&#123;&#125;, transactionState=&#123;&#125; ======"</span>, transactionId, transactionState);</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(transactionState).orElse(UNKNOW);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">====== 开始执行本地事务: transactionId=AC140A031F7C18B4AAC28A2C0D070000 ======</span><br><span class="line">====== 执行消息回查: transactionId=AC140A0323D018B4AAC28A25C2F40000, transactionState=null ======</span><br><span class="line">====== 执行消息回查: transactionId=AC140A031F7C18B4AAC28A2C0D070000, transactionState=UNKNOW ======</span><br><span class="line">====== 执行本地事务成功 ======</span><br><span class="line">====== SendResult [sendStatus=SEND_OK, msgId=AC140A031F7C18B4AAC28A2C0D070000, offsetMsgId=null, messageQueue=MessageQueue [topic=TransactionTopic, brokerName=Lenovo-PC, queueId=1], queueOffset=8] ======</span><br></pre></td></tr></table></figure>
<h2 id="Seata分布式事务解决方案"><a href="#Seata分布式事务解决方案" class="headerlink" title="Seata分布式事务解决方案"></a><a href="https://github.com/seata/seata/wiki" target="_blank" rel="noopener">Seata分布式事务解决方案</a></h2>]]></content>
      <categories>
        <category>architect</category>
      </categories>
      <tags>
        <tag>distributed</tag>
      </tags>
  </entry>
  <entry>
    <title>性能优化 - Tomcat</title>
    <url>/2018/12/08/architect/performance/tomcat/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="REST应用减配"><a href="#REST应用减配" class="headerlink" title="REST应用减配"></a>REST应用减配</h2><p><img src="/images/architect/performance-jconsole.png" alt="performance-jconsole"><br>如上图所示，在默认情况下，Tomcat启用了<code>org.apache.catalina.servlets.DefaultServlet</code>和<code>org.apache.jasper.servlet.JspServlet</code>来分别对静态资源和JSP进行处理。而在时下流行的微服务架构中，应用通常采用前后端分离的设计，后端的功能通过<code>REST API</code>方式向前端提供服务。针对REST应用，我们可以将该两项配置禁用掉，即将<code>${TOMCAT_HOME}/conf/web.xml</code>配置文件中的以下内容注释掉：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.jasper.servlet.JspServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>fork<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>xpoweredBy<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jspx<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="禁用AccessLogValve"><a href="#禁用AccessLogValve" class="headerlink" title="禁用AccessLogValve"></a>禁用AccessLogValve</h2><p>在Nginx代理服务器中已经记录了AccessLog日志，所以在Tomcat应用服务器中没必要再记录一份，可以将<code>${TOMCAT_HOME}/conf/server.xml</code>配置文件中的以下内容注释掉：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">prefix</span>=<span class="string">"localhost_access_log"</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">pattern</span>=<span class="string">"%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="线程池配置"><a href="#线程池配置" class="headerlink" title="线程池配置"></a>线程池配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Executor</span> <span class="attr">name</span>=<span class="string">"tomcatThreadPool"</span> <span class="attr">namePrefix</span>=<span class="string">"catalina-exec-"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">maxThreads</span>=<span class="string">"200"</span> <span class="attr">minSpareThreads</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">executor</span>=<span class="string">"tomcatThreadPool"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>温馨提示：配置后可通过JDK自带的<code>jconsole</code>监视工具观察配置是否生效。</p>
</blockquote>
]]></content>
      <categories>
        <category>architect</category>
      </categories>
      <tags>
        <tag>performance</tag>
      </tags>
  </entry>
</search>
